// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package common_mock

import (
	"github.com/go-git/go-git/v5"
	"sync"
)

// GogitMock is a mock implementation of common.Gogit.
//
// 	func TestSomethingThatUsesGogit(t *testing.T) {
//
// 		// make and configure a mocked common.Gogit
// 		mockedGogit := &GogitMock{
// 			PlainCloneFunc: func(path string, isBare bool, o *git.CloneOptions) (*git.Repository, error) {
// 				panic("mock out the PlainClone method")
// 			},
// 			PlainInitFunc: func(path string, isBare bool) (*git.Repository, error) {
// 				panic("mock out the PlainInit method")
// 			},
// 			PlainOpenFunc: func(path string) (*git.Repository, error) {
// 				panic("mock out the PlainOpen method")
// 			},
// 		}
//
// 		// use mockedGogit in code that requires common.Gogit
// 		// and then make assertions.
//
// 	}
type GogitMock struct {
	// PlainCloneFunc mocks the PlainClone method.
	PlainCloneFunc func(path string, isBare bool, o *git.CloneOptions) (*git.Repository, error)

	// PlainInitFunc mocks the PlainInit method.
	PlainInitFunc func(path string, isBare bool) (*git.Repository, error)

	// PlainOpenFunc mocks the PlainOpen method.
	PlainOpenFunc func(path string) (*git.Repository, error)

	// calls tracks calls to the methods.
	calls struct {
		// PlainClone holds details about calls to the PlainClone method.
		PlainClone []struct {
			// Path is the path argument value.
			Path string
			// IsBare is the isBare argument value.
			IsBare bool
			// O is the o argument value.
			O *git.CloneOptions
		}
		// PlainInit holds details about calls to the PlainInit method.
		PlainInit []struct {
			// Path is the path argument value.
			Path string
			// IsBare is the isBare argument value.
			IsBare bool
		}
		// PlainOpen holds details about calls to the PlainOpen method.
		PlainOpen []struct {
			// Path is the path argument value.
			Path string
		}
	}
	lockPlainClone sync.RWMutex
	lockPlainInit  sync.RWMutex
	lockPlainOpen  sync.RWMutex
}

// PlainClone calls PlainCloneFunc.
func (mock *GogitMock) PlainClone(path string, isBare bool, o *git.CloneOptions) (*git.Repository, error) {
	if mock.PlainCloneFunc == nil {
		panic("GogitMock.PlainCloneFunc: method is nil but Gogit.PlainClone was just called")
	}
	callInfo := struct {
		Path   string
		IsBare bool
		O      *git.CloneOptions
	}{
		Path:   path,
		IsBare: isBare,
		O:      o,
	}
	mock.lockPlainClone.Lock()
	mock.calls.PlainClone = append(mock.calls.PlainClone, callInfo)
	mock.lockPlainClone.Unlock()
	return mock.PlainCloneFunc(path, isBare, o)
}

// PlainCloneCalls gets all the calls that were made to PlainClone.
// Check the length with:
//     len(mockedGogit.PlainCloneCalls())
func (mock *GogitMock) PlainCloneCalls() []struct {
	Path   string
	IsBare bool
	O      *git.CloneOptions
} {
	var calls []struct {
		Path   string
		IsBare bool
		O      *git.CloneOptions
	}
	mock.lockPlainClone.RLock()
	calls = mock.calls.PlainClone
	mock.lockPlainClone.RUnlock()
	return calls
}

// PlainInit calls PlainInitFunc.
func (mock *GogitMock) PlainInit(path string, isBare bool) (*git.Repository, error) {
	if mock.PlainInitFunc == nil {
		panic("GogitMock.PlainInitFunc: method is nil but Gogit.PlainInit was just called")
	}
	callInfo := struct {
		Path   string
		IsBare bool
	}{
		Path:   path,
		IsBare: isBare,
	}
	mock.lockPlainInit.Lock()
	mock.calls.PlainInit = append(mock.calls.PlainInit, callInfo)
	mock.lockPlainInit.Unlock()
	return mock.PlainInitFunc(path, isBare)
}

// PlainInitCalls gets all the calls that were made to PlainInit.
// Check the length with:
//     len(mockedGogit.PlainInitCalls())
func (mock *GogitMock) PlainInitCalls() []struct {
	Path   string
	IsBare bool
} {
	var calls []struct {
		Path   string
		IsBare bool
	}
	mock.lockPlainInit.RLock()
	calls = mock.calls.PlainInit
	mock.lockPlainInit.RUnlock()
	return calls
}

// PlainOpen calls PlainOpenFunc.
func (mock *GogitMock) PlainOpen(path string) (*git.Repository, error) {
	if mock.PlainOpenFunc == nil {
		panic("GogitMock.PlainOpenFunc: method is nil but Gogit.PlainOpen was just called")
	}
	callInfo := struct {
		Path string
	}{
		Path: path,
	}
	mock.lockPlainOpen.Lock()
	mock.calls.PlainOpen = append(mock.calls.PlainOpen, callInfo)
	mock.lockPlainOpen.Unlock()
	return mock.PlainOpenFunc(path)
}

// PlainOpenCalls gets all the calls that were made to PlainOpen.
// Check the length with:
//     len(mockedGogit.PlainOpenCalls())
func (mock *GogitMock) PlainOpenCalls() []struct {
	Path string
} {
	var calls []struct {
		Path string
	}
	mock.lockPlainOpen.RLock()
	calls = mock.calls.PlainOpen
	mock.lockPlainOpen.RUnlock()
	return calls
}
