// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handler_mock

import (
	"github.com/keptn/keptn/resource-service/models"
	"sync"
)

// IResourceManagerMock is a mock implementation of handler.IResourceManager.
//
// 	func TestSomethingThatUsesIResourceManager(t *testing.T) {
//
// 		// make and configure a mocked handler.IResourceManager
// 		mockedIResourceManager := &IResourceManagerMock{
// 			CreateResourcesFunc: func(params models.CreateResourcesParams) (*models.WriteResourceResponse, error) {
// 				panic("mock out the CreateResources method")
// 			},
// 			DeleteResourceFunc: func(params models.DeleteResourceParams) (*models.WriteResourceResponse, error) {
// 				panic("mock out the DeleteResource method")
// 			},
// 			GetResourceFunc: func(params models.GetResourceParams) (*models.GetResourceResponse, error) {
// 				panic("mock out the GetResource method")
// 			},
// 			GetResourcesFunc: func(params models.GetResourcesParams) (*models.GetResourcesResponse, error) {
// 				panic("mock out the GetResources method")
// 			},
// 			UpdateResourceFunc: func(params models.UpdateResourceParams) (*models.WriteResourceResponse, error) {
// 				panic("mock out the UpdateResource method")
// 			},
// 			UpdateResourcesFunc: func(params models.UpdateResourcesParams) (*models.WriteResourceResponse, error) {
// 				panic("mock out the UpdateResources method")
// 			},
// 		}
//
// 		// use mockedIResourceManager in code that requires handler.IResourceManager
// 		// and then make assertions.
//
// 	}
type IResourceManagerMock struct {
	// CreateResourcesFunc mocks the CreateResources method.
	CreateResourcesFunc func(params models.CreateResourcesParams) (*models.WriteResourceResponse, error)

	// DeleteResourceFunc mocks the DeleteResource method.
	DeleteResourceFunc func(params models.DeleteResourceParams) (*models.WriteResourceResponse, error)

	// GetResourceFunc mocks the GetResource method.
	GetResourceFunc func(params models.GetResourceParams) (*models.GetResourceResponse, error)

	// GetResourcesFunc mocks the GetResources method.
	GetResourcesFunc func(params models.GetResourcesParams) (*models.GetResourcesResponse, error)

	// UpdateResourceFunc mocks the UpdateResource method.
	UpdateResourceFunc func(params models.UpdateResourceParams) (*models.WriteResourceResponse, error)

	// UpdateResourcesFunc mocks the UpdateResources method.
	UpdateResourcesFunc func(params models.UpdateResourcesParams) (*models.WriteResourceResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateResources holds details about calls to the CreateResources method.
		CreateResources []struct {
			// Params is the params argument value.
			Params models.CreateResourcesParams
		}
		// DeleteResource holds details about calls to the DeleteResource method.
		DeleteResource []struct {
			// Params is the params argument value.
			Params models.DeleteResourceParams
		}
		// GetResource holds details about calls to the GetResource method.
		GetResource []struct {
			// Params is the params argument value.
			Params models.GetResourceParams
		}
		// GetResources holds details about calls to the GetResources method.
		GetResources []struct {
			// Params is the params argument value.
			Params models.GetResourcesParams
		}
		// UpdateResource holds details about calls to the UpdateResource method.
		UpdateResource []struct {
			// Params is the params argument value.
			Params models.UpdateResourceParams
		}
		// UpdateResources holds details about calls to the UpdateResources method.
		UpdateResources []struct {
			// Params is the params argument value.
			Params models.UpdateResourcesParams
		}
	}
	lockCreateResources sync.RWMutex
	lockDeleteResource  sync.RWMutex
	lockGetResource     sync.RWMutex
	lockGetResources    sync.RWMutex
	lockUpdateResource  sync.RWMutex
	lockUpdateResources sync.RWMutex
}

// CreateResources calls CreateResourcesFunc.
func (mock *IResourceManagerMock) CreateResources(params models.CreateResourcesParams) (*models.WriteResourceResponse, error) {
	if mock.CreateResourcesFunc == nil {
		panic("IResourceManagerMock.CreateResourcesFunc: method is nil but IResourceManager.CreateResources was just called")
	}
	callInfo := struct {
		Params models.CreateResourcesParams
	}{
		Params: params,
	}
	mock.lockCreateResources.Lock()
	mock.calls.CreateResources = append(mock.calls.CreateResources, callInfo)
	mock.lockCreateResources.Unlock()
	return mock.CreateResourcesFunc(params)
}

// CreateResourcesCalls gets all the calls that were made to CreateResources.
// Check the length with:
//     len(mockedIResourceManager.CreateResourcesCalls())
func (mock *IResourceManagerMock) CreateResourcesCalls() []struct {
	Params models.CreateResourcesParams
} {
	var calls []struct {
		Params models.CreateResourcesParams
	}
	mock.lockCreateResources.RLock()
	calls = mock.calls.CreateResources
	mock.lockCreateResources.RUnlock()
	return calls
}

// DeleteResource calls DeleteResourceFunc.
func (mock *IResourceManagerMock) DeleteResource(params models.DeleteResourceParams) (*models.WriteResourceResponse, error) {
	if mock.DeleteResourceFunc == nil {
		panic("IResourceManagerMock.DeleteResourceFunc: method is nil but IResourceManager.DeleteResource was just called")
	}
	callInfo := struct {
		Params models.DeleteResourceParams
	}{
		Params: params,
	}
	mock.lockDeleteResource.Lock()
	mock.calls.DeleteResource = append(mock.calls.DeleteResource, callInfo)
	mock.lockDeleteResource.Unlock()
	return mock.DeleteResourceFunc(params)
}

// DeleteResourceCalls gets all the calls that were made to DeleteResource.
// Check the length with:
//     len(mockedIResourceManager.DeleteResourceCalls())
func (mock *IResourceManagerMock) DeleteResourceCalls() []struct {
	Params models.DeleteResourceParams
} {
	var calls []struct {
		Params models.DeleteResourceParams
	}
	mock.lockDeleteResource.RLock()
	calls = mock.calls.DeleteResource
	mock.lockDeleteResource.RUnlock()
	return calls
}

// GetResource calls GetResourceFunc.
func (mock *IResourceManagerMock) GetResource(params models.GetResourceParams) (*models.GetResourceResponse, error) {
	if mock.GetResourceFunc == nil {
		panic("IResourceManagerMock.GetResourceFunc: method is nil but IResourceManager.GetResource was just called")
	}
	callInfo := struct {
		Params models.GetResourceParams
	}{
		Params: params,
	}
	mock.lockGetResource.Lock()
	mock.calls.GetResource = append(mock.calls.GetResource, callInfo)
	mock.lockGetResource.Unlock()
	return mock.GetResourceFunc(params)
}

// GetResourceCalls gets all the calls that were made to GetResource.
// Check the length with:
//     len(mockedIResourceManager.GetResourceCalls())
func (mock *IResourceManagerMock) GetResourceCalls() []struct {
	Params models.GetResourceParams
} {
	var calls []struct {
		Params models.GetResourceParams
	}
	mock.lockGetResource.RLock()
	calls = mock.calls.GetResource
	mock.lockGetResource.RUnlock()
	return calls
}

// GetResources calls GetResourcesFunc.
func (mock *IResourceManagerMock) GetResources(params models.GetResourcesParams) (*models.GetResourcesResponse, error) {
	if mock.GetResourcesFunc == nil {
		panic("IResourceManagerMock.GetResourcesFunc: method is nil but IResourceManager.GetResources was just called")
	}
	callInfo := struct {
		Params models.GetResourcesParams
	}{
		Params: params,
	}
	mock.lockGetResources.Lock()
	mock.calls.GetResources = append(mock.calls.GetResources, callInfo)
	mock.lockGetResources.Unlock()
	return mock.GetResourcesFunc(params)
}

// GetResourcesCalls gets all the calls that were made to GetResources.
// Check the length with:
//     len(mockedIResourceManager.GetResourcesCalls())
func (mock *IResourceManagerMock) GetResourcesCalls() []struct {
	Params models.GetResourcesParams
} {
	var calls []struct {
		Params models.GetResourcesParams
	}
	mock.lockGetResources.RLock()
	calls = mock.calls.GetResources
	mock.lockGetResources.RUnlock()
	return calls
}

// UpdateResource calls UpdateResourceFunc.
func (mock *IResourceManagerMock) UpdateResource(params models.UpdateResourceParams) (*models.WriteResourceResponse, error) {
	if mock.UpdateResourceFunc == nil {
		panic("IResourceManagerMock.UpdateResourceFunc: method is nil but IResourceManager.UpdateResource was just called")
	}
	callInfo := struct {
		Params models.UpdateResourceParams
	}{
		Params: params,
	}
	mock.lockUpdateResource.Lock()
	mock.calls.UpdateResource = append(mock.calls.UpdateResource, callInfo)
	mock.lockUpdateResource.Unlock()
	return mock.UpdateResourceFunc(params)
}

// UpdateResourceCalls gets all the calls that were made to UpdateResource.
// Check the length with:
//     len(mockedIResourceManager.UpdateResourceCalls())
func (mock *IResourceManagerMock) UpdateResourceCalls() []struct {
	Params models.UpdateResourceParams
} {
	var calls []struct {
		Params models.UpdateResourceParams
	}
	mock.lockUpdateResource.RLock()
	calls = mock.calls.UpdateResource
	mock.lockUpdateResource.RUnlock()
	return calls
}

// UpdateResources calls UpdateResourcesFunc.
func (mock *IResourceManagerMock) UpdateResources(params models.UpdateResourcesParams) (*models.WriteResourceResponse, error) {
	if mock.UpdateResourcesFunc == nil {
		panic("IResourceManagerMock.UpdateResourcesFunc: method is nil but IResourceManager.UpdateResources was just called")
	}
	callInfo := struct {
		Params models.UpdateResourcesParams
	}{
		Params: params,
	}
	mock.lockUpdateResources.Lock()
	mock.calls.UpdateResources = append(mock.calls.UpdateResources, callInfo)
	mock.lockUpdateResources.Unlock()
	return mock.UpdateResourcesFunc(params)
}

// UpdateResourcesCalls gets all the calls that were made to UpdateResources.
// Check the length with:
//     len(mockedIResourceManager.UpdateResourcesCalls())
func (mock *IResourceManagerMock) UpdateResourcesCalls() []struct {
	Params models.UpdateResourcesParams
} {
	var calls []struct {
		Params models.UpdateResourcesParams
	}
	mock.lockUpdateResources.RLock()
	calls = mock.calls.UpdateResources
	mock.lockUpdateResources.RUnlock()
	return calls
}
