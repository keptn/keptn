// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handler_mock

import (
	"github.com/keptn/keptn/resource-service/models"
	"sync"
)

// IProjectManagerMock is a mock implementation of handler.IProjectManager.
//
// 	func TestSomethingThatUsesIProjectManager(t *testing.T) {
//
// 		// make and configure a mocked handler.IProjectManager
// 		mockedIProjectManager := &IProjectManagerMock{
// 			CreateProjectFunc: func(project models.CreateProjectParams) error {
// 				panic("mock out the CreateProject method")
// 			},
// 			DeleteProjectFunc: func(projectName string) error {
// 				panic("mock out the DeleteProject method")
// 			},
// 			UpdateProjectFunc: func(project models.UpdateProjectParams) error {
// 				panic("mock out the UpdateProject method")
// 			},
// 		}
//
// 		// use mockedIProjectManager in code that requires handler.IProjectManager
// 		// and then make assertions.
//
// 	}
type IProjectManagerMock struct {
	// CreateProjectFunc mocks the CreateProject method.
	CreateProjectFunc func(project models.CreateProjectParams) error

	// DeleteProjectFunc mocks the DeleteProject method.
	DeleteProjectFunc func(projectName string) error

	// UpdateProjectFunc mocks the UpdateProject method.
	UpdateProjectFunc func(project models.UpdateProjectParams) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateProject holds details about calls to the CreateProject method.
		CreateProject []struct {
			// Project is the project argument value.
			Project models.CreateProjectParams
		}
		// DeleteProject holds details about calls to the DeleteProject method.
		DeleteProject []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
		}
		// UpdateProject holds details about calls to the UpdateProject method.
		UpdateProject []struct {
			// Project is the project argument value.
			Project models.UpdateProjectParams
		}
	}
	lockCreateProject sync.RWMutex
	lockDeleteProject sync.RWMutex
	lockUpdateProject sync.RWMutex
}

// CreateProject calls CreateProjectFunc.
func (mock *IProjectManagerMock) CreateProject(project models.CreateProjectParams) error {
	if mock.CreateProjectFunc == nil {
		panic("IProjectManagerMock.CreateProjectFunc: method is nil but IProjectManager.CreateProject was just called")
	}
	callInfo := struct {
		Project models.CreateProjectParams
	}{
		Project: project,
	}
	mock.lockCreateProject.Lock()
	mock.calls.CreateProject = append(mock.calls.CreateProject, callInfo)
	mock.lockCreateProject.Unlock()
	return mock.CreateProjectFunc(project)
}

// CreateProjectCalls gets all the calls that were made to CreateProject.
// Check the length with:
//     len(mockedIProjectManager.CreateProjectCalls())
func (mock *IProjectManagerMock) CreateProjectCalls() []struct {
	Project models.CreateProjectParams
} {
	var calls []struct {
		Project models.CreateProjectParams
	}
	mock.lockCreateProject.RLock()
	calls = mock.calls.CreateProject
	mock.lockCreateProject.RUnlock()
	return calls
}

// DeleteProject calls DeleteProjectFunc.
func (mock *IProjectManagerMock) DeleteProject(projectName string) error {
	if mock.DeleteProjectFunc == nil {
		panic("IProjectManagerMock.DeleteProjectFunc: method is nil but IProjectManager.DeleteProject was just called")
	}
	callInfo := struct {
		ProjectName string
	}{
		ProjectName: projectName,
	}
	mock.lockDeleteProject.Lock()
	mock.calls.DeleteProject = append(mock.calls.DeleteProject, callInfo)
	mock.lockDeleteProject.Unlock()
	return mock.DeleteProjectFunc(projectName)
}

// DeleteProjectCalls gets all the calls that were made to DeleteProject.
// Check the length with:
//     len(mockedIProjectManager.DeleteProjectCalls())
func (mock *IProjectManagerMock) DeleteProjectCalls() []struct {
	ProjectName string
} {
	var calls []struct {
		ProjectName string
	}
	mock.lockDeleteProject.RLock()
	calls = mock.calls.DeleteProject
	mock.lockDeleteProject.RUnlock()
	return calls
}

// UpdateProject calls UpdateProjectFunc.
func (mock *IProjectManagerMock) UpdateProject(project models.UpdateProjectParams) error {
	if mock.UpdateProjectFunc == nil {
		panic("IProjectManagerMock.UpdateProjectFunc: method is nil but IProjectManager.UpdateProject was just called")
	}
	callInfo := struct {
		Project models.UpdateProjectParams
	}{
		Project: project,
	}
	mock.lockUpdateProject.Lock()
	mock.calls.UpdateProject = append(mock.calls.UpdateProject, callInfo)
	mock.lockUpdateProject.Unlock()
	return mock.UpdateProjectFunc(project)
}

// UpdateProjectCalls gets all the calls that were made to UpdateProject.
// Check the length with:
//     len(mockedIProjectManager.UpdateProjectCalls())
func (mock *IProjectManagerMock) UpdateProjectCalls() []struct {
	Project models.UpdateProjectParams
} {
	var calls []struct {
		Project models.UpdateProjectParams
	}
	mock.lockUpdateProject.RLock()
	calls = mock.calls.UpdateProject
	mock.lockUpdateProject.RUnlock()
	return calls
}
