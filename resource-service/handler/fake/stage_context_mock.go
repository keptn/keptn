// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handler_mock

import (
	"github.com/keptn/keptn/resource-service/common_models"
	"github.com/keptn/keptn/resource-service/models"
	"sync"
)

// IStageContextMock is a mock implementation of handler.IStageContext.
//
// 	func TestSomethingThatUsesIStageContext(t *testing.T) {
//
// 		// make and configure a mocked handler.IStageContext
// 		mockedIStageContext := &IStageContextMock{
// 			EstablishFunc: func(project models.Project, stage *models.Stage, service *models.Service, gitContext common_models.GitContext) (string, error) {
// 				panic("mock out the Establish method")
// 			},
// 		}
//
// 		// use mockedIStageContext in code that requires handler.IStageContext
// 		// and then make assertions.
//
// 	}
type IStageContextMock struct {
	// EstablishFunc mocks the Establish method.
	EstablishFunc func(project models.Project, stage *models.Stage, service *models.Service, gitContext common_models.GitContext) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Establish holds details about calls to the Establish method.
		Establish []struct {
			// Project is the project argument value.
			Project models.Project
			// Stage is the stage argument value.
			Stage *models.Stage
			// Service is the service argument value.
			Service *models.Service
			// GitContext is the gitContext argument value.
			GitContext common_models.GitContext
		}
	}
	lockEstablish sync.RWMutex
}

// Establish calls EstablishFunc.
func (mock *IStageContextMock) Establish(project models.Project, stage *models.Stage, service *models.Service, gitContext common_models.GitContext) (string, error) {
	if mock.EstablishFunc == nil {
		panic("IStageContextMock.EstablishFunc: method is nil but IStageContext.Establish was just called")
	}
	callInfo := struct {
		Project    models.Project
		Stage      *models.Stage
		Service    *models.Service
		GitContext common_models.GitContext
	}{
		Project:    project,
		Stage:      stage,
		Service:    service,
		GitContext: gitContext,
	}
	mock.lockEstablish.Lock()
	mock.calls.Establish = append(mock.calls.Establish, callInfo)
	mock.lockEstablish.Unlock()
	return mock.EstablishFunc(project, stage, service, gitContext)
}

// EstablishCalls gets all the calls that were made to Establish.
// Check the length with:
//     len(mockedIStageContext.EstablishCalls())
func (mock *IStageContextMock) EstablishCalls() []struct {
	Project    models.Project
	Stage      *models.Stage
	Service    *models.Service
	GitContext common_models.GitContext
} {
	var calls []struct {
		Project    models.Project
		Stage      *models.Stage
		Service    *models.Service
		GitContext common_models.GitContext
	}
	mock.lockEstablish.RLock()
	calls = mock.calls.Establish
	mock.lockEstablish.RUnlock()
	return calls
}
