sudo: true
language: go
go:
  - 1.12.x
cache:
  directories:
    - "$HOME/google-cloud-sdk/"
env:
  global:
    - GOOGLE_APPLICATION_CREDENTIALS=~/gcloud-service-key.json
    - GO111MODULE=on

before_install:   
# Pull Requests to the master branch are only allowed if they come from the develop branch of our repo
- |
  if [ $TRAVIS_PULL_REQUEST = "true" ] && [ $TRAVIS_BRANCH = "master" ] && [ $TRAVIS_PULL_REQUEST_SLUG = $TRAVIS_REPO_SLUG ]; then
      echo "Pull Requests to the 'master' branch are not allowed. If you are a contributor, please set your Pull Request to the 'develop' branch."
      exit -1
  fi
# determine OS type (either osx for linux) - will be used for downloading dependencies
- |
  OS_TYPE="linux"
  if [ "$TRAVIS_OS_NAME" = "osx" ]; then
    OS_TYPE="darwin"
  fi
- |
  if [ ! -d "$HOME/google-cloud-sdk/bin" ]; then 
    rm -rf $HOME/google-cloud-sdk;
    export CLOUDSDK_CORE_DISABLE_PROMPTS=1;
    curl https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-270.0.0-${OS_TYPE}-x86_64.tar.gz > gcloud.tar.gz
    gunzip -c gcloud.tar.gz | tar xopf - 
    ./google-cloud-sdk/install.sh
    source ./google-cloud-sdk/completion.bash.inc
    source ./google-cloud-sdk/path.bash.inc
  fi
- gcloud --quiet components update
- gcloud --quiet components update kubectl
- echo ${GCLOUD_SERVICE_KEY} | base64 --decode > ~/gcloud-service-key.json
- gcloud auth activate-service-account --key-file ~/gcloud-service-key.json


# Build variables
- export TZ=Europe/Vienna
- VERSION="$(cat ./version | tr -d '[:space:]')"
- DATE="$(date +'%Y%m%d.%H%M')"
- GIT_SHA="$(git rev-parse --short HEAD)"
- REGISTRY_USER=jbraeuer

# store all changed files from this commit in files.txt (careful - travis commit range might fail)
- git diff --name-only $TRAVIS_COMMIT_RANGE > files.txt || echo ""
# for non pull requests, use another type of commit range in addition
- |
  if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then
    git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
    git fetch origin develop
    git diff --name-only origin/develop...$TRAVIS_BRANCH >> files.txt
  fi
- cat files.txt
- CHANGED_FILES=$(tr '\n' , < files.txt)

# get current git branch name
- GIT_BRANCH_NAME=$(git branch | grep \* | cut -d ' ' -f2)
- BRANCH=$(if [ "$TRAVIS_PULL_REQUEST" == "false" ]; then echo $TRAVIS_BRANCH; else echo $TRAVIS_PULL_REQUEST_BRANCH; fi)
- echo "TRAVIS_BRANCH=$TRAVIS_BRANCH, BRANCH=$BRANCH"

# configure folders and image names
- CLI_FOLDER="cli/"
- API_IMAGE="keptn/api"
- API_FOLDER="api/"
- OS_ROUTE_SVC_IMAGE="keptn/openshift-route-service"
- OS_ROUTE_SVC_FOLDER="platform-support/openshift-route-service/"
- BRIDGE_IMAGE="keptn/bridge"
- BRIDGE_FOLDER="bridge/"
- JMETER_SVC_IMAGE="keptn/jmeter-service"
- JMETER_SVC_FOLDER="jmeter-service/"
- HELM_SVC_IMAGE="keptn/helm-service"
- HELM_SVC_FOLDER="helm-service/"
- GATEKEEPER_SVC_IMAGE="keptn/gatekeeper-service"
- GATEKEEPER_SVC_FOLDER="gatekeeper-service/"
- DISTRIBUTOR_IMAGE="keptn/distributor"
- DISTRIBUTOR_FOLDER="distributor/"
- EVENTBROKER_IMAGE="keptn/eventbroker-go"
- EVENTBROKER_FOLDER="eventbroker/"
- SHIPYARD_SVC_IMAGE="keptn/shipyard-service"
- SHIPYARD_SVC_FOLDER="shipyard-service/"
- CONFIGURATION_SVC_IMAGE="keptn/configuration-service"
- CONFIGURATION_SVC_FOLDER="configuration-service/"
- REMEDIATION_SVC_IMAGE="keptn/remediation-service"
- REMEDIATION_SVC_FOLDER="remediation-service/"
- WAIT_SVC_IMAGE="keptn/wait-service"
- WAIT_SVC_FOLDER="wait-service/"
- LIGHTHOUSE_SVC_IMAGE="keptn/lighthouse-service"
- LIGHTHOUSE_SVC_FOLDER="lighthouse-service/"
- MONGODB_DS_IMAGE="keptn/mongodb-datastore"
- MONGODB_DS_FOLDER="mongodb-datastore/"
- INSTALLER_IMAGE="keptn/installer"
- INSTALLER_FOLDER="installer/"
### ATTENTION: please make sure installer is always the last in this list

jobs:
  include:
  # nightly image builds - build all images
  - stage: nightly
    if: branch = develop and type = cron
    os: linux
    services:
      - docker
    script:
    - echo "$REGISTRY_PASSWORD" | docker login --username $REGISTRY_USER --password-stdin
    - ./writeManifest.sh
    - cat MANIFEST
    - source ./travis-scripts/build_develop.sh "${API_IMAGE}" "${API_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
    - source ./travis-scripts/build_develop.sh "${OS_ROUTE_SVC_IMAGE}" "${OS_ROUTE_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ../..
    - source ./travis-scripts/build_develop.sh "${BRIDGE_IMAGE}" "${BRIDGE_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
    - source ./travis-scripts/build_develop.sh "${JMETER_SVC_IMAGE}" "${JMETER_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
    - source ./travis-scripts/build_develop.sh "${HELM_SVC_IMAGE}" "${HELM_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
    - source ./travis-scripts/build_develop.sh "${GATEKEEPER_SVC_IMAGE}" "${GATEKEEPER_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
    - source ./travis-scripts/build_develop.sh "${DISTRIBUTOR_IMAGE}" "${DISTRIBUTOR_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
    - source ./travis-scripts/build_develop.sh "${EVENTBROKER_IMAGE}" "${EVENTBROKER_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
    - source ./travis-scripts/build_develop.sh "${SHIPYARD_SVC_IMAGE}" "${SHIPYARD_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
    - source ./travis-scripts/build_develop.sh "${CONFIGURATION_SVC_IMAGE}" "${CONFIGURATION_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
    - source ./travis-scripts/build_develop.sh "${REMEDIATION_SVC_IMAGE}" "${REMEDIATION_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
    - source ./travis-scripts/build_develop.sh "${WAIT_SVC_IMAGE}" "${WAIT_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
    - source ./travis-scripts/build_develop.sh "${LIGHTHOUSE_SVC_IMAGE}" "${LIGHTHOUSE_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
    - source ./travis-scripts/build_develop.sh "${MONGODB_DS_IMAGE}" "${MONGODB_DS_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
    - source ./travis-scripts/build_develop.sh "${INSTALLER_IMAGE}" "${INSTALLER_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
      ### ATTENTION: please make sure installer is always the last in this list to be built
    after_script:
      - echo "The following images have been built and pushed to dockerhub:"
      - docker images | grep keptn


  - stage: cron
    if: branch = develop AND type = cron
    os: linux
    before_script:
    # auth gcloud
    - echo ${GCLOUD_SERVICE_KEY} | base64 --decode > ~/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
    # create gke cluster on gcloud
    - test/utils/gke_create_cluster.sh
    script:
    # test installation on gcloud
    - test/test_install_gke.sh || travis_terminate 1
    # test onboarding and new artifcat for sockshop
    - export PROJECT=sockshop
    - test/test_onboard_service.sh || travis_terminate 1
    - test/test_new_artifact.sh || travis_terminate 1
    - test/test_delete_project.sh || travis_terminate 1
    after_success:
    # delete google kubernetes cluster only on success (in case of an error we want to be able to dig into the cluster)
    - echo "Tests were successful, cleaning up the cluster now..."
    - test/utils/gke_delete_cluster.sh
    after_failure:
    # print some debug info
    - echo "Keptn Installation Log:"
    - cat ~/.keptn/keptn-installer.log
    - cat ~/.keptn/keptn-installer-err.log

  # all commits (including external pull requests) should run basic tests for the CLI (if anything has changed)
  - stage: CLI tests
    os: osx # ToDo: cli tests fail for os: linux 
    script:
    - | 
      if [[ $CHANGED_FILES == *"${CLI_FOLDER}"*  ]]; then
        echo "Testing keptn CLI on osx"
        cd ./cli
        go test ./...
      fi

  - stage: feature/bug/hotfix/patch
    if: branch =~ ^feature.*$ OR branch =~ ^bug.*$ OR branch =~ ^hotfix.*$ OR branch =~ ^patch.*$
    os: osx
    script:
    - TYPE="$(echo $TRAVIS_BRANCH | cut -d'/' -f1)"
    - NUMBER="$(echo $TRAVIS_BRANCH | cut -d'/' -f2)"
    - | 
      if [[ $CHANGED_FILES == *"${CLI_FOLDER}"*  ]]; then
        echo "Build keptn cli"
        cd ./cli
        go test ./...
        TAG="${TYPE}-${NUMBER}-${DATE}"
        source ../travis-scripts/build_cli.sh "${TAG}"
        cd ..
      fi
  - if: branch =~ ^feature.*$ OR branch =~ ^bug.*$ OR branch =~ ^hotfix.*$ OR branch =~ ^patch.*$
    os: linux
    services:
      - docker
    script:
    - echo "$REGISTRY_PASSWORD" | docker login --username $REGISTRY_USER --password-stdin
    - ./writeManifest.sh
    - TYPE="$(echo $TRAVIS_BRANCH | cut -d'/' -f1)"
    - NUMBER="$(echo $TRAVIS_BRANCH | cut -d'/' -f2)"
    - | 
      if [[ $CHANGED_FILES == *"${API_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${API_IMAGE}" "${API_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
    - | 
      if [[ $CHANGED_FILES == *"${OS_ROUTE_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${OS_ROUTE_SVC_IMAGE}" "${OS_ROUTE_SVC_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ../..
      fi
    - | 
      if [[ $CHANGED_FILES == *"${BRIDGE_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${BRIDGE_IMAGE}" "${BRIDGE_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
    - | 
      if [[ $CHANGED_FILES == *"${JMETER_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${JMETER_SVC_IMAGE}" "${JMETER_SVC_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
    - | 
      if [[ $CHANGED_FILES == *"${HELM_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${HELM_SVC_IMAGE}" "${HELM_SVC_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
    - | 
      if [[ $CHANGED_FILES == *"${GATEKEEPER_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${GATEKEEPER_SVC_IMAGE}" "${GATEKEEPER_SVC_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
    - | 
      if [[ $CHANGED_FILES == *"${DISTRIBUTOR_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${DISTRIBUTOR_IMAGE}" "${DISTRIBUTOR_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
    - | 
      if [[ $CHANGED_FILES == *"${EVENTBROKER_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${EVENTBROKER_IMAGE}" "${EVENTBROKER_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
    - | 
      if [[ $CHANGED_FILES == *"${SHIPYARD_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${SHIPYARD_SVC_IMAGE}" "${SHIPYARD_SVC_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
    - | 
      if [[ $CHANGED_FILES == *"${CONFIGURATION_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${CONFIGURATION_SVC_IMAGE}" "${CONFIGURATION_SVC_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
    - | 
      if [[ $CHANGED_FILES == *"${REMEDIATION_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${REMEDIATION_SVC_IMAGE}" "${REMEDIATION_SVC_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
    - | 
      if [[ $CHANGED_FILES == *"${WAIT_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${WAIT_SVC_IMAGE}" "${WAIT_SVC_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
    - | 
      if [[ $CHANGED_FILES == *"${LIGHTHOUSE_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${LIGHTHOUSE_SVC_IMAGE}" "${LIGHTHOUSE_SVC_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
    - | 
      if [[ $CHANGED_FILES == *"${MONGODB_DS_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${MONGODB_DS_IMAGE}" "${MONGODB_DS_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
    - | 
      if [[ $CHANGED_FILES == *"${INSTALLER_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${INSTALLER_IMAGE}" "${INSTALLER_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
      ### ATTENTION: please make sure installer is always the last in this list to be built
    after_script:
      - echo "The following images have been built and pushed to dockerhub:"
      - docker images | grep keptn

  - stage: develop
    if: branch = develop AND type = push
    os: osx
    script:
    - | 
      if [[ $CHANGED_FILES == *"${CLI_FOLDER}"*  ]]; then
        echo "Build keptn cli"
        cd ./cli
        go test ./...
        TAG="latest"
        VERSION="${DATE}-latest"
        source ../travis-scripts/build_cli.sh "${VERSION}"
        cd ..
      fi
  - if: branch = develop AND type = push
    os: linux
    services:
      - docker
    script:
    - echo "$REGISTRY_PASSWORD" | docker login --username $REGISTRY_USER --password-stdin
    - ./writeManifest.sh
    - | 
      if [[ $CHANGED_FILES == *"${API_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${API_IMAGE}" "${API_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
    - | 
      if [[ $CHANGED_FILES == *"${OS_ROUTE_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${OS_ROUTE_SVC_IMAGE}" "${OS_ROUTE_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ../..
      fi
    - |
      if [[ $CHANGED_FILES == *"${BRIDGE_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${BRIDGE_IMAGE}" "${BRIDGE_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
    - | 
      if [[ $CHANGED_FILES == *"${JMETER_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${JMETER_SVC_IMAGE}" "${JMETER_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
    - | 
      if [[ $CHANGED_FILES == *"${HELM_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${HELM_SVC_IMAGE}" "${HELM_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
    - | 
      if [[ $CHANGED_FILES == *"${GATEKEEPER_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${GATEKEEPER_SVC_IMAGE}" "${GATEKEEPER_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
    - | 
      if [[ $CHANGED_FILES == *"${DISTRIBUTOR_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${DISTRIBUTOR_IMAGE}" "${DISTRIBUTOR_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
    - | 
      if [[ $CHANGED_FILES == *"${EVENTBROKER_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${EVENTBROKER_IMAGE}" "${EVENTBROKER_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
    - | 
      if [[ $CHANGED_FILES == *"${SHIPYARD_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${SHIPYARD_SVC_IMAGE}" "${SHIPYARD_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
    - | 
      if [[ $CHANGED_FILES == *"${CONFIGURATION_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${CONFIGURATION_SVC_IMAGE}" "${CONFIGURATION_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
    - | 
      if [[ $CHANGED_FILES == *"${REMEDIATION_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${REMEDIATION_SVC_IMAGE}" "${REMEDIATION_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${WAIT_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${WAIT_SVC_IMAGE}" "${WAIT_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${LIGHTHOUSE_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${LIGHTHOUSE_SVC_IMAGE}" "${LIGHTHOUSE_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
    - | 
      if [[ $CHANGED_FILES == *"${MONGODB_DS_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${MONGODB_DS_IMAGE}" "${MONGODB_DS_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
    - | 
      if [[ $CHANGED_FILES == *"${INSTALLER_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${INSTALLER_IMAGE}" "${INSTALLER_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
      ### ATTENTION: please make sure installer is always the last in this list to be built
    after_script:
      - echo "The following images have been built and pushed to dockerhub:"
      - docker images | grep keptn

  - stage: release (cli)
    if: branch =~ ^release.*$ AND NOT type = pull_request
    os: osx
    script:
      # overwrite version for release branches based on the branch name
      - export VERSION=${BRANCH#"release-"}
      - echo "Build keptn cli"
      - cd ./cli
      - go test ./...
      - TAG="${VERSION}"
      - source ../travis-scripts/build_cli.sh "${VERSION}"
      - cd ..

  - stage: release (api, os-route-service, bridge, jmeter-service)
    if: branch =~ ^release.*$ AND NOT type = pull_request
    os: linux
    services:
      - docker
    script:
    - echo "$REGISTRY_PASSWORD" | docker login --username $REGISTRY_USER --password-stdin
    # overwrite version for release branches based on the branch name
    - export VERSION=${BRANCH#"release-"}
    - ./writeManifest.sh
    - source ./travis-scripts/build_release.sh "${API_IMAGE}" "${API_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
    - cd ..
    - source ./travis-scripts/build_release.sh "${OS_ROUTE_SVC_IMAGE}" "${OS_ROUTE_SVC_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
    - cd ../..
    - source ./travis-scripts/build_release.sh "${BRIDGE_IMAGE}" "${BRIDGE_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
    - cd ..
    - source ./travis-scripts/build_release.sh "${JMETER_SVC_IMAGE}" "${JMETER_SVC_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
    - cd ..
    after_script:
      - echo "The following images have been built and pushed to dockerhub:"
      - docker images | grep keptn

  - stage: release (helm-service, gatekeeper-service, distributor, eventbroker)
    if: branch =~ ^release.*$ AND NOT type = pull_request
    os: linux
    services:
      - docker
    script:
      - echo "$REGISTRY_PASSWORD" | docker login --username $REGISTRY_USER --password-stdin
      # overwrite version for release branches based on the branch name
      - export VERSION=${BRANCH#"release-"}
      - ./writeManifest.sh
      - source ./travis-scripts/build_release.sh "${HELM_SVC_IMAGE}" "${HELM_SVC_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
      - cd ..
      - source ./travis-scripts/build_release.sh "${GATEKEEPER_SVC_IMAGE}" "${GATEKEEPER_SVC_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
      - cd ..
      - source ./travis-scripts/build_release.sh "${DISTRIBUTOR_IMAGE}" "${DISTRIBUTOR_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
      - cd ..
      - source ./travis-scripts/build_release.sh "${EVENTBROKER_IMAGE}" "${EVENTBROKER_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
      - cd ..
    after_script:
      - echo "The following images have been built and pushed to dockerhub:"
      - docker images | grep keptn

  - stage: release (shipyard-service, configuration-service, remediation-service, wait-service)
    if: branch =~ ^release.*$ AND NOT type = pull_request
    os: linux
    services:
      - docker
    script:
      - echo "$REGISTRY_PASSWORD" | docker login --username $REGISTRY_USER --password-stdin
      # overwrite version for release branches based on the branch name
      - export VERSION=${BRANCH#"release-"}
      - ./writeManifest.sh
      - source ./travis-scripts/build_release.sh "${SHIPYARD_SVC_IMAGE}" "${SHIPYARD_SVC_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
      - cd ..
      - source ./travis-scripts/build_release.sh "${CONFIGURATION_SVC_IMAGE}" "${CONFIGURATION_SVC_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
      - cd ..
      - source ./travis-scripts/build_release.sh "${REMEDIATION_SVC_IMAGE}" "${REMEDIATION_SVC_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
      - cd ..
      - source ./travis-scripts/build_release.sh "${WAIT_SVC_IMAGE}" "${WAIT_SVC_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
      - cd ..
    after_script:
      - echo "The following images have been built and pushed to dockerhub:"
      - docker images | grep keptn

  - stage: release (lighthouse-service, mongodb-datastore, installer)
    if: branch =~ ^release.*$ AND NOT type = pull_request
    os: linux
    services:
      - docker
    script:
      - echo "$REGISTRY_PASSWORD" | docker login --username $REGISTRY_USER --password-stdin
      # overwrite version for release branches based on the branch name
      - export VERSION=${BRANCH#"release-"}
      - ./writeManifest.sh
      - source ./travis-scripts/build_release.sh "${LIGHTHOUSE_SVC_IMAGE}" "${LIGHTHOUSE_SVC_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
      - cd ..
      - source ./travis-scripts/build_release.sh "${MONGODB_DS_IMAGE}" "${MONGODB_DS_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
      - cd ..
      - source ./travis-scripts/build_release.sh "${INSTALLER_IMAGE}" "${INSTALLER_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
      - cd ..
    after_script:
      - echo "The following images have been built and pushed to dockerhub:"
      - docker images | grep keptn
