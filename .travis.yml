sudo: true
language: go
go:
  - 1.13.x
cache:
  directories:
    - "$HOME/google-cloud-sdk/"
env:
  global:
    - GO111MODULE=on
    - GOPROXY=https://proxy.golang.org

# configure notifications for failed builds
notifications:
  slack:
    rooms:
      # generate token using travis encrypt "..." --add notifications.slack -r keptn/keptn --org
      - secure: NjL/yh3BkTig19hV7nH0q+XxNOxCGTuhdn69WV8tsR0TXp8gqQxD8pnyPX7/nNdkc9PPAUCLGdFlU+vsa3SFt1cdZCgi44lvqHPHBZCa1Sh2+CxqCPRe9NQzU8JJBwDO9OEezbL7Pbfoi7m56MVU6JfkX5RPwN7RLcyCUane/STu3NDBeJLvn0qhjXMFlfKibdwdWom+TZxMiWaZ3oX1omtE88fiHaEGDjTobO3GNR6er9Rd0peAf7LXyHPrJDC0Ss8bz6OVNPQQFtFVwHG/0zVGwZPDbDUw2U+C8DsBVofhPRKhK2g2o0VAESKgrREdDPyVtAsbOnxGnudyPv94whhNjv3aVLeNilNiujXBgeC5R8aWNc2FthDUdB1clKDRFpwiXi0F1J+3bYN498p7QI+Yrr9XSJA62ZCeUjm3Sg2zFs7VtILgCTSbPKzAL4XjSnzefAS8MnG137TnYbwyi9Z/5+XgmLwSguLRMnMlktOH4JxUvD4ImVO7OI/QYYLtUjqqSyjywEa4v+MsyuuqaiT2m4GFpIRKxB4C3c/kONn2kUAd9LM1eIcHonPNmvH36k41nTf+XLOOICy2i1+m1aB18q5yj8qeaQZenpf2WheflM9zDgZc3cku6ZnyZCMdlhLnKfMiCgf8sYvL8qnq1XY2yikeZt4SuMCKLl5wdlI=
    if: (branch = master or branch =~ ^release.*$) AND (type = cron OR type = push)
    on_success: never
    on_failure: always

before_install:
# determine OS type (either osx for linux) - will be used for downloading dependencies
- |
  OS_TYPE="linux"
  if [ "$TRAVIS_OS_NAME" = "osx" ]; then
    OS_TYPE="darwin"
  fi
  export OS_TYPE

# build variables
- export TZ=Europe/Vienna
- VERSION="unknownversion"
- DATE="$(date +'%Y%m%d.%H%M')"
- GIT_SHA="$(git rev-parse --short HEAD)"
- KUBE_CONSTRAINTS=">= 1.14, <= 1.19" # don't forget to udpate the defaults in cli/main.go

# store all changed files from this commit in files.txt (note: Travis commit range might fail)
- git diff --name-only $TRAVIS_COMMIT_RANGE > files.txt || echo ""
# for non pull requests, use another type of commit range in addition
- |
  if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then
    git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
    git fetch origin master
    git diff --name-only origin/master...$TRAVIS_BRANCH >> files.txt
  fi
- cat files.txt
- CHANGED_FILES=$(tr '\n' , < files.txt)

# get current Git branch name
- GIT_BRANCH_NAME=$(git branch | grep \* | cut -d ' ' -f2)
- BRANCH=$(if [ "$TRAVIS_PULL_REQUEST" == "false" ]; then echo $TRAVIS_BRANCH; else echo $TRAVIS_PULL_REQUEST_BRANCH; fi)
- echo "TRAVIS_BRANCH=$TRAVIS_BRANCH, BRANCH=$BRANCH"

# configure folders and image names
- CLI_FOLDER="cli/"
- API_IMAGE="keptn/api"
- API_FOLDER="api/"
- OS_ROUTE_SVC_IMAGE="keptn/openshift-route-service"
- OS_ROUTE_SVC_FOLDER="platform-support/openshift-route-service/"
- BRIDGE_IMAGE="keptn/bridge2"
- BRIDGE_FOLDER="bridge/"
- JMETER_SVC_IMAGE="keptn/jmeter-service"
- JMETER_SVC_FOLDER="jmeter-service/"
- HELM_SVC_IMAGE="keptn/helm-service"
- HELM_SVC_FOLDER="helm-service/"
- GATEKEEPER_SVC_IMAGE="keptn/gatekeeper-service"
- GATEKEEPER_SVC_FOLDER="gatekeeper-service/"
- DISTRIBUTOR_IMAGE="keptn/distributor"
- DISTRIBUTOR_FOLDER="distributor/"
- EVENTBROKER_IMAGE="keptn/eventbroker-go"
- EVENTBROKER_FOLDER="eventbroker/"
- SHIPYARD_CONTROLLER_IMAGE="keptn/shipyard-controller"
- SHIPYARD_CONTROLLER_FOLDER="shipyard-controller/"
- CONFIGURATION_SVC_IMAGE="keptn/configuration-service"
- CONFIGURATION_SVC_FOLDER="configuration-service/"
- REMEDIATION_SVC_IMAGE="keptn/remediation-service"
- REMEDIATION_SVC_FOLDER="remediation-service/"
- LIGHTHOUSE_SVC_IMAGE="keptn/lighthouse-service"
- LIGHTHOUSE_SVC_FOLDER="lighthouse-service/"
- MONGODB_DS_IMAGE="keptn/mongodb-datastore"
- MONGODB_DS_FOLDER="mongodb-datastore/"
- INSTALLER_FOLDER="installer/"
- export KEPTN_INSTALLER_VERSION=latest
- export KEPTN_CLI_VERSION=latest
- | # set installer version and CLI version for release branches
  if [[ $BRANCH =~ ^release.* ]]; then
    export KEPTN_INSTALLER_VERSION=${BRANCH#"release-"}
    export KEPTN_CLI_VERSION=${BRANCH#"release-"}
    export KEPTN_INSTALLER_REPO=https://storage.googleapis.com/keptn-installer/keptn-${KEPTN_INSTALLER_VERSION}.tgz
  fi
# generate a lower-case slug of the branch name
- BRANCH_SLUG=$(echo ${BRANCH} | sed -r s/[^a-zA-Z0-9]+/-/g | sed -r s/^-+\|-+$//g | tr A-Z a-z)

# template for GKE tests
gke_full: &gke_full
  os: linux
  before_script:
    # set CLUSTER_NAME_NIGHTLY according to current branch and GKE_VERSION
    - export CLUSTER_NAME_NIGHTLY=${CLUSTER_NAME_NIGHTLY}-${BRANCH_SLUG:0:15}-gke${GKE_VERSION//./}
    - source ./travis-scripts/install_gcloud.sh
    # auth gcloud
    - echo ${GCLOUD_SERVICE_KEY} | base64 --decode > ~/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
    - test/utils/download_and_install_keptn_cli.sh
    # create GKE cluster on gcloud
    - test/utils/gke_create_cluster.sh
  script:
    # test installation on gcloud
    - test/test_install_gke.sh
    - test/utils/check_bridge_availability.sh
    # test onboarding and new-artifact for project sockshop
    - export PROJECT=sockshop
    - export SERVICE=carts
    - test/test_onboard_service.sh
    - test/test_new_artifact.sh
    - test/test_delete_project.sh
    - test/test_self_healing.sh
    - test/test_self_healing_scaling.sh
    - test/test_delivery_assistant.sh
    - test/test_keptn_uninstall.sh
  after_success:
    # delete Google Kubernetes cluster only on success (keep cluster in case of an error to dig into the cluster)
    - echo "Tests were successful, cleaning up the cluster now..."
    - test/utils/gke_delete_cluster.sh
  after_failure:
    # print debug info
    - echo "Keptn Installation Log:"
    - cat ~/.keptn/keptn-installer.log
    - kubectl get events --sort-by='.lastTimestamp' --all-namespaces
    - kubectl get pods --all-namespaces
    - kubectl get services --all-namespaces
    - kubectl get ingress --all-namespaces

# template for GKE tests
gke_full_part1: &gke_full_part1
  os: linux
  before_script:
    # set CLUSTER_NAME_NIGHTLY according to current branch and GKE_VERSION
    - export CLUSTER_NAME_NIGHTLY=${CLUSTER_NAME_NIGHTLY}-${BRANCH_SLUG:0:15}-gke${GKE_VERSION//./}
    - source ./travis-scripts/install_gcloud.sh
    # auth gcloud
    - echo ${GCLOUD_SERVICE_KEY} | base64 --decode > ~/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
    - test/utils/download_and_install_keptn_cli.sh
    # create GKE cluster on gcloud
    - test/utils/gke_create_cluster.sh
    - test/utils/gke_authenticate_at_cluster.sh
  script:
    # test installation on gcloud
    - test/test_install_gke.sh
    - test/utils/check_bridge_availability.sh
    # test onboarding and new-artifact for project sockshop
    - export PROJECT=sockshop
    - export SERVICE=carts
    - test/test_onboard_service.sh
    - test/test_new_artifact.sh
    - test/test_delete_project.sh
    - test/test_self_healing.sh
  after_success:
    # delete Google Kubernetes cluster only on success (keep cluster in case of an error to dig into the cluster)
    - echo "Tests were successful, cleaning up the cluster now..."
  after_failure:
    # print debug info
    - echo "Keptn Installation Log:"
    - cat ~/.keptn/keptn-installer.log
    - kubectl get events --sort-by='.lastTimestamp' --all-namespaces
    - kubectl get pods --all-namespaces
    - kubectl get services --all-namespaces
    - kubectl get ingress --all-namespaces

# template for GKE tests
gke_full_part2: &gke_full_part2
  os: linux
  before_script:
    # set CLUSTER_NAME_NIGHTLY according to current branch and GKE_VERSION
    - export CLUSTER_NAME_NIGHTLY=${CLUSTER_NAME_NIGHTLY}-${BRANCH_SLUG:0:15}-gke${GKE_VERSION//./}
    - source ./travis-scripts/install_gcloud.sh
    # auth gcloud
    - echo ${GCLOUD_SERVICE_KEY} | base64 --decode > ~/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
    - test/utils/download_and_install_keptn_cli.sh
    # authenticate at GKE cluster
    - test/utils/gke_authenticate_at_cluster.sh
    - test/utils/gke_authenticate_at_keptn.sh
  script:
    - export PROJECT=sockshop
    - test/test_self_healing_scaling.sh
    - test/test_delivery_assistant.sh
    - test/test_keptn_uninstall.sh
  after_success:
    # delete Google Kubernetes cluster only on success (keep cluster in case of an error to dig into the cluster)
    - echo "Tests were successful, cleaning up the cluster now..."
    - test/utils/gke_delete_cluster.sh
  after_failure:
    # print debug info
    - echo "Keptn Installation Log:"
    - cat ~/.keptn/keptn-installer.log
    - kubectl get events --sort-by='.lastTimestamp' --all-namespaces
    - kubectl get pods --all-namespaces
    - kubectl get services --all-namespaces
    - kubectl get ingress --all-namespaces

jobs:
  include:
  ##################################################################################
  # Jobs for the master branch
  ##################################################################################
  - stage: Build Docker Images
    if: branch = master AND (type = cron or type = push)
    os: linux
    services:
      - docker
    script:
    - export VERSION="master+${DATE}"
    - echo "$REGISTRY_PASSWORD" | docker login --username $REGISTRY_USER --password-stdin
    - ./writeManifest.sh
    - cat MANIFEST
    - source ./travis-scripts/build_develop.sh "${API_IMAGE}" "${API_FOLDER}" "${GIT_SHA}" "${DATE}"
    - source ./travis-scripts/build_develop.sh "${OS_ROUTE_SVC_IMAGE}" "${OS_ROUTE_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
    - source ./travis-scripts/build_develop.sh "${BRIDGE_IMAGE}" "${BRIDGE_FOLDER}" "${GIT_SHA}" "${DATE}"
    - source ./travis-scripts/build_develop.sh "${JMETER_SVC_IMAGE}" "${JMETER_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
    - source ./travis-scripts/build_develop.sh "${HELM_SVC_IMAGE}" "${HELM_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
    - source ./travis-scripts/build_develop.sh "${GATEKEEPER_SVC_IMAGE}" "${GATEKEEPER_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
    - source ./travis-scripts/build_develop.sh "${DISTRIBUTOR_IMAGE}" "${DISTRIBUTOR_FOLDER}" "${GIT_SHA}" "${DATE}"
    - source ./travis-scripts/build_develop.sh "${SHIPYARD_CONTROLLER_IMAGE}" "${SHIPYARD_CONTROLLER_FOLDER}" "${GIT_SHA}" "${DATE}"
    - source ./travis-scripts/build_develop.sh "${CONFIGURATION_SVC_IMAGE}" "${CONFIGURATION_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
    - source ./travis-scripts/build_develop.sh "${REMEDIATION_SVC_IMAGE}" "${REMEDIATION_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
    - source ./travis-scripts/build_develop.sh "${LIGHTHOUSE_SVC_IMAGE}" "${LIGHTHOUSE_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
    - source ./travis-scripts/build_develop.sh "${MONGODB_DS_IMAGE}" "${MONGODB_DS_FOLDER}" "${GIT_SHA}" "${DATE}"
    after_script:
      - echo "The following images have been built and pushed to dockerhub:"
      - docker images | grep keptn

  - stage: Build CLI (OSX, Windows, Linux)
    if: branch = master AND (type = cron OR type = push)
    os: linux # osx
    before_script:
      - source ./travis-scripts/install_gcloud.sh
      - echo ${GCLOUD_SERVICE_KEY} | base64 --decode > ~/gcloud-service-key.json
      - gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
    script:
      - export VERSION="master+${DATE}"
      - export TAG="latest"
      - echo "Build keptn cli"
      - cd ./cli
      - go test ./...
      - source ../travis-scripts/build_cli.sh "${VERSION}" "${KUBE_CONSTRAINTS}"
      - cd ..

  - stage: Build Installer
    if: branch = master AND (type = cron OR type = push)
    os: linux
    before_script:
      - source ./travis-scripts/install_gcloud.sh
      - echo ${GCLOUD_SERVICE_KEY} | base64 --decode > ~/gcloud-service-key.json
      - gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
      - source ./travis-scripts/install_helm.sh
    script:
      - export VERSION="latest"
      - echo "Build installer"
      - source ./travis-scripts/build_latest_installer.sh "${VERSION}"
  ##################################################################################
  # feature/bug/hotfix/patch branches build jobs
  ##################################################################################
  - stage: Partial Build for feature/bug/hotfix/patch branches (CLI + Docker Images)
    if: branch =~ ^feature.*$ OR branch =~ ^bug.*$ OR branch =~ ^hotfix.*$ OR branch =~ ^patch.*$
    os: linux
    before_script:
      - source ./travis-scripts/install_gcloud.sh
      - echo ${GCLOUD_SERVICE_KEY} | base64 --decode > ~/gcloud-service-key.json
      - gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
    script:
    - TYPE="$(echo $TRAVIS_BRANCH | cut -d'/' -f1)"
    - NUMBER="$(echo $TRAVIS_BRANCH | cut -d'/' -f2)"
    - |
      if [[ $CHANGED_FILES == *"${CLI_FOLDER}"*  ]]; then
        echo "Build keptn cli"
        cd ./cli
        go test ./...
        TAG="${TYPE}-${NUMBER}+${DATE}"
        source ../travis-scripts/build_cli.sh "${TAG}" "${KUBE_CONSTRAINTS}"
        cd ..
      fi
  - if: branch =~ ^feature.*$ OR branch =~ ^bug.*$ OR branch =~ ^hotfix.*$ OR branch =~ ^patch.*$
    os: linux
    before_script:
      - source ./travis-scripts/install_gcloud.sh
      - echo ${GCLOUD_SERVICE_KEY} | base64 --decode > ~/gcloud-service-key.json
      - gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
      - source ./travis-scripts/install_helm.sh
    script:
      - TYPE="$(echo $TRAVIS_BRANCH | cut -d'/' -f1)"
      - NUMBER="$(echo $TRAVIS_BRANCH | cut -d'/' -f2)"
      - |
        if [[ $CHANGED_FILES == *"${INSTALLER_FOLDER}"*  ]]; then
          echo "Build installer"
          TAG="${TYPE}-${NUMBER}+${DATE}"
          source ./travis-scripts/build_latest_installer.sh "${TAG}"
        fi
  - if: branch =~ ^feature.*$ OR branch =~ ^bug.*$ OR branch =~ ^hotfix.*$ OR branch =~ ^patch.*$
    os: linux
    services:
      - docker
    script:
    - set -e # fail the whole script whenever any command fails
    - echo "$REGISTRY_PASSWORD" | docker login --username $REGISTRY_USER --password-stdin
    - ./writeManifest.sh
    - TYPE="$(echo $TRAVIS_BRANCH | cut -d'/' -f1)"
    - NUMBER="$(echo $TRAVIS_BRANCH | cut -d'/' -f2)"
    - |
      if [[ $CHANGED_FILES == *"${API_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${API_IMAGE}" "${API_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
      fi
    - |
      if [[ $CHANGED_FILES == *"${OS_ROUTE_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${OS_ROUTE_SVC_IMAGE}" "${OS_ROUTE_SVC_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
      fi
    - |
      if [[ $CHANGED_FILES == *"${BRIDGE_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${BRIDGE_IMAGE}" "${BRIDGE_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
      fi
    - |
      if [[ $CHANGED_FILES == *"${JMETER_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${JMETER_SVC_IMAGE}" "${JMETER_SVC_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
      fi
    - |
      if [[ $CHANGED_FILES == *"${HELM_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${HELM_SVC_IMAGE}" "${HELM_SVC_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
      fi
    - |
      if [[ $CHANGED_FILES == *"${GATEKEEPER_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${GATEKEEPER_SVC_IMAGE}" "${GATEKEEPER_SVC_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
      fi
    - |
      if [[ $CHANGED_FILES == *"${DISTRIBUTOR_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${DISTRIBUTOR_IMAGE}" "${DISTRIBUTOR_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
      fi
    - |
      if [[ $CHANGED_FILES == *"${SHIPYARD_CONTROLLER_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${SHIPYARD_CONTROLLER_IMAGE}" "${SHIPYARD_CONTROLLER_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
      fi
    - |
      if [[ $CHANGED_FILES == *"${CONFIGURATION_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${CONFIGURATION_SVC_IMAGE}" "${CONFIGURATION_SVC_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
      fi
    - |
      if [[ $CHANGED_FILES == *"${REMEDIATION_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${REMEDIATION_SVC_IMAGE}" "${REMEDIATION_SVC_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
      fi
    - |
      if [[ $CHANGED_FILES == *"${LIGHTHOUSE_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${LIGHTHOUSE_SVC_IMAGE}" "${LIGHTHOUSE_SVC_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
      fi
    - |
      if [[ $CHANGED_FILES == *"${MONGODB_DS_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${MONGODB_DS_IMAGE}" "${MONGODB_DS_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
      fi
    - set +e # revert set -e from above
    after_script:
      - echo "The following images have been built and pushed to dockerhub:"
      - docker images | grep keptn

  ##################################################################################
  # Release specific jobs
  ##################################################################################
  - stage: Release Build CLI
    if: branch =~ ^release.*$ AND NOT type = pull_request
    os: linux # osx
    before_script:
      - source ./travis-scripts/install_gcloud.sh
      - echo ${GCLOUD_SERVICE_KEY} | base64 --decode > ~/gcloud-service-key.json
      - gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
    script:
      - export VERSION=${BRANCH#"release-"} # overwrite version for release branches based on the branch name
      - echo "Build keptn cli"
      - cd ./cli
      - go test ./...
      - TAG="${VERSION}"
      - source ../travis-scripts/build_cli.sh "${VERSION}" "${KUBE_CONSTRAINTS}"
      - cd ..

  - stage: Release Build Installer
    if: branch =~ ^release.*$ AND NOT type = pull_request
    os: linux
    before_script:
      - source ./travis-scripts/install_gcloud.sh
      - echo ${GCLOUD_SERVICE_KEY} | base64 --decode > ~/gcloud-service-key.json
      - gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
      - source ./travis-scripts/install_helm.sh
    script:
      - export VERSION=${BRANCH#"release-"} # overwrite version for release branches based on the branch name
      - echo "Build installer"
      - source ./travis-scripts/build_release_installer.sh "${VERSION}"

  - stage: Release Build Docker Images (Part 1/2)
    if: branch =~ ^release.*$ AND NOT type = pull_request
    os: linux
    services:
      - docker
    script:
    - set -e # fail the whole script whenever any command fails
    - echo "$REGISTRY_PASSWORD" | docker login --username $REGISTRY_USER --password-stdin
    - export VERSION=${BRANCH#"release-"} # overwrite version for release branches based on the branch name
    - ./writeManifest.sh
    - source ./travis-scripts/build_release.sh "${API_IMAGE}" "${API_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
    - source ./travis-scripts/build_release.sh "${OS_ROUTE_SVC_IMAGE}" "${OS_ROUTE_SVC_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
    - source ./travis-scripts/build_release.sh "${BRIDGE_IMAGE}" "${BRIDGE_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
    - source ./travis-scripts/build_release.sh "${JMETER_SVC_IMAGE}" "${JMETER_SVC_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
    - source ./travis-scripts/build_release.sh "${HELM_SVC_IMAGE}" "${HELM_SVC_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
    - source ./travis-scripts/build_release.sh "${GATEKEEPER_SVC_IMAGE}" "${GATEKEEPER_SVC_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
    - source ./travis-scripts/build_release.sh "${DISTRIBUTOR_IMAGE}" "${DISTRIBUTOR_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
    - set +e # revert set -e from above
    after_script:
      - echo "The following images have been built and pushed to dockerhub:"
      - docker images | grep keptn

  - stage: Release Build Docker Images (Part 2/2)
    if: branch =~ ^release.*$ AND NOT type = pull_request
    os: linux
    services:
      - docker
    script:
      - set -e # fail the whole script whenever any command fails
      - echo "$REGISTRY_PASSWORD" | docker login --username $REGISTRY_USER --password-stdin
      - export VERSION=${BRANCH#"release-"} # overwrite version for release branches based on the branch name
      - ./writeManifest.sh
      - source ./travis-scripts/build_release.sh "${SHIPYARD_CONTROLLER_IMAGE}" "${SHIPYARD_CONTROLLER_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
      - source ./travis-scripts/build_release.sh "${CONFIGURATION_SVC_IMAGE}" "${CONFIGURATION_SVC_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
      - source ./travis-scripts/build_release.sh "${REMEDIATION_SVC_IMAGE}" "${REMEDIATION_SVC_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
      - source ./travis-scripts/build_release.sh "${LIGHTHOUSE_SVC_IMAGE}" "${LIGHTHOUSE_SVC_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
      - source ./travis-scripts/build_release.sh "${MONGODB_DS_IMAGE}" "${MONGODB_DS_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
      - set +e # revert set -e from above
    after_script:
      - echo "The following images have been built and pushed to dockerhub:"
      - docker images | grep keptn

  - stage: Test GKE Full with Istio - Pt. 1 (--platform=gke --use-case=continuous-delivery)
    if: branch = master AND type = cron # run for cron
    env:
      - GKE_VERSION=1.15
    <<: *gke_full_part1 # use GKE template

  - stage: Test GKE Full with Istio - Pt. 1 (--platform=gke --use-case=continuous-delivery)
    if: branch = master AND type = cron # run for cron
    env:
      - GKE_VERSION=1.16
    <<: *gke_full_part1 # use GKE template

  - stage: Test GKE Full with Istio - Pt. 2 (--platform=gke --use-case=continuous-delivery)
    if: branch = master AND type = cron # run for cron
    env:
      - GKE_VERSION=1.15
    <<: *gke_full_part2 # use GKE template

  - stage: Test GKE Full with Istio - Pt. 2 (--platform=gke --use-case=continuous-delivery)
    if: branch = master AND type = cron # run for cron
    env:
      - GKE_VERSION=1.16
    <<: *gke_full_part2 # use GKE template

  - stage: Test Minishift Standalone (--platform=openshift)
    if: (branch = master or branch =~ ^release.*$) AND (type = cron) # run nightlies for any master/release-* branches
    os: linux
    before_script:
      # download and install kubectl
      - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.17.0/bin/linux/amd64/kubectl && chmod +x ./kubectl && sudo mv ./kubectl /usr/local/bin/kubectl
      - test/utils/download_and_install_keptn_cli.sh
      - test/utils/download_and_install_oc_cli.sh
      - test/utils/minishift_create_cluster.sh
    script:
      # sanity check that the K8s cluster is available
      - kubectl get nodes || travis_terminate 1
      # install keptn quality gates
      - test/test_install_minishift_quality_gates.sh
      - keptn status
      - export PROJECT=musicshop
      - export PLATFORM=openshift
      - export DYNATRACE_SLI_SERVICE_VERSION=master
      - test/test_quality_gates_standalone.sh
    after_success:
      # delete Google Kubernetes cluster only on success (keep cluster in case of an error to dig into the cluster)
      - echo "Tests were successful, cleaning up the cluster now..."
    after_failure:
      # print debug info
      - cat ~/.keptn/keptn-installer.log
      - kubectl get events --sort-by='.lastTimestamp' --all-namespaces
      - kubectl get pods --all-namespaces
      - kubectl get services --all-namespaces
      - kubectl get ingress --all-namespaces

  # Run K3s Standalone on every push on master/release branch
  - &K3sStandaloneTest
    stage: Test K3s Standalone (--platform=kubernetes, --namespace=keptn-test)
    if: (branch = master or branch =~ ^release.*$) AND (type = cron OR type = push) # run for any change on master/release-* on push as well as cron
    os: linux
    env:
      - K3S_VERSION=v1.16.10+k3s1 # see https://github.com/rancher/k3s/releases
    before_script:
      # download and install kubectl
      - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.17.0/bin/linux/amd64/kubectl && chmod +x ./kubectl && sudo mv ./kubectl /usr/local/bin/kubectl
      - test/utils/download_and_install_keptn_cli.sh
      - test/utils/k3s_create_cluster.sh
      - export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
    script:
      - kubectl get nodes || travis_terminate 1
      - export KEPTN_NAMESPACE=keptn-test
      - export KEPTN_SERVICE_TYPE=NodePort
      - test/test_install_on_kubernetes.sh
      - keptn status
      - export PROJECT=musicshop
      - export DYNATRACE_SLI_SERVICE_VERSION=master
      - test/test_quality_gates_standalone.sh
      - test/test_self_healing.sh
      - test/test_delivery_assistant.sh
    after_success:
      # delete Google Kubernetes cluster only on success (keep cluster in case of an error to dig into the cluster)
      - echo "Tests were successful, cleaning up the cluster now..."
    after_failure:
      # print debug info
      - echo "Keptn Installation Log:"
      - cat ~/.keptn/keptn-installer.log
      - kubectl get events --sort-by='.lastTimestamp' --all-namespaces
      - kubectl get pods --all-namespaces
      - kubectl get services --all-namespaces
      - kubectl get ingress --all-namespaces

  - <<: *K3sStandaloneTest
    if: (branch = master or branch =~ ^release.*$) AND (type = cron) # run only nightly
    env:
      - K3S_VERSION=v1.19.2+k3s1 # see https://github.com/rancher/k3s/releases

  - &microk8sStandaloneTest
    stage: Test MicroK8s Standalone (--platform=kubernetes)
    if: (branch = master or branch =~ ^release.*$) AND (type = cron) # run nightlies for any master/release-* branches
    os: linux
    env:
      - MICROK8S_VERSION=1.16/stable # see https://snapcraft.io/microk8s channels
    before_script:
      # download and install kubectl
      - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.17.0/bin/linux/amd64/kubectl && chmod +x ./kubectl && sudo mv ./kubectl /usr/local/bin/kubectl
      - test/utils/download_and_install_keptn_cli.sh
      - test/utils/microk8s_create_cluster.sh
      - export KUBECONFIG=~/kubeconfig
    script:
      - kubectl get nodes || travis_terminate 1 # sanity check that the K8s cluster is available
      - test/test_install_on_kubernetes.sh
      - keptn status
      - export PROJECT=musicshop
      - export DYNATRACE_SLI_SERVICE_VERSION=master
      - test/test_quality_gates_standalone.sh
      - test/test_self_healing.sh
      - test/test_delivery_assistant.sh
    after_success:
      # delete Google Kubernetes cluster only on success (keep cluster in case of an error to dig into the cluster)
      - echo "Tests were successful, cleaning up the cluster now..."
    after_failure:
      # print debug info
      - cat ~/.keptn/keptn-installer.log
      - kubectl get events --sort-by='.lastTimestamp' --all-namespaces
      - kubectl get pods --all-namespaces
      - kubectl get services --all-namespaces
      - kubectl get ingress --all-namespaces

  - <<: *microk8sStandaloneTest
    env:
      - MICROK8S_VERSION=1.19/stable # see https://snapcraft.io/microk8s channels
