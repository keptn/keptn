sudo: true
language: go
go:
  - 1.12.x
cache:
  directories:
    - "$HOME/google-cloud-sdk/"
env:
  global:
    - GO111MODULE=on
    - GOPROXY=https://proxy.golang.org

before_install:
# determine OS type (either osx for linux) - will be used for downloading dependencies
- |
  OS_TYPE="linux"
  if [ "$TRAVIS_OS_NAME" = "osx" ]; then
    OS_TYPE="darwin"
  fi
  export OS_TYPE

# Build variables
- export TZ=Europe/Vienna
- VERSION="unknownversion"
- DATE="$(date +'%Y%m%d.%H%M')"
- GIT_SHA="$(git rev-parse --short HEAD)"
- KUBE_CONSTRAINTS=">= 1.13, <= 1.15"

# store all changed files from this commit in files.txt (careful - travis commit range might fail)
- git diff --name-only $TRAVIS_COMMIT_RANGE > files.txt || echo ""
# for non pull requests, use another type of commit range in addition
- |
  if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then
    git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
    git fetch origin master
    git diff --name-only origin/master...$TRAVIS_BRANCH >> files.txt
  fi
- cat files.txt
- CHANGED_FILES=$(tr '\n' , < files.txt)

# get current git branch name
- GIT_BRANCH_NAME=$(git branch | grep \* | cut -d ' ' -f2)
- BRANCH=$(if [ "$TRAVIS_PULL_REQUEST" == "false" ]; then echo $TRAVIS_BRANCH; else echo $TRAVIS_PULL_REQUEST_BRANCH; fi)
- echo "TRAVIS_BRANCH=$TRAVIS_BRANCH, BRANCH=$BRANCH"

# configure folders and image names
- CLI_FOLDER="cli/"
- API_IMAGE="keptn/api"
- API_FOLDER="api/"
- OS_ROUTE_SVC_IMAGE="keptn/openshift-route-service"
- OS_ROUTE_SVC_FOLDER="platform-support/openshift-route-service/"
- BRIDGE_IMAGE="keptn/bridge2"
- BRIDGE_FOLDER="bridge/"
- JMETER_SVC_IMAGE="keptn/jmeter-service"
- JMETER_SVC_FOLDER="jmeter-service/"
- HELM_SVC_IMAGE="keptn/helm-service"
- HELM_SVC_FOLDER="helm-service/"
- GATEKEEPER_SVC_IMAGE="keptn/gatekeeper-service"
- GATEKEEPER_SVC_FOLDER="gatekeeper-service/"
- DISTRIBUTOR_IMAGE="keptn/distributor"
- DISTRIBUTOR_FOLDER="distributor/"
- EVENTBROKER_IMAGE="keptn/eventbroker-go"
- EVENTBROKER_FOLDER="eventbroker/"
- SHIPYARD_SVC_IMAGE="keptn/shipyard-service"
- SHIPYARD_SVC_FOLDER="shipyard-service/"
- CONFIGURATION_SVC_IMAGE="keptn/configuration-service"
- CONFIGURATION_SVC_FOLDER="configuration-service/"
- REMEDIATION_SVC_IMAGE="keptn/remediation-service"
- REMEDIATION_SVC_FOLDER="remediation-service/"
- WAIT_SVC_IMAGE="keptn/wait-service"
- WAIT_SVC_FOLDER="wait-service/"
- LIGHTHOUSE_SVC_IMAGE="keptn/lighthouse-service"
- LIGHTHOUSE_SVC_FOLDER="lighthouse-service/"
- MONGODB_DS_IMAGE="keptn/mongodb-datastore"
- MONGODB_DS_FOLDER="mongodb-datastore/"
- INSTALLER_IMAGE="keptn/installer"
- INSTALLER_FOLDER="installer/"
### ATTENTION: please make sure installer is always the last in this list

jobs:
  include:
  # nightly image builds - build all images
  - stage: nightly
    if: branch = master and type = cron
    os: linux
    services:
      - docker
    script:
    - echo "$REGISTRY_PASSWORD" | docker login --username $REGISTRY_USER --password-stdin
    - ./writeManifest.sh
    - cat MANIFEST
    - source ./travis-scripts/build_develop.sh "${API_IMAGE}" "${API_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
    - source ./travis-scripts/build_develop.sh "${OS_ROUTE_SVC_IMAGE}" "${OS_ROUTE_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ../..
    - source ./travis-scripts/build_develop.sh "${BRIDGE_IMAGE}" "${BRIDGE_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
    - source ./travis-scripts/build_develop.sh "${JMETER_SVC_IMAGE}" "${JMETER_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
    - source ./travis-scripts/build_develop.sh "${HELM_SVC_IMAGE}" "${HELM_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
    - source ./travis-scripts/build_develop.sh "${GATEKEEPER_SVC_IMAGE}" "${GATEKEEPER_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
    - source ./travis-scripts/build_develop.sh "${DISTRIBUTOR_IMAGE}" "${DISTRIBUTOR_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
    - source ./travis-scripts/build_develop.sh "${EVENTBROKER_IMAGE}" "${EVENTBROKER_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
    - source ./travis-scripts/build_develop.sh "${SHIPYARD_SVC_IMAGE}" "${SHIPYARD_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
    - source ./travis-scripts/build_develop.sh "${CONFIGURATION_SVC_IMAGE}" "${CONFIGURATION_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
    - source ./travis-scripts/build_develop.sh "${REMEDIATION_SVC_IMAGE}" "${REMEDIATION_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
    - source ./travis-scripts/build_develop.sh "${WAIT_SVC_IMAGE}" "${WAIT_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
    - source ./travis-scripts/build_develop.sh "${LIGHTHOUSE_SVC_IMAGE}" "${LIGHTHOUSE_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
    - source ./travis-scripts/build_develop.sh "${MONGODB_DS_IMAGE}" "${MONGODB_DS_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
    - source ./travis-scripts/build_develop.sh "${INSTALLER_IMAGE}" "${INSTALLER_FOLDER}" "${GIT_SHA}" "${DATE}"
    - cd ..
      ### ATTENTION: please make sure installer is always the last in this list to be built
    after_script:
      - echo "The following images have been built and pushed to dockerhub:"
      - docker images | grep keptn


  - stage: Cron GKE Full (--platform=gke)
    if: branch = master AND type = cron
    os: linux
    before_script:
    - source ./travis-scripts/install_gcloud.sh
    # auth gcloud
    - echo ${GCLOUD_SERVICE_KEY} | base64 --decode > ~/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
    - test/utils/download_and_install_keptn_cli.sh
    # create gke cluster on gcloud
    - test/utils/gke_create_cluster.sh
    script:
    # test installation on gcloud
    - test/test_install_gke.sh || travis_terminate 1
    # test onboarding and new artifcat for sockshop
    - export PROJECT=sockshop
    - test/test_onboard_service.sh || travis_terminate 1
    - test/test_new_artifact.sh || travis_terminate 1
    - test/test_delete_project.sh || travis_terminate 1
    after_success:
    # delete google kubernetes cluster only on success (in case of an error we want to be able to dig into the cluster)
    - echo "Tests were successful, cleaning up the cluster now..."
    - test/utils/gke_delete_cluster.sh
    after_failure:
    # print some debug info
    - echo "Keptn Installation Log:"
    - cat ~/.keptn/keptn-installer.log
    - cat ~/.keptn/keptn-installer-err.log

  - stage: Cron Minishift Standalone (--platform=openshift --use-case=quality-gates)
    if: branch = master AND type = cron
    os: linux
    before_script:
      # download and install kubectl
      - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.17.0/bin/linux/amd64/kubectl && chmod +x ./kubectl && sudo mv ./kubectl /usr/local/bin/kubectl
      - test/utils/download_and_install_keptn_cli.sh
      - test/utils/download_and_install_oc_cli.sh
      - test/utils/minishift_create_cluster.sh
    script:
      - kubectl get nodes || travis_terminate 1
      # finally install keptn
      - test/test_install_minishift_quality_gates.sh || travis_terminate 1
      - keptn status || travis_terminate 1
      - export PROJECT=musicshop
      - test/test_quality_gates_standalone.sh || travis_terminate 1
    after_success:
      # delete google kubernetes cluster only on success (in case of an error we want to be able to dig into the cluster)
      - echo "Tests were successful, cleaning up the cluster now..."
    after_failure:
      # print some debug info
      - echo "Keptn Installation Log:"
      - cat ~/.keptn/keptn-installer.log
      - cat ~/.keptn/keptn-installer-err.log

  - stage: Cron MicroK8s Standalone (--platform=kubernetes --use-case=quality-gates)
    if: branch = master AND type = cron
    os: linux
    before_script:
      # download and install kubectl
      - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.17.0/bin/linux/amd64/kubectl && chmod +x ./kubectl && sudo mv ./kubectl /usr/local/bin/kubectl
      - test/utils/download_and_install_keptn_cli.sh
      - test/utils/microk8s_create_cluster.sh
      - export KUBECONFIG=~/kubeconfig
    script:
      - kubectl get nodes || travis_terminate 1
      - test/test_install_kubernetes_quality_gates.sh || travis_terminate 1
      - keptn status || travis_terminate 1
      - export PROJECT=musicshop
      - test/test_quality_gates_standalone.sh || travis_terminate 1
    after_success:
      # delete google kubernetes cluster only on success (in case of an error we want to be able to dig into the cluster)
      - echo "Tests were successful, cleaning up the cluster now..."
    after_failure:
      # print some debug info
      - echo "Keptn Installation Log:"
      - cat ~/.keptn/keptn-installer.log
      - cat ~/.keptn/keptn-installer-err.log

  - stage: Cron Minikube Standalone (--platform=kubernetes --use-case=quality-gates)
    if: branch = master AND type = cron
    os: linux
    before_script:
      # download and install kubectl
      - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.17.0/bin/linux/amd64/kubectl && chmod +x ./kubectl && sudo mv ./kubectl /usr/local/bin/kubectl
      - test/utils/download_and_install_keptn_cli.sh
      - export USE_CASE=quality-gates
      - test/utils/minikube_create_cluster.sh
    script:
      - kubectl get nodes || travis_terminate 1
      - test/test_install_kubernetes_quality_gates.sh || travis_terminate 1
      - keptn status || travis_terminate 1
      - export PROJECT=musicshop
      - test/test_quality_gates_standalone.sh || travis_terminate 1
    after_success:
      # delete google kubernetes cluster only on success (in case of an error we want to be able to dig into the cluster)
      - echo "Tests were successful, cleaning up the cluster now..."
    after_failure:
      # print some debug info
      - echo "Keptn Installation Log:"
      - cat ~/.keptn/keptn-installer.log
      - cat ~/.keptn/keptn-installer-err.log

  # all commits (including external pull requests) should run basic tests for the CLI (if anything has changed)
  - stage: CLI tests
    os: osx # ToDo: cli tests fail for os: linux
    script:
    - |
      if [[ $CHANGED_FILES == *"${CLI_FOLDER}"*  ]]; then
        echo "Testing keptn CLI on osx"
        cd ./cli
        go test ./...
      fi

  # always check code style for all directories
  - stage: codestyle
    # Check Codestyle using go fmt
    services: []
    language: go
    go:
      - 1.12.x
    # skip install
    install: true
    script:
      - echo "Checking code style..."
      - unformatted=$(gofmt -l .)
      - |
        if [ ! -z "$unformatted" ]; then
          echo "Code Style Check failed for the following files: ${unformatted}".
          echo "Please run: gofmt -w ."
          echo "After that amend your commit (e.g.: git add ${unformatted} && git commit --amend --no-edit) and force push the changes (git push -f)."
          travis_terminate 1
        fi

    # always execute unit tests for all directories
  - stage: Unit tests
    os: linux
    script:
      - |
          cd "${API_FOLDER}"
          go test -coverprofile=coverage.txt -covermode=atomic -v ./handlers/... ./ws/... ./utils/...
          cd ..
      - |
          cd "${OS_ROUTE_SVC_FOLDER}"
          go test -race -coverprofile=coverage.txt -covermode=atomic -v ./...
          cd ../..
      - |
          cd "${JMETER_SVC_FOLDER}"
          go test -race -v -coverprofile=coverage.txt -covermode=atomic ./...
          cd ..
      - |
          cd "${HELM_SVC_FOLDER}"
          go test -race -v -coverprofile=coverage.txt -covermode=atomic ./...
          cd ..
      - |
          cd "${GATEKEEPER_SVC_FOLDER}"
          go test -race -v -coverprofile=coverage.txt -covermode=atomic ./...
          cd ..
      - |
          cd "${DISTRIBUTOR_FOLDER}"
          go test -race -v -coverprofile=coverage.txt -covermode=atomic ./...
          cd ..
      - |
          cd "${EVENTBROKER_FOLDER}"
          go test -race -v -coverprofile=coverage.txt -covermode=atomic ./...
          cd ..
      - |
          cd ${SHIPYARD_SVC_FOLDER}
          go test -race -v -coverprofile=coverage.txt -covermode=atomic ./...
          cd ..
      - |
          cd "${CONFIGURATION_SVC_FOLDER}"
          go test -race -v -coverprofile=coverage.txt -covermode=atomic ./...
          cd ..
      - |
          cd "${REMEDIATION_SVC_FOLDER}"
          go test -race -v -coverprofile=coverage.txt -covermode=atomic ./...
          cd ..
      - |
          cd "${WAIT_SVC_FOLDER}"
          go test -race -v -coverprofile=coverage.txt -covermode=atomic ./...
          cd ..
      - |
          cd "${LIGHTHOUSE_SVC_FOLDER}"
          go test -race -v -coverprofile=coverage.txt -covermode=atomic ./...
          cd ..
      - |
          cd "${MONGODB_DS_FOLDER}"
          go test -race -v -coverprofile=coverage.txt -covermode=atomic ./...
          cd ..
    after_success:
      - bash <(curl -s https://codecov.io/bash)

  - stage: feature/bug/hotfix/patch
    if: branch =~ ^feature.*$ OR branch =~ ^bug.*$ OR branch =~ ^hotfix.*$ OR branch =~ ^patch.*$
    os: osx
    before_script:
      - source ./travis-scripts/install_gcloud.sh
      - echo ${GCLOUD_SERVICE_KEY} | base64 --decode > ~/gcloud-service-key.json
      - gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
    script:
    - TYPE="$(echo $TRAVIS_BRANCH | cut -d'/' -f1)"
    - NUMBER="$(echo $TRAVIS_BRANCH | cut -d'/' -f2)"
    - |
      if [[ $CHANGED_FILES == *"${CLI_FOLDER}"*  ]]; then
        echo "Build keptn cli"
        cd ./cli
        go test ./...
        TAG="${TYPE}-${NUMBER}+${DATE}"
        source ../travis-scripts/build_cli.sh "${TAG}" "${KUBE_CONSTRAINTS}"
        cd ..
      fi
  - if: branch =~ ^feature.*$ OR branch =~ ^bug.*$ OR branch =~ ^hotfix.*$ OR branch =~ ^patch.*$
    os: linux
    services:
      - docker
    script:
    - echo "$REGISTRY_PASSWORD" | docker login --username $REGISTRY_USER --password-stdin
    - ./writeManifest.sh
    - TYPE="$(echo $TRAVIS_BRANCH | cut -d'/' -f1)"
    - NUMBER="$(echo $TRAVIS_BRANCH | cut -d'/' -f2)"
    - |
      if [[ $CHANGED_FILES == *"${API_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${API_IMAGE}" "${API_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${OS_ROUTE_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${OS_ROUTE_SVC_IMAGE}" "${OS_ROUTE_SVC_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ../..
      fi
    - |
      if [[ $CHANGED_FILES == *"${BRIDGE_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${BRIDGE_IMAGE}" "${BRIDGE_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${JMETER_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${JMETER_SVC_IMAGE}" "${JMETER_SVC_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${HELM_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${HELM_SVC_IMAGE}" "${HELM_SVC_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${GATEKEEPER_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${GATEKEEPER_SVC_IMAGE}" "${GATEKEEPER_SVC_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${DISTRIBUTOR_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${DISTRIBUTOR_IMAGE}" "${DISTRIBUTOR_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${EVENTBROKER_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${EVENTBROKER_IMAGE}" "${EVENTBROKER_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${SHIPYARD_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${SHIPYARD_SVC_IMAGE}" "${SHIPYARD_SVC_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${CONFIGURATION_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${CONFIGURATION_SVC_IMAGE}" "${CONFIGURATION_SVC_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${REMEDIATION_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${REMEDIATION_SVC_IMAGE}" "${REMEDIATION_SVC_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${WAIT_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${WAIT_SVC_IMAGE}" "${WAIT_SVC_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${LIGHTHOUSE_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${LIGHTHOUSE_SVC_IMAGE}" "${LIGHTHOUSE_SVC_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${MONGODB_DS_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${MONGODB_DS_IMAGE}" "${MONGODB_DS_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${INSTALLER_FOLDER}"*  ]]; then
        source ./travis-scripts/build_feature.sh "${INSTALLER_IMAGE}" "${INSTALLER_FOLDER}" "${GIT_SHA}" "${TYPE}" "${NUMBER}" "${DATE}"
        cd ..
      fi
      ### ATTENTION: please make sure installer is always the last in this list to be built
    after_script:
      - echo "The following images have been built and pushed to dockerhub:"
      - docker images | grep keptn

  - stage: master
    if: branch = master AND type = push
    os: osx
    before_script:
      - source ./travis-scripts/install_gcloud.sh
      - echo ${GCLOUD_SERVICE_KEY} | base64 --decode > ~/gcloud-service-key.json
      - gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
    script:
    - |
      if [[ $CHANGED_FILES == *"${CLI_FOLDER}"*  ]]; then
        echo "Build keptn cli"
        cd ./cli
        go test ./...
        TAG="latest"
        VERSION="master+${DATE}"
        source ../travis-scripts/build_cli.sh "${VERSION}" "${KUBE_CONSTRAINTS}"
        cd ..
      fi

  - if: branch = master AND type = push
    os: linux
    services:
      - docker
    script:
    - echo "$REGISTRY_PASSWORD" | docker login --username $REGISTRY_USER --password-stdin
    - ./writeManifest.sh
    - |
      if [[ $CHANGED_FILES == *"${API_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${API_IMAGE}" "${API_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${OS_ROUTE_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${OS_ROUTE_SVC_IMAGE}" "${OS_ROUTE_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ../..
      fi
    - |
      if [[ $CHANGED_FILES == *"${BRIDGE_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${BRIDGE_IMAGE}" "${BRIDGE_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${JMETER_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${JMETER_SVC_IMAGE}" "${JMETER_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${HELM_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${HELM_SVC_IMAGE}" "${HELM_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${GATEKEEPER_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${GATEKEEPER_SVC_IMAGE}" "${GATEKEEPER_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${DISTRIBUTOR_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${DISTRIBUTOR_IMAGE}" "${DISTRIBUTOR_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${EVENTBROKER_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${EVENTBROKER_IMAGE}" "${EVENTBROKER_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${SHIPYARD_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${SHIPYARD_SVC_IMAGE}" "${SHIPYARD_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${CONFIGURATION_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${CONFIGURATION_SVC_IMAGE}" "${CONFIGURATION_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${REMEDIATION_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${REMEDIATION_SVC_IMAGE}" "${REMEDIATION_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${WAIT_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${WAIT_SVC_IMAGE}" "${WAIT_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${LIGHTHOUSE_SVC_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${LIGHTHOUSE_SVC_IMAGE}" "${LIGHTHOUSE_SVC_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${MONGODB_DS_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${MONGODB_DS_IMAGE}" "${MONGODB_DS_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
    - |
      if [[ $CHANGED_FILES == *"${INSTALLER_FOLDER}"*  ]]; then
        source ./travis-scripts/build_develop.sh "${INSTALLER_IMAGE}" "${INSTALLER_FOLDER}" "${GIT_SHA}" "${DATE}"
        cd ..
      fi
      ### ATTENTION: please make sure installer is always the last in this list to be built
    after_script:
      - echo "The following images have been built and pushed to dockerhub:"
      - docker images | grep keptn

  - stage: release (cli)
    if: branch =~ ^release.*$ AND NOT type = pull_request
    os: osx
    before_script:
      - source ./travis-scripts/install_gcloud.sh
      - echo ${GCLOUD_SERVICE_KEY} | base64 --decode > ~/gcloud-service-key.json
      - gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
    script:
      # overwrite version for release branches based on the branch name
      - export VERSION=${BRANCH#"release-"}
      - echo "Build keptn cli"
      - cd ./cli
      - go test ./...
      - TAG="${VERSION}"
      - source ../travis-scripts/build_cli.sh "${VERSION}" "${KUBE_CONSTRAINTS}"
      - cd ..

  - stage: release (api, os-route-service, bridge, jmeter-service)
    if: branch =~ ^release.*$ AND NOT type = pull_request
    os: linux
    services:
      - docker
    script:
    - echo "$REGISTRY_PASSWORD" | docker login --username $REGISTRY_USER --password-stdin
    # overwrite version for release branches based on the branch name
    - export VERSION=${BRANCH#"release-"}
    - ./writeManifest.sh
    - source ./travis-scripts/build_release.sh "${API_IMAGE}" "${API_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
    - cd ..
    - source ./travis-scripts/build_release.sh "${OS_ROUTE_SVC_IMAGE}" "${OS_ROUTE_SVC_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
    - cd ../..
    - source ./travis-scripts/build_release.sh "${BRIDGE_IMAGE}" "${BRIDGE_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
    - cd ..
    - source ./travis-scripts/build_release.sh "${JMETER_SVC_IMAGE}" "${JMETER_SVC_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
    - cd ..
    after_script:
      - echo "The following images have been built and pushed to dockerhub:"
      - docker images | grep keptn

  - stage: release (helm-service, gatekeeper-service, distributor, eventbroker)
    if: branch =~ ^release.*$ AND NOT type = pull_request
    os: linux
    services:
      - docker
    script:
      - echo "$REGISTRY_PASSWORD" | docker login --username $REGISTRY_USER --password-stdin
      # overwrite version for release branches based on the branch name
      - export VERSION=${BRANCH#"release-"}
      - ./writeManifest.sh
      - source ./travis-scripts/build_release.sh "${HELM_SVC_IMAGE}" "${HELM_SVC_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
      - cd ..
      - source ./travis-scripts/build_release.sh "${GATEKEEPER_SVC_IMAGE}" "${GATEKEEPER_SVC_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
      - cd ..
      - source ./travis-scripts/build_release.sh "${DISTRIBUTOR_IMAGE}" "${DISTRIBUTOR_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
      - cd ..
      - source ./travis-scripts/build_release.sh "${EVENTBROKER_IMAGE}" "${EVENTBROKER_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
      - cd ..
    after_script:
      - echo "The following images have been built and pushed to dockerhub:"
      - docker images | grep keptn

  - stage: release (shipyard-service, configuration-service, remediation-service, wait-service)
    if: branch =~ ^release.*$ AND NOT type = pull_request
    os: linux
    services:
      - docker
    script:
      - echo "$REGISTRY_PASSWORD" | docker login --username $REGISTRY_USER --password-stdin
      # overwrite version for release branches based on the branch name
      - export VERSION=${BRANCH#"release-"}
      - ./writeManifest.sh
      - source ./travis-scripts/build_release.sh "${SHIPYARD_SVC_IMAGE}" "${SHIPYARD_SVC_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
      - cd ..
      - source ./travis-scripts/build_release.sh "${CONFIGURATION_SVC_IMAGE}" "${CONFIGURATION_SVC_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
      - cd ..
      - source ./travis-scripts/build_release.sh "${REMEDIATION_SVC_IMAGE}" "${REMEDIATION_SVC_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
      - cd ..
      - source ./travis-scripts/build_release.sh "${WAIT_SVC_IMAGE}" "${WAIT_SVC_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
      - cd ..
    after_script:
      - echo "The following images have been built and pushed to dockerhub:"
      - docker images | grep keptn

  - stage: release (lighthouse-service, mongodb-datastore, installer)
    if: branch =~ ^release.*$ AND NOT type = pull_request
    os: linux
    services:
      - docker
    script:
      - echo "$REGISTRY_PASSWORD" | docker login --username $REGISTRY_USER --password-stdin
      # overwrite version for release branches based on the branch name
      - export VERSION=${BRANCH#"release-"}
      - ./writeManifest.sh
      - source ./travis-scripts/build_release.sh "${LIGHTHOUSE_SVC_IMAGE}" "${LIGHTHOUSE_SVC_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
      - cd ..
      - source ./travis-scripts/build_release.sh "${MONGODB_DS_IMAGE}" "${MONGODB_DS_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
      - cd ..
      - source ./travis-scripts/build_release.sh "${INSTALLER_IMAGE}" "${INSTALLER_FOLDER}" "${GIT_SHA}" "${DATE}" "${VERSION}"
      - cd ..
    after_script:
      - echo "The following images have been built and pushed to dockerhub:"
      - docker images | grep keptn
