// Code generated by go-swagger; DO NOT EDIT.

package project_resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/keptn/keptn/configuration-service/models"
)

// NewPutProjectProjectNameResourceResourceURIParams creates a new PutProjectProjectNameResourceResourceURIParams object
// with the default values initialized.
func NewPutProjectProjectNameResourceResourceURIParams() PutProjectProjectNameResourceResourceURIParams {

	var (
		// initialize parameters with default values

		disableUpstreamSyncDefault = bool(false)
	)

	return PutProjectProjectNameResourceResourceURIParams{
		DisableUpstreamSync: &disableUpstreamSyncDefault,
	}
}

// PutProjectProjectNameResourceResourceURIParams contains all the bound params for the put project project name resource resource URI operation
// typically these are obtained from a http.Request
//
// swagger:parameters PutProjectProjectNameResourceResourceURI
type PutProjectProjectNameResourceResourceURIParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Disable sync of upstream repo before reading content
	  In: query
	  Default: false
	*/
	DisableUpstreamSync *bool
	/*Name of the project
	  Required: true
	  In: path
	*/
	ProjectName string
	/*Resource
	  In: body
	*/
	Resource *models.Resource
	/*Resource URI
	  Required: true
	  In: path
	*/
	ResourceURI string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPutProjectProjectNameResourceResourceURIParams() beforehand.
func (o *PutProjectProjectNameResourceResourceURIParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qDisableUpstreamSync, qhkDisableUpstreamSync, _ := qs.GetOK("disableUpstreamSync")
	if err := o.bindDisableUpstreamSync(qDisableUpstreamSync, qhkDisableUpstreamSync, route.Formats); err != nil {
		res = append(res, err)
	}

	rProjectName, rhkProjectName, _ := route.Params.GetOK("projectName")
	if err := o.bindProjectName(rProjectName, rhkProjectName, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.Resource
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			res = append(res, errors.NewParseError("resource", "body", "", err))
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Resource = &body
			}
		}
	}
	rResourceURI, rhkResourceURI, _ := route.Params.GetOK("resourceURI")
	if err := o.bindResourceURI(rResourceURI, rhkResourceURI, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDisableUpstreamSync binds and validates parameter DisableUpstreamSync from query.
func (o *PutProjectProjectNameResourceResourceURIParams) bindDisableUpstreamSync(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPutProjectProjectNameResourceResourceURIParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("disableUpstreamSync", "query", "bool", raw)
	}
	o.DisableUpstreamSync = &value

	return nil
}

// bindProjectName binds and validates parameter ProjectName from path.
func (o *PutProjectProjectNameResourceResourceURIParams) bindProjectName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.ProjectName = raw

	return nil
}

// bindResourceURI binds and validates parameter ResourceURI from path.
func (o *PutProjectProjectNameResourceResourceURIParams) bindResourceURI(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.ResourceURI = raw

	return nil
}
