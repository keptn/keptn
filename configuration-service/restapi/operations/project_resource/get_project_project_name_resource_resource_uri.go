// Code generated by go-swagger; DO NOT EDIT.

package project_resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetProjectProjectNameResourceResourceURIHandlerFunc turns a function with the right signature into a get project project name resource resource URI handler
type GetProjectProjectNameResourceResourceURIHandlerFunc func(GetProjectProjectNameResourceResourceURIParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetProjectProjectNameResourceResourceURIHandlerFunc) Handle(params GetProjectProjectNameResourceResourceURIParams) middleware.Responder {
	return fn(params)
}

// GetProjectProjectNameResourceResourceURIHandler interface for that can handle valid get project project name resource resource URI params
type GetProjectProjectNameResourceResourceURIHandler interface {
	Handle(GetProjectProjectNameResourceResourceURIParams) middleware.Responder
}

// NewGetProjectProjectNameResourceResourceURI creates a new http.Handler for the get project project name resource resource URI operation
func NewGetProjectProjectNameResourceResourceURI(ctx *middleware.Context, handler GetProjectProjectNameResourceResourceURIHandler) *GetProjectProjectNameResourceResourceURI {
	return &GetProjectProjectNameResourceResourceURI{Context: ctx, Handler: handler}
}

/*GetProjectProjectNameResourceResourceURI swagger:route GET /project/{projectName}/resource/{resourceURI} Project Resource getProjectProjectNameResourceResourceUri

Get the specified resource

*/
type GetProjectProjectNameResourceResourceURI struct {
	Context *middleware.Context
	Handler GetProjectProjectNameResourceResourceURIHandler
}

func (o *GetProjectProjectNameResourceResourceURI) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetProjectProjectNameResourceResourceURIParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
