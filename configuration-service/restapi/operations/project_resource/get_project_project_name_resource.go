// Code generated by go-swagger; DO NOT EDIT.

package project_resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetProjectProjectNameResourceHandlerFunc turns a function with the right signature into a get project project name resource handler
type GetProjectProjectNameResourceHandlerFunc func(GetProjectProjectNameResourceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetProjectProjectNameResourceHandlerFunc) Handle(params GetProjectProjectNameResourceParams) middleware.Responder {
	return fn(params)
}

// GetProjectProjectNameResourceHandler interface for that can handle valid get project project name resource params
type GetProjectProjectNameResourceHandler interface {
	Handle(GetProjectProjectNameResourceParams) middleware.Responder
}

// NewGetProjectProjectNameResource creates a new http.Handler for the get project project name resource operation
func NewGetProjectProjectNameResource(ctx *middleware.Context, handler GetProjectProjectNameResourceHandler) *GetProjectProjectNameResource {
	return &GetProjectProjectNameResource{Context: ctx, Handler: handler}
}

/*GetProjectProjectNameResource swagger:route GET /project/{projectName}/resource Project Resource getProjectProjectNameResource

Get list of project resources

*/
type GetProjectProjectNameResource struct {
	Context *middleware.Context
	Handler GetProjectProjectNameResourceHandler
}

func (o *GetProjectProjectNameResource) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetProjectProjectNameResourceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
