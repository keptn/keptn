// Code generated by go-swagger; DO NOT EDIT.

package remediation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/keptn/keptn/configuration-service/models"
)

// GetRemediationsForContextOKCode is the HTTP code returned for type GetRemediationsForContextOK
const GetRemediationsForContextOKCode int = 200

/*GetRemediationsForContextOK Success

swagger:response getRemediationsForContextOK
*/
type GetRemediationsForContextOK struct {

	/*
	  In: Body
	*/
	Payload *models.Remediations `json:"body,omitempty"`
}

// NewGetRemediationsForContextOK creates GetRemediationsForContextOK with default headers values
func NewGetRemediationsForContextOK() *GetRemediationsForContextOK {

	return &GetRemediationsForContextOK{}
}

// WithPayload adds the payload to the get remediations for context o k response
func (o *GetRemediationsForContextOK) WithPayload(payload *models.Remediations) *GetRemediationsForContextOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get remediations for context o k response
func (o *GetRemediationsForContextOK) SetPayload(payload *models.Remediations) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRemediationsForContextOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRemediationsForContextNotFoundCode is the HTTP code returned for type GetRemediationsForContextNotFound
const GetRemediationsForContextNotFoundCode int = 404

/*GetRemediationsForContextNotFound Failed. Remediations could not be found

swagger:response getRemediationsForContextNotFound
*/
type GetRemediationsForContextNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetRemediationsForContextNotFound creates GetRemediationsForContextNotFound with default headers values
func NewGetRemediationsForContextNotFound() *GetRemediationsForContextNotFound {

	return &GetRemediationsForContextNotFound{}
}

// WithPayload adds the payload to the get remediations for context not found response
func (o *GetRemediationsForContextNotFound) WithPayload(payload *models.Error) *GetRemediationsForContextNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get remediations for context not found response
func (o *GetRemediationsForContextNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRemediationsForContextNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetRemediationsForContextDefault Error

swagger:response getRemediationsForContextDefault
*/
type GetRemediationsForContextDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetRemediationsForContextDefault creates GetRemediationsForContextDefault with default headers values
func NewGetRemediationsForContextDefault(code int) *GetRemediationsForContextDefault {
	if code <= 0 {
		code = 500
	}

	return &GetRemediationsForContextDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get remediations for context default response
func (o *GetRemediationsForContextDefault) WithStatusCode(code int) *GetRemediationsForContextDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get remediations for context default response
func (o *GetRemediationsForContextDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get remediations for context default response
func (o *GetRemediationsForContextDefault) WithPayload(payload *models.Error) *GetRemediationsForContextDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get remediations for context default response
func (o *GetRemediationsForContextDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRemediationsForContextDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
