// Code generated by go-swagger; DO NOT EDIT.

package remediation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/keptn/keptn/configuration-service/models"
)

// CloseRemediationsOKCode is the HTTP code returned for type CloseRemediationsOK
const CloseRemediationsOKCode int = 200

/*CloseRemediationsOK OK

swagger:response closeRemediationsOK
*/
type CloseRemediationsOK struct {
}

// NewCloseRemediationsOK creates CloseRemediationsOK with default headers values
func NewCloseRemediationsOK() *CloseRemediationsOK {

	return &CloseRemediationsOK{}
}

// WriteResponse to the client
func (o *CloseRemediationsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

/*CloseRemediationsDefault Error

swagger:response closeRemediationsDefault
*/
type CloseRemediationsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCloseRemediationsDefault creates CloseRemediationsDefault with default headers values
func NewCloseRemediationsDefault(code int) *CloseRemediationsDefault {
	if code <= 0 {
		code = 500
	}

	return &CloseRemediationsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the close remediations default response
func (o *CloseRemediationsDefault) WithStatusCode(code int) *CloseRemediationsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the close remediations default response
func (o *CloseRemediationsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the close remediations default response
func (o *CloseRemediationsDefault) WithPayload(payload *models.Error) *CloseRemediationsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the close remediations default response
func (o *CloseRemediationsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CloseRemediationsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
