// Code generated by go-swagger; DO NOT EDIT.

package service_resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/keptn/keptn/configuration-service/models"
)

// GetProjectProjectNameStageStageNameServiceServiceNameResourceResourceURIOKCode is the HTTP code returned for type GetProjectProjectNameStageStageNameServiceServiceNameResourceResourceURIOK
const GetProjectProjectNameStageStageNameServiceServiceNameResourceResourceURIOKCode int = 200

/*GetProjectProjectNameStageStageNameServiceServiceNameResourceResourceURIOK Success

swagger:response getProjectProjectNameStageStageNameServiceServiceNameResourceResourceUriOK
*/
type GetProjectProjectNameStageStageNameServiceServiceNameResourceResourceURIOK struct {

	/*
	  In: Body
	*/
	Payload *models.Resource `json:"body,omitempty"`
}

// NewGetProjectProjectNameStageStageNameServiceServiceNameResourceResourceURIOK creates GetProjectProjectNameStageStageNameServiceServiceNameResourceResourceURIOK with default headers values
func NewGetProjectProjectNameStageStageNameServiceServiceNameResourceResourceURIOK() *GetProjectProjectNameStageStageNameServiceServiceNameResourceResourceURIOK {

	return &GetProjectProjectNameStageStageNameServiceServiceNameResourceResourceURIOK{}
}

// WithPayload adds the payload to the get project project name stage stage name service service name resource resource Uri o k response
func (o *GetProjectProjectNameStageStageNameServiceServiceNameResourceResourceURIOK) WithPayload(payload *models.Resource) *GetProjectProjectNameStageStageNameServiceServiceNameResourceResourceURIOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get project project name stage stage name service service name resource resource Uri o k response
func (o *GetProjectProjectNameStageStageNameServiceServiceNameResourceResourceURIOK) SetPayload(payload *models.Resource) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProjectProjectNameStageStageNameServiceServiceNameResourceResourceURIOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
