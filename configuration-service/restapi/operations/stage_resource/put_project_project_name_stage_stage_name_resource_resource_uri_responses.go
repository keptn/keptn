// Code generated by go-swagger; DO NOT EDIT.

package stage_resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/keptn/keptn/configuration-service/models"
)

// PutProjectProjectNameStageStageNameResourceResourceURICreatedCode is the HTTP code returned for type PutProjectProjectNameStageStageNameResourceResourceURICreated
const PutProjectProjectNameStageStageNameResourceResourceURICreatedCode int = 201

/*PutProjectProjectNameStageStageNameResourceResourceURICreated Success. Stage resource has been updated. The version of the new configuration is returned.

swagger:response putProjectProjectNameStageStageNameResourceResourceUriCreated
*/
type PutProjectProjectNameStageStageNameResourceResourceURICreated struct {

	/*
	  In: Body
	*/
	Payload *models.Version `json:"body,omitempty"`
}

// NewPutProjectProjectNameStageStageNameResourceResourceURICreated creates PutProjectProjectNameStageStageNameResourceResourceURICreated with default headers values
func NewPutProjectProjectNameStageStageNameResourceResourceURICreated() *PutProjectProjectNameStageStageNameResourceResourceURICreated {

	return &PutProjectProjectNameStageStageNameResourceResourceURICreated{}
}

// WithPayload adds the payload to the put project project name stage stage name resource resource Uri created response
func (o *PutProjectProjectNameStageStageNameResourceResourceURICreated) WithPayload(payload *models.Version) *PutProjectProjectNameStageStageNameResourceResourceURICreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put project project name stage stage name resource resource Uri created response
func (o *PutProjectProjectNameStageStageNameResourceResourceURICreated) SetPayload(payload *models.Version) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutProjectProjectNameStageStageNameResourceResourceURICreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutProjectProjectNameStageStageNameResourceResourceURIBadRequestCode is the HTTP code returned for type PutProjectProjectNameStageStageNameResourceResourceURIBadRequest
const PutProjectProjectNameStageStageNameResourceResourceURIBadRequestCode int = 400

/*PutProjectProjectNameStageStageNameResourceResourceURIBadRequest Failed. Stage resource could not be updated.

swagger:response putProjectProjectNameStageStageNameResourceResourceUriBadRequest
*/
type PutProjectProjectNameStageStageNameResourceResourceURIBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutProjectProjectNameStageStageNameResourceResourceURIBadRequest creates PutProjectProjectNameStageStageNameResourceResourceURIBadRequest with default headers values
func NewPutProjectProjectNameStageStageNameResourceResourceURIBadRequest() *PutProjectProjectNameStageStageNameResourceResourceURIBadRequest {

	return &PutProjectProjectNameStageStageNameResourceResourceURIBadRequest{}
}

// WithPayload adds the payload to the put project project name stage stage name resource resource Uri bad request response
func (o *PutProjectProjectNameStageStageNameResourceResourceURIBadRequest) WithPayload(payload *models.Error) *PutProjectProjectNameStageStageNameResourceResourceURIBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put project project name stage stage name resource resource Uri bad request response
func (o *PutProjectProjectNameStageStageNameResourceResourceURIBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutProjectProjectNameStageStageNameResourceResourceURIBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PutProjectProjectNameStageStageNameResourceResourceURIDefault Error

swagger:response putProjectProjectNameStageStageNameResourceResourceUriDefault
*/
type PutProjectProjectNameStageStageNameResourceResourceURIDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutProjectProjectNameStageStageNameResourceResourceURIDefault creates PutProjectProjectNameStageStageNameResourceResourceURIDefault with default headers values
func NewPutProjectProjectNameStageStageNameResourceResourceURIDefault(code int) *PutProjectProjectNameStageStageNameResourceResourceURIDefault {
	if code <= 0 {
		code = 500
	}

	return &PutProjectProjectNameStageStageNameResourceResourceURIDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the put project project name stage stage name resource resource URI default response
func (o *PutProjectProjectNameStageStageNameResourceResourceURIDefault) WithStatusCode(code int) *PutProjectProjectNameStageStageNameResourceResourceURIDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the put project project name stage stage name resource resource URI default response
func (o *PutProjectProjectNameStageStageNameResourceResourceURIDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the put project project name stage stage name resource resource URI default response
func (o *PutProjectProjectNameStageStageNameResourceResourceURIDefault) WithPayload(payload *models.Error) *PutProjectProjectNameStageStageNameResourceResourceURIDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put project project name stage stage name resource resource URI default response
func (o *PutProjectProjectNameStageStageNameResourceResourceURIDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutProjectProjectNameStageStageNameResourceResourceURIDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
