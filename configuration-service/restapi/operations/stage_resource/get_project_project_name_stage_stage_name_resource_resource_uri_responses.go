// Code generated by go-swagger; DO NOT EDIT.

package stage_resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/keptn/keptn/configuration-service/models"
)

// GetProjectProjectNameStageStageNameResourceResourceURIOKCode is the HTTP code returned for type GetProjectProjectNameStageStageNameResourceResourceURIOK
const GetProjectProjectNameStageStageNameResourceResourceURIOKCode int = 200

/*GetProjectProjectNameStageStageNameResourceResourceURIOK Success

swagger:response getProjectProjectNameStageStageNameResourceResourceUriOK
*/
type GetProjectProjectNameStageStageNameResourceResourceURIOK struct {

	/*
	  In: Body
	*/
	Payload *models.Resource `json:"body,omitempty"`
}

// NewGetProjectProjectNameStageStageNameResourceResourceURIOK creates GetProjectProjectNameStageStageNameResourceResourceURIOK with default headers values
func NewGetProjectProjectNameStageStageNameResourceResourceURIOK() *GetProjectProjectNameStageStageNameResourceResourceURIOK {

	return &GetProjectProjectNameStageStageNameResourceResourceURIOK{}
}

// WithPayload adds the payload to the get project project name stage stage name resource resource Uri o k response
func (o *GetProjectProjectNameStageStageNameResourceResourceURIOK) WithPayload(payload *models.Resource) *GetProjectProjectNameStageStageNameResourceResourceURIOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get project project name stage stage name resource resource Uri o k response
func (o *GetProjectProjectNameStageStageNameResourceResourceURIOK) SetPayload(payload *models.Resource) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProjectProjectNameStageStageNameResourceResourceURIOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
