// Code generated by go-swagger; DO NOT EDIT.

package stage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetProjectProjectNameStageHandlerFunc turns a function with the right signature into a get project project name stage handler
type GetProjectProjectNameStageHandlerFunc func(GetProjectProjectNameStageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetProjectProjectNameStageHandlerFunc) Handle(params GetProjectProjectNameStageParams) middleware.Responder {
	return fn(params)
}

// GetProjectProjectNameStageHandler interface for that can handle valid get project project name stage params
type GetProjectProjectNameStageHandler interface {
	Handle(GetProjectProjectNameStageParams) middleware.Responder
}

// NewGetProjectProjectNameStage creates a new http.Handler for the get project project name stage operation
func NewGetProjectProjectNameStage(ctx *middleware.Context, handler GetProjectProjectNameStageHandler) *GetProjectProjectNameStage {
	return &GetProjectProjectNameStage{Context: ctx, Handler: handler}
}

/*GetProjectProjectNameStage swagger:route GET /project/{projectName}/stage Stage getProjectProjectNameStage

Get list of stages

*/
type GetProjectProjectNameStage struct {
	Context *middleware.Context
	Handler GetProjectProjectNameStageHandler
}

func (o *GetProjectProjectNameStage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetProjectProjectNameStageParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
