// Code generated by go-swagger; DO NOT EDIT.

package stage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/keptn/keptn/configuration-service/models"
)

// PutProjectProjectNameStageStageNameNoContentCode is the HTTP code returned for type PutProjectProjectNameStageStageNameNoContent
const PutProjectProjectNameStageStageNameNoContentCode int = 204

/*PutProjectProjectNameStageStageNameNoContent Success. Stage has been updated. Response does not have a body.

swagger:response putProjectProjectNameStageStageNameNoContent
*/
type PutProjectProjectNameStageStageNameNoContent struct {
}

// NewPutProjectProjectNameStageStageNameNoContent creates PutProjectProjectNameStageStageNameNoContent with default headers values
func NewPutProjectProjectNameStageStageNameNoContent() *PutProjectProjectNameStageStageNameNoContent {

	return &PutProjectProjectNameStageStageNameNoContent{}
}

// WriteResponse to the client
func (o *PutProjectProjectNameStageStageNameNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// PutProjectProjectNameStageStageNameBadRequestCode is the HTTP code returned for type PutProjectProjectNameStageStageNameBadRequest
const PutProjectProjectNameStageStageNameBadRequestCode int = 400

/*PutProjectProjectNameStageStageNameBadRequest Failed. Stage could not be updated.

swagger:response putProjectProjectNameStageStageNameBadRequest
*/
type PutProjectProjectNameStageStageNameBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutProjectProjectNameStageStageNameBadRequest creates PutProjectProjectNameStageStageNameBadRequest with default headers values
func NewPutProjectProjectNameStageStageNameBadRequest() *PutProjectProjectNameStageStageNameBadRequest {

	return &PutProjectProjectNameStageStageNameBadRequest{}
}

// WithPayload adds the payload to the put project project name stage stage name bad request response
func (o *PutProjectProjectNameStageStageNameBadRequest) WithPayload(payload *models.Error) *PutProjectProjectNameStageStageNameBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put project project name stage stage name bad request response
func (o *PutProjectProjectNameStageStageNameBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutProjectProjectNameStageStageNameBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PutProjectProjectNameStageStageNameDefault Error

swagger:response putProjectProjectNameStageStageNameDefault
*/
type PutProjectProjectNameStageStageNameDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutProjectProjectNameStageStageNameDefault creates PutProjectProjectNameStageStageNameDefault with default headers values
func NewPutProjectProjectNameStageStageNameDefault(code int) *PutProjectProjectNameStageStageNameDefault {
	if code <= 0 {
		code = 500
	}

	return &PutProjectProjectNameStageStageNameDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the put project project name stage stage name default response
func (o *PutProjectProjectNameStageStageNameDefault) WithStatusCode(code int) *PutProjectProjectNameStageStageNameDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the put project project name stage stage name default response
func (o *PutProjectProjectNameStageStageNameDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the put project project name stage stage name default response
func (o *PutProjectProjectNameStageStageNameDefault) WithPayload(payload *models.Error) *PutProjectProjectNameStageStageNameDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put project project name stage stage name default response
func (o *PutProjectProjectNameStageStageNameDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutProjectProjectNameStageStageNameDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
