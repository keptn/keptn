// Code generated by go-swagger; DO NOT EDIT.

package stage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/keptn/keptn/configuration-service/models"
)

// PostProjectProjectNameStageNoContentCode is the HTTP code returned for type PostProjectProjectNameStageNoContent
const PostProjectProjectNameStageNoContentCode int = 204

/*PostProjectProjectNameStageNoContent Success. Stage has been created. Response does not have a body.

swagger:response postProjectProjectNameStageNoContent
*/
type PostProjectProjectNameStageNoContent struct {
}

// NewPostProjectProjectNameStageNoContent creates PostProjectProjectNameStageNoContent with default headers values
func NewPostProjectProjectNameStageNoContent() *PostProjectProjectNameStageNoContent {

	return &PostProjectProjectNameStageNoContent{}
}

// WriteResponse to the client
func (o *PostProjectProjectNameStageNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// PostProjectProjectNameStageBadRequestCode is the HTTP code returned for type PostProjectProjectNameStageBadRequest
const PostProjectProjectNameStageBadRequestCode int = 400

/*PostProjectProjectNameStageBadRequest Failed. Stage could not be created.

swagger:response postProjectProjectNameStageBadRequest
*/
type PostProjectProjectNameStageBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostProjectProjectNameStageBadRequest creates PostProjectProjectNameStageBadRequest with default headers values
func NewPostProjectProjectNameStageBadRequest() *PostProjectProjectNameStageBadRequest {

	return &PostProjectProjectNameStageBadRequest{}
}

// WithPayload adds the payload to the post project project name stage bad request response
func (o *PostProjectProjectNameStageBadRequest) WithPayload(payload *models.Error) *PostProjectProjectNameStageBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post project project name stage bad request response
func (o *PostProjectProjectNameStageBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostProjectProjectNameStageBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostProjectProjectNameStageDefault Error

swagger:response postProjectProjectNameStageDefault
*/
type PostProjectProjectNameStageDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostProjectProjectNameStageDefault creates PostProjectProjectNameStageDefault with default headers values
func NewPostProjectProjectNameStageDefault(code int) *PostProjectProjectNameStageDefault {
	if code <= 0 {
		code = 500
	}

	return &PostProjectProjectNameStageDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post project project name stage default response
func (o *PostProjectProjectNameStageDefault) WithStatusCode(code int) *PostProjectProjectNameStageDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post project project name stage default response
func (o *PostProjectProjectNameStageDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post project project name stage default response
func (o *PostProjectProjectNameStageDefault) WithPayload(payload *models.Error) *PostProjectProjectNameStageDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post project project name stage default response
func (o *PostProjectProjectNameStageDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostProjectProjectNameStageDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
