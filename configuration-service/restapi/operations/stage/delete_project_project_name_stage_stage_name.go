// Code generated by go-swagger; DO NOT EDIT.

package stage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteProjectProjectNameStageStageNameHandlerFunc turns a function with the right signature into a delete project project name stage stage name handler
type DeleteProjectProjectNameStageStageNameHandlerFunc func(DeleteProjectProjectNameStageStageNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteProjectProjectNameStageStageNameHandlerFunc) Handle(params DeleteProjectProjectNameStageStageNameParams) middleware.Responder {
	return fn(params)
}

// DeleteProjectProjectNameStageStageNameHandler interface for that can handle valid delete project project name stage stage name params
type DeleteProjectProjectNameStageStageNameHandler interface {
	Handle(DeleteProjectProjectNameStageStageNameParams) middleware.Responder
}

// NewDeleteProjectProjectNameStageStageName creates a new http.Handler for the delete project project name stage stage name operation
func NewDeleteProjectProjectNameStageStageName(ctx *middleware.Context, handler DeleteProjectProjectNameStageStageNameHandler) *DeleteProjectProjectNameStageStageName {
	return &DeleteProjectProjectNameStageStageName{Context: ctx, Handler: handler}
}

/*DeleteProjectProjectNameStageStageName swagger:route DELETE /project/{projectName}/stage/{stageName} Stage deleteProjectProjectNameStageStageName

INTERNAL Endpoint: Delete the specified stage

*/
type DeleteProjectProjectNameStageStageName struct {
	Context *middleware.Context
	Handler DeleteProjectProjectNameStageStageNameHandler
}

func (o *DeleteProjectProjectNameStageStageName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteProjectProjectNameStageStageNameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
