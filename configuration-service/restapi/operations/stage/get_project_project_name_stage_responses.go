// Code generated by go-swagger; DO NOT EDIT.

package stage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/keptn/keptn/configuration-service/models"
)

// GetProjectProjectNameStageOKCode is the HTTP code returned for type GetProjectProjectNameStageOK
const GetProjectProjectNameStageOKCode int = 200

/*GetProjectProjectNameStageOK Success

swagger:response getProjectProjectNameStageOK
*/
type GetProjectProjectNameStageOK struct {

	/*
	  In: Body
	*/
	Payload *models.Stages `json:"body,omitempty"`
}

// NewGetProjectProjectNameStageOK creates GetProjectProjectNameStageOK with default headers values
func NewGetProjectProjectNameStageOK() *GetProjectProjectNameStageOK {

	return &GetProjectProjectNameStageOK{}
}

// WithPayload adds the payload to the get project project name stage o k response
func (o *GetProjectProjectNameStageOK) WithPayload(payload *models.Stages) *GetProjectProjectNameStageOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get project project name stage o k response
func (o *GetProjectProjectNameStageOK) SetPayload(payload *models.Stages) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProjectProjectNameStageOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetProjectProjectNameStageNotFoundCode is the HTTP code returned for type GetProjectProjectNameStageNotFound
const GetProjectProjectNameStageNotFoundCode int = 404

/*GetProjectProjectNameStageNotFound Failed. Containing project could not be found.

swagger:response getProjectProjectNameStageNotFound
*/
type GetProjectProjectNameStageNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetProjectProjectNameStageNotFound creates GetProjectProjectNameStageNotFound with default headers values
func NewGetProjectProjectNameStageNotFound() *GetProjectProjectNameStageNotFound {

	return &GetProjectProjectNameStageNotFound{}
}

// WithPayload adds the payload to the get project project name stage not found response
func (o *GetProjectProjectNameStageNotFound) WithPayload(payload *models.Error) *GetProjectProjectNameStageNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get project project name stage not found response
func (o *GetProjectProjectNameStageNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProjectProjectNameStageNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetProjectProjectNameStageDefault Error

swagger:response getProjectProjectNameStageDefault
*/
type GetProjectProjectNameStageDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetProjectProjectNameStageDefault creates GetProjectProjectNameStageDefault with default headers values
func NewGetProjectProjectNameStageDefault(code int) *GetProjectProjectNameStageDefault {
	if code <= 0 {
		code = 500
	}

	return &GetProjectProjectNameStageDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get project project name stage default response
func (o *GetProjectProjectNameStageDefault) WithStatusCode(code int) *GetProjectProjectNameStageDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get project project name stage default response
func (o *GetProjectProjectNameStageDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get project project name stage default response
func (o *GetProjectProjectNameStageDefault) WithPayload(payload *models.Error) *GetProjectProjectNameStageDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get project project name stage default response
func (o *GetProjectProjectNameStageDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProjectProjectNameStageDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
