// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/keptn/keptn/configuration-service/models"
)

// GetProjectProjectNameOKCode is the HTTP code returned for type GetProjectProjectNameOK
const GetProjectProjectNameOKCode int = 200

/*GetProjectProjectNameOK Success

swagger:response getProjectProjectNameOK
*/
type GetProjectProjectNameOK struct {

	/*
	  In: Body
	*/
	Payload *models.ExpandedProject `json:"body,omitempty"`
}

// NewGetProjectProjectNameOK creates GetProjectProjectNameOK with default headers values
func NewGetProjectProjectNameOK() *GetProjectProjectNameOK {

	return &GetProjectProjectNameOK{}
}

// WithPayload adds the payload to the get project project name o k response
func (o *GetProjectProjectNameOK) WithPayload(payload *models.ExpandedProject) *GetProjectProjectNameOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get project project name o k response
func (o *GetProjectProjectNameOK) SetPayload(payload *models.ExpandedProject) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProjectProjectNameOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetProjectProjectNameNotFoundCode is the HTTP code returned for type GetProjectProjectNameNotFound
const GetProjectProjectNameNotFoundCode int = 404

/*GetProjectProjectNameNotFound Failed. Project could not be found.

swagger:response getProjectProjectNameNotFound
*/
type GetProjectProjectNameNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetProjectProjectNameNotFound creates GetProjectProjectNameNotFound with default headers values
func NewGetProjectProjectNameNotFound() *GetProjectProjectNameNotFound {

	return &GetProjectProjectNameNotFound{}
}

// WithPayload adds the payload to the get project project name not found response
func (o *GetProjectProjectNameNotFound) WithPayload(payload *models.Error) *GetProjectProjectNameNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get project project name not found response
func (o *GetProjectProjectNameNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProjectProjectNameNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetProjectProjectNameDefault Error

swagger:response getProjectProjectNameDefault
*/
type GetProjectProjectNameDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetProjectProjectNameDefault creates GetProjectProjectNameDefault with default headers values
func NewGetProjectProjectNameDefault(code int) *GetProjectProjectNameDefault {
	if code <= 0 {
		code = 500
	}

	return &GetProjectProjectNameDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get project project name default response
func (o *GetProjectProjectNameDefault) WithStatusCode(code int) *GetProjectProjectNameDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get project project name default response
func (o *GetProjectProjectNameDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get project project name default response
func (o *GetProjectProjectNameDefault) WithPayload(payload *models.Error) *GetProjectProjectNameDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get project project name default response
func (o *GetProjectProjectNameDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetProjectProjectNameDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
