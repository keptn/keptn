// Code generated by go-swagger; DO NOT EDIT.

package service_approval

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/keptn/keptn/configuration-service/models"
)

// GetServiceApprovalsOKCode is the HTTP code returned for type GetServiceApprovalsOK
const GetServiceApprovalsOKCode int = 200

/*GetServiceApprovalsOK Success

swagger:response getServiceApprovalsOK
*/
type GetServiceApprovalsOK struct {

	/*
	  In: Body
	*/
	Payload *models.Approvals `json:"body,omitempty"`
}

// NewGetServiceApprovalsOK creates GetServiceApprovalsOK with default headers values
func NewGetServiceApprovalsOK() *GetServiceApprovalsOK {

	return &GetServiceApprovalsOK{}
}

// WithPayload adds the payload to the get service approvals o k response
func (o *GetServiceApprovalsOK) WithPayload(payload *models.Approvals) *GetServiceApprovalsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get service approvals o k response
func (o *GetServiceApprovalsOK) SetPayload(payload *models.Approvals) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetServiceApprovalsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetServiceApprovalsNotFoundCode is the HTTP code returned for type GetServiceApprovalsNotFound
const GetServiceApprovalsNotFoundCode int = 404

/*GetServiceApprovalsNotFound Failed. Service could not be found.

swagger:response getServiceApprovalsNotFound
*/
type GetServiceApprovalsNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetServiceApprovalsNotFound creates GetServiceApprovalsNotFound with default headers values
func NewGetServiceApprovalsNotFound() *GetServiceApprovalsNotFound {

	return &GetServiceApprovalsNotFound{}
}

// WithPayload adds the payload to the get service approvals not found response
func (o *GetServiceApprovalsNotFound) WithPayload(payload *models.Error) *GetServiceApprovalsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get service approvals not found response
func (o *GetServiceApprovalsNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetServiceApprovalsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetServiceApprovalsDefault Error

swagger:response getServiceApprovalsDefault
*/
type GetServiceApprovalsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetServiceApprovalsDefault creates GetServiceApprovalsDefault with default headers values
func NewGetServiceApprovalsDefault(code int) *GetServiceApprovalsDefault {
	if code <= 0 {
		code = 500
	}

	return &GetServiceApprovalsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get service approvals default response
func (o *GetServiceApprovalsDefault) WithStatusCode(code int) *GetServiceApprovalsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get service approvals default response
func (o *GetServiceApprovalsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get service approvals default response
func (o *GetServiceApprovalsDefault) WithPayload(payload *models.Error) *GetServiceApprovalsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get service approvals default response
func (o *GetServiceApprovalsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetServiceApprovalsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
