// Code generated by go-swagger; DO NOT EDIT.

package service_approval

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetServiceApprovalHandlerFunc turns a function with the right signature into a get service approval handler
type GetServiceApprovalHandlerFunc func(GetServiceApprovalParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetServiceApprovalHandlerFunc) Handle(params GetServiceApprovalParams) middleware.Responder {
	return fn(params)
}

// GetServiceApprovalHandler interface for that can handle valid get service approval params
type GetServiceApprovalHandler interface {
	Handle(GetServiceApprovalParams) middleware.Responder
}

// NewGetServiceApproval creates a new http.Handler for the get service approval operation
func NewGetServiceApproval(ctx *middleware.Context, handler GetServiceApprovalHandler) *GetServiceApproval {
	return &GetServiceApproval{Context: ctx, Handler: handler}
}

/*GetServiceApproval swagger:route GET /project/{projectName}/stage/{stageName}/service/{serviceName}/approval/{approvalID} Service approval getServiceApproval

Get open service approvals by ID

*/
type GetServiceApproval struct {
	Context *middleware.Context
	Handler GetServiceApprovalHandler
}

func (o *GetServiceApproval) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetServiceApprovalParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
