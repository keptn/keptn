// Code generated by go-swagger; DO NOT EDIT.

package service_approval

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/keptn/keptn/configuration-service/models"
)

// CreateRemediationOKCode is the HTTP code returned for type CreateRemediationOK
const CreateRemediationOKCode int = 200

/*CreateRemediationOK Success

swagger:response createRemediationOK
*/
type CreateRemediationOK struct {

	/*
	  In: Body
	*/
	Payload *models.Remediation `json:"body,omitempty"`
}

// NewCreateRemediationOK creates CreateRemediationOK with default headers values
func NewCreateRemediationOK() *CreateRemediationOK {

	return &CreateRemediationOK{}
}

// WithPayload adds the payload to the create remediation o k response
func (o *CreateRemediationOK) WithPayload(payload *models.Remediation) *CreateRemediationOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create remediation o k response
func (o *CreateRemediationOK) SetPayload(payload *models.Remediation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRemediationOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*CreateRemediationDefault Error

swagger:response createRemediationDefault
*/
type CreateRemediationDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateRemediationDefault creates CreateRemediationDefault with default headers values
func NewCreateRemediationDefault(code int) *CreateRemediationDefault {
	if code <= 0 {
		code = 500
	}

	return &CreateRemediationDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the create remediation default response
func (o *CreateRemediationDefault) WithStatusCode(code int) *CreateRemediationDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the create remediation default response
func (o *CreateRemediationDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the create remediation default response
func (o *CreateRemediationDefault) WithPayload(payload *models.Error) *CreateRemediationDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create remediation default response
func (o *CreateRemediationDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRemediationDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
