// Code generated by go-swagger; DO NOT EDIT.

package service_approval

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetServiceApprovalsHandlerFunc turns a function with the right signature into a get service approvals handler
type GetServiceApprovalsHandlerFunc func(GetServiceApprovalsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetServiceApprovalsHandlerFunc) Handle(params GetServiceApprovalsParams) middleware.Responder {
	return fn(params)
}

// GetServiceApprovalsHandler interface for that can handle valid get service approvals params
type GetServiceApprovalsHandler interface {
	Handle(GetServiceApprovalsParams) middleware.Responder
}

// NewGetServiceApprovals creates a new http.Handler for the get service approvals operation
func NewGetServiceApprovals(ctx *middleware.Context, handler GetServiceApprovalsHandler) *GetServiceApprovals {
	return &GetServiceApprovals{Context: ctx, Handler: handler}
}

/*GetServiceApprovals swagger:route GET /project/{projectName}/stage/{stageName}/service/{serviceName}/approval Service approval getServiceApprovals

Get all open service approvals

*/
type GetServiceApprovals struct {
	Context *middleware.Context
	Handler GetServiceApprovalsHandler
}

func (o *GetServiceApprovals) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetServiceApprovalsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
