// Code generated by go-swagger; DO NOT EDIT.

package service_approval

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/keptn/keptn/configuration-service/models"
)

// GetServiceApprovalOKCode is the HTTP code returned for type GetServiceApprovalOK
const GetServiceApprovalOKCode int = 200

/*GetServiceApprovalOK Success

swagger:response getServiceApprovalOK
*/
type GetServiceApprovalOK struct {

	/*
	  In: Body
	*/
	Payload *models.Approval `json:"body,omitempty"`
}

// NewGetServiceApprovalOK creates GetServiceApprovalOK with default headers values
func NewGetServiceApprovalOK() *GetServiceApprovalOK {

	return &GetServiceApprovalOK{}
}

// WithPayload adds the payload to the get service approval o k response
func (o *GetServiceApprovalOK) WithPayload(payload *models.Approval) *GetServiceApprovalOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get service approval o k response
func (o *GetServiceApprovalOK) SetPayload(payload *models.Approval) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetServiceApprovalOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetServiceApprovalNotFoundCode is the HTTP code returned for type GetServiceApprovalNotFound
const GetServiceApprovalNotFoundCode int = 404

/*GetServiceApprovalNotFound Failed. Approval could not be found.

swagger:response getServiceApprovalNotFound
*/
type GetServiceApprovalNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetServiceApprovalNotFound creates GetServiceApprovalNotFound with default headers values
func NewGetServiceApprovalNotFound() *GetServiceApprovalNotFound {

	return &GetServiceApprovalNotFound{}
}

// WithPayload adds the payload to the get service approval not found response
func (o *GetServiceApprovalNotFound) WithPayload(payload *models.Error) *GetServiceApprovalNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get service approval not found response
func (o *GetServiceApprovalNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetServiceApprovalNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetServiceApprovalDefault Error

swagger:response getServiceApprovalDefault
*/
type GetServiceApprovalDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetServiceApprovalDefault creates GetServiceApprovalDefault with default headers values
func NewGetServiceApprovalDefault(code int) *GetServiceApprovalDefault {
	if code <= 0 {
		code = 500
	}

	return &GetServiceApprovalDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get service approval default response
func (o *GetServiceApprovalDefault) WithStatusCode(code int) *GetServiceApprovalDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get service approval default response
func (o *GetServiceApprovalDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get service approval default response
func (o *GetServiceApprovalDefault) WithPayload(payload *models.Error) *GetServiceApprovalDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get service approval default response
func (o *GetServiceApprovalDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetServiceApprovalDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
