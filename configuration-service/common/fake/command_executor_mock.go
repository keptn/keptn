// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package common_mock

import (
	"sync"
)

// CommandExecutorMock is a mock implementation of common.CommandExecutor.
//
// 	func TestSomethingThatUsesCommandExecutor(t *testing.T) {
//
// 		// make and configure a mocked common.CommandExecutor
// 		mockedCommandExecutor := &CommandExecutorMock{
// 			ExecuteCommandFunc: func(command string, args []string, directory string) (string, error) {
// 				panic("mock out the ExecuteCommand method")
// 			},
// 		}
//
// 		// use mockedCommandExecutor in code that requires common.CommandExecutor
// 		// and then make assertions.
//
// 	}
type CommandExecutorMock struct {
	// ExecuteCommandFunc mocks the ExecuteCommand method.
	ExecuteCommandFunc func(command string, args []string, directory string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// ExecuteCommand holds details about calls to the ExecuteCommand method.
		ExecuteCommand []struct {
			// Command is the command argument value.
			Command string
			// Args is the args argument value.
			Args []string
			// Directory is the directory argument value.
			Directory string
		}
	}
	lockExecuteCommand sync.RWMutex
}

// ExecuteCommand calls ExecuteCommandFunc.
func (mock *CommandExecutorMock) ExecuteCommand(command string, args []string, directory string) (string, error) {
	if mock.ExecuteCommandFunc == nil {
		panic("CommandExecutorMock.ExecuteCommandFunc: method is nil but CommandExecutor.ExecuteCommand was just called")
	}
	callInfo := struct {
		Command   string
		Args      []string
		Directory string
	}{
		Command:   command,
		Args:      args,
		Directory: directory,
	}
	mock.lockExecuteCommand.Lock()
	mock.calls.ExecuteCommand = append(mock.calls.ExecuteCommand, callInfo)
	mock.lockExecuteCommand.Unlock()
	return mock.ExecuteCommandFunc(command, args, directory)
}

// ExecuteCommandCalls gets all the calls that were made to ExecuteCommand.
// Check the length with:
//     len(mockedCommandExecutor.ExecuteCommandCalls())
func (mock *CommandExecutorMock) ExecuteCommandCalls() []struct {
	Command   string
	Args      []string
	Directory string
} {
	var calls []struct {
		Command   string
		Args      []string
		Directory string
	}
	mock.lockExecuteCommand.RLock()
	calls = mock.calls.ExecuteCommand
	mock.lockExecuteCommand.RUnlock()
	return calls
}
