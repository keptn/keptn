// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/keptn/keptn/helm-service/pkg/configurationchanger (interfaces: IConfigurationChanger)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v0_2_0 "github.com/keptn/go-utils/pkg/lib/v0_2_0"
	configurationchanger "github.com/keptn/keptn/helm-service/pkg/configurationchanger"
	chart "helm.sh/helm/v3/pkg/chart"
)

// MockIConfigurationChanger is a mock of IConfigurationChanger interface.
type MockIConfigurationChanger struct {
	ctrl     *gomock.Controller
	recorder *MockIConfigurationChangerMockRecorder
}

// MockIConfigurationChangerMockRecorder is the mock recorder for MockIConfigurationChanger.
type MockIConfigurationChangerMockRecorder struct {
	mock *MockIConfigurationChanger
}

// NewMockIConfigurationChanger creates a new mock instance.
func NewMockIConfigurationChanger(ctrl *gomock.Controller) *MockIConfigurationChanger {
	mock := &MockIConfigurationChanger{ctrl: ctrl}
	mock.recorder = &MockIConfigurationChangerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConfigurationChanger) EXPECT() *MockIConfigurationChangerMockRecorder {
	return m.recorder
}

// UpdateLoadedChart mocks base method.
func (m *MockIConfigurationChanger) UpdateLoadedChart(arg0 *chart.Chart, arg1 v0_2_0.EventData, arg2 bool, arg3 configurationchanger.ChartManipulator) (*chart.Chart, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoadedChart", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*chart.Chart)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateLoadedChart indicates an expected call of UpdateLoadedChart.
func (mr *MockIConfigurationChangerMockRecorder) UpdateLoadedChart(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadedChart", reflect.TypeOf((*MockIConfigurationChanger)(nil).UpdateLoadedChart), arg0, arg1, arg2, arg3)
}
