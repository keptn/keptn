// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"github.com/keptn/keptn/webhook-service/lib"
	"sync"
)

// Ensure, that ICommandExecutorMock does implement lib.ICommandExecutor.
// If this is not the case, regenerate this file with moq.
var _ lib.ICommandExecutor = &ICommandExecutorMock{}

// ICommandExecutorMock is a mock implementation of lib.ICommandExecutor.
//
// 	func TestSomethingThatUsesICommandExecutor(t *testing.T) {
//
// 		// make and configure a mocked lib.ICommandExecutor
// 		mockedICommandExecutor := &ICommandExecutorMock{
// 			ExecuteCommandFunc: func(cmd string, args ...string) (string, error) {
// 				panic("mock out the ExecuteCommand method")
// 			},
// 		}
//
// 		// use mockedICommandExecutor in code that requires lib.ICommandExecutor
// 		// and then make assertions.
//
// 	}
type ICommandExecutorMock struct {
	// ExecuteCommandFunc mocks the ExecuteCommand method.
	ExecuteCommandFunc func(cmd string, args ...string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// ExecuteCommand holds details about calls to the ExecuteCommand method.
		ExecuteCommand []struct {
			// Cmd is the cmd argument value.
			Cmd string
			// Args is the args argument value.
			Args []string
		}
	}
	lockExecuteCommand sync.RWMutex
}

// ExecuteCommand calls ExecuteCommandFunc.
func (mock *ICommandExecutorMock) ExecuteCommand(cmd string, args ...string) (string, error) {
	if mock.ExecuteCommandFunc == nil {
		panic("ICommandExecutorMock.ExecuteCommandFunc: method is nil but ICommandExecutor.ExecuteCommand was just called")
	}
	callInfo := struct {
		Cmd  string
		Args []string
	}{
		Cmd:  cmd,
		Args: args,
	}
	mock.lockExecuteCommand.Lock()
	mock.calls.ExecuteCommand = append(mock.calls.ExecuteCommand, callInfo)
	mock.lockExecuteCommand.Unlock()
	return mock.ExecuteCommandFunc(cmd, args...)
}

// ExecuteCommandCalls gets all the calls that were made to ExecuteCommand.
// Check the length with:
//     len(mockedICommandExecutor.ExecuteCommandCalls())
func (mock *ICommandExecutorMock) ExecuteCommandCalls() []struct {
	Cmd  string
	Args []string
} {
	var calls []struct {
		Cmd  string
		Args []string
	}
	mock.lockExecuteCommand.RLock()
	calls = mock.calls.ExecuteCommand
	mock.lockExecuteCommand.RUnlock()
	return calls
}
