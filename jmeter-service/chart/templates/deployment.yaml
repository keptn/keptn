apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "jmeter-service.fullname" . }}
  labels:
    {{- include "jmeter-service.labels" . | nindent 4 }}

spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "jmeter-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "jmeter-service.labels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "jmeter-service.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: jmeter-service
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- if .Values.image }}
          image: {{ .Values.image }} # use image from .Values.image (e.g., when starting via skaffold)
          {{- else }}
          image: "{{ .Values.jmeterservice.image.repository }}:{{ .Values.jmeterservice.image.tag | default .Chart.AppVersion }}"
          {{- end }}
          imagePullPolicy: {{ .Values.jmeterservice.image.pullPolicy }}
          ports:
            - containerPort: 80
          env:
          - name: CONFIGURATION_SERVICE
            value: "http://localhost:8081/configuration-service"
          - name: env
            value: 'production'
          - name: LOG_LEVEL
            value: {{ .Values.logLevel | default "info" }}
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 0
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        - name: distributor
          image: "{{ .Values.distributor.image.repository }}:{{ .Values.distributor.image.tag | default .Chart.AppVersion }}"
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sleep","60"]
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 0
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: "16Mi"
              cpu: "25m"
            limits:
              memory: "32Mi"
              cpu: "100m"
          env:
            - name: PUBSUB_TOPIC
              value: 'sh.keptn.event.test.triggered'
            - name: PUBSUB_RECIPIENT
              value: '127.0.0.1'
            - name: STAGE_FILTER
              value: "{{ .Values.distributor.stageFilter }}"
            - name: PROJECT_FILTER
              value: "{{ .Values.distributor.projectFilter }}"
            - name: SERVICE_FILTER
              value: "{{ .Values.distributor.serviceFilter }}"
            - name: VERSION
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/version']
            - name: LOCATION
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: K8S_DEPLOYMENT_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/name']
            - name: K8S_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            {{- if .Values.remoteControlPlane.enabled }}
            - name: KEPTN_API_ENDPOINT
              value: "{{ .Values.remoteControlPlane.api.protocol }}://{{ .Values.remoteControlPlane.api.hostname }}/api"
            - name: KEPTN_API_TOKEN
              value: "{{ .Values.remoteControlPlane.api.token }}"
            - name: HTTP_SSL_VERIFY
              {{- $apiValidateTls := .Values.remoteControlPlane.api.apiValidateTls | ternary "true" "false" }}
              value: "{{ $apiValidateTls }}"
            {{- end }}
            {{- if .Values.distributor.config.queueGroup.enabled }}
            - name: PUBSUB_GROUP
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/name']
            {{- end }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: 90