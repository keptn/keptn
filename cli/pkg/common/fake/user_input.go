// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"github.com/keptn/keptn/cli/pkg/common"
	"sync"
)

// IUserInputMock is a mock implementation of common.IUserInput.
//
// 	func TestSomethingThatUsesIUserInput(t *testing.T) {
//
// 		// make and configure a mocked common.IUserInput
// 		mockedIUserInput := &IUserInputMock{
// 			AskBoolFunc: func(question string, opts *common.UserInputOptions) bool {
// 				panic("mock out the AskBool method")
// 			},
// 		}
//
// 		// use mockedIUserInput in code that requires common.IUserInput
// 		// and then make assertions.
//
// 	}
type IUserInputMock struct {
	// AskBoolFunc mocks the AskBool method.
	AskBoolFunc func(question string, opts *common.UserInputOptions) bool

	// calls tracks calls to the methods.
	calls struct {
		// AskBool holds details about calls to the AskBool method.
		AskBool []struct {
			// Question is the question argument value.
			Question string
			// Opts is the opts argument value.
			Opts *common.UserInputOptions
		}
	}
	lockAskBool sync.RWMutex
}

// AskBool calls AskBoolFunc.
func (mock *IUserInputMock) AskBool(question string, opts *common.UserInputOptions) bool {
	if mock.AskBoolFunc == nil {
		panic("IUserInputMock.AskBoolFunc: method is nil but IUserInput.AskBool was just called")
	}
	callInfo := struct {
		Question string
		Opts     *common.UserInputOptions
	}{
		Question: question,
		Opts:     opts,
	}
	mock.lockAskBool.Lock()
	mock.calls.AskBool = append(mock.calls.AskBool, callInfo)
	mock.lockAskBool.Unlock()
	return mock.AskBoolFunc(question, opts)
}

// AskBoolCalls gets all the calls that were made to AskBool.
// Check the length with:
//     len(mockedIUserInput.AskBoolCalls())
func (mock *IUserInputMock) AskBoolCalls() []struct {
	Question string
	Opts     *common.UserInputOptions
} {
	var calls []struct {
		Question string
		Opts     *common.UserInputOptions
	}
	mock.lockAskBool.RLock()
	calls = mock.calls.AskBool
	mock.lockAskBool.RUnlock()
	return calls
}
