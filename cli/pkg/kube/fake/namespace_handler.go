// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sync"
)

// IKeptnNamespaceHandlerMock is a mock implementation of kube.IKeptnNamespaceHandler.
//
// 	func TestSomethingThatUsesIKeptnNamespaceHandler(t *testing.T) {
//
// 		// make and configure a mocked kube.IKeptnNamespaceHandler
// 		mockedIKeptnNamespaceHandler := &IKeptnNamespaceHandlerMock{
// 			CreateNamespaceFunc: func(useInClusterConfig bool, namespace string, namespaceMetadata ...metav1.ObjectMeta) error {
// 				panic("mock out the CreateNamespace method")
// 			},
// 			ExistsNamespaceFunc: func(useInClusterConfig bool, namespace string) (bool, error) {
// 				panic("mock out the ExistsNamespace method")
// 			},
// 			PatchKeptnManagedNamespaceFunc: func(useInClusterConfig bool, namespace string) error {
// 				panic("mock out the PatchKeptnManagedNamespace method")
// 			},
// 		}
//
// 		// use mockedIKeptnNamespaceHandler in code that requires kube.IKeptnNamespaceHandler
// 		// and then make assertions.
//
// 	}
type IKeptnNamespaceHandlerMock struct {
	// CreateNamespaceFunc mocks the CreateNamespace method.
	CreateNamespaceFunc func(useInClusterConfig bool, namespace string, namespaceMetadata ...metav1.ObjectMeta) error

	// ExistsNamespaceFunc mocks the ExistsNamespace method.
	ExistsNamespaceFunc func(useInClusterConfig bool, namespace string) (bool, error)

	// PatchKeptnManagedNamespaceFunc mocks the PatchKeptnManagedNamespace method.
	PatchKeptnManagedNamespaceFunc func(useInClusterConfig bool, namespace string) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateNamespace holds details about calls to the CreateNamespace method.
		CreateNamespace []struct {
			// UseInClusterConfig is the useInClusterConfig argument value.
			UseInClusterConfig bool
			// Namespace is the namespace argument value.
			Namespace string
			// NamespaceMetadata is the namespaceMetadata argument value.
			NamespaceMetadata []metav1.ObjectMeta
		}
		// ExistsNamespace holds details about calls to the ExistsNamespace method.
		ExistsNamespace []struct {
			// UseInClusterConfig is the useInClusterConfig argument value.
			UseInClusterConfig bool
			// Namespace is the namespace argument value.
			Namespace string
		}
		// PatchKeptnManagedNamespace holds details about calls to the PatchKeptnManagedNamespace method.
		PatchKeptnManagedNamespace []struct {
			// UseInClusterConfig is the useInClusterConfig argument value.
			UseInClusterConfig bool
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
	lockCreateNamespace            sync.RWMutex
	lockExistsNamespace            sync.RWMutex
	lockPatchKeptnManagedNamespace sync.RWMutex
}

// CreateNamespace calls CreateNamespaceFunc.
func (mock *IKeptnNamespaceHandlerMock) CreateNamespace(useInClusterConfig bool, namespace string, namespaceMetadata ...metav1.ObjectMeta) error {
	if mock.CreateNamespaceFunc == nil {
		panic("IKeptnNamespaceHandlerMock.CreateNamespaceFunc: method is nil but IKeptnNamespaceHandler.CreateNamespace was just called")
	}
	callInfo := struct {
		UseInClusterConfig bool
		Namespace          string
		NamespaceMetadata  []metav1.ObjectMeta
	}{
		UseInClusterConfig: useInClusterConfig,
		Namespace:          namespace,
		NamespaceMetadata:  namespaceMetadata,
	}
	mock.lockCreateNamespace.Lock()
	mock.calls.CreateNamespace = append(mock.calls.CreateNamespace, callInfo)
	mock.lockCreateNamespace.Unlock()
	return mock.CreateNamespaceFunc(useInClusterConfig, namespace, namespaceMetadata...)
}

// CreateNamespaceCalls gets all the calls that were made to CreateNamespace.
// Check the length with:
//     len(mockedIKeptnNamespaceHandler.CreateNamespaceCalls())
func (mock *IKeptnNamespaceHandlerMock) CreateNamespaceCalls() []struct {
	UseInClusterConfig bool
	Namespace          string
	NamespaceMetadata  []metav1.ObjectMeta
} {
	var calls []struct {
		UseInClusterConfig bool
		Namespace          string
		NamespaceMetadata  []metav1.ObjectMeta
	}
	mock.lockCreateNamespace.RLock()
	calls = mock.calls.CreateNamespace
	mock.lockCreateNamespace.RUnlock()
	return calls
}

// ExistsNamespace calls ExistsNamespaceFunc.
func (mock *IKeptnNamespaceHandlerMock) ExistsNamespace(useInClusterConfig bool, namespace string) (bool, error) {
	if mock.ExistsNamespaceFunc == nil {
		panic("IKeptnNamespaceHandlerMock.ExistsNamespaceFunc: method is nil but IKeptnNamespaceHandler.ExistsNamespace was just called")
	}
	callInfo := struct {
		UseInClusterConfig bool
		Namespace          string
	}{
		UseInClusterConfig: useInClusterConfig,
		Namespace:          namespace,
	}
	mock.lockExistsNamespace.Lock()
	mock.calls.ExistsNamespace = append(mock.calls.ExistsNamespace, callInfo)
	mock.lockExistsNamespace.Unlock()
	return mock.ExistsNamespaceFunc(useInClusterConfig, namespace)
}

// ExistsNamespaceCalls gets all the calls that were made to ExistsNamespace.
// Check the length with:
//     len(mockedIKeptnNamespaceHandler.ExistsNamespaceCalls())
func (mock *IKeptnNamespaceHandlerMock) ExistsNamespaceCalls() []struct {
	UseInClusterConfig bool
	Namespace          string
} {
	var calls []struct {
		UseInClusterConfig bool
		Namespace          string
	}
	mock.lockExistsNamespace.RLock()
	calls = mock.calls.ExistsNamespace
	mock.lockExistsNamespace.RUnlock()
	return calls
}

// PatchKeptnManagedNamespace calls PatchKeptnManagedNamespaceFunc.
func (mock *IKeptnNamespaceHandlerMock) PatchKeptnManagedNamespace(useInClusterConfig bool, namespace string) error {
	if mock.PatchKeptnManagedNamespaceFunc == nil {
		panic("IKeptnNamespaceHandlerMock.PatchKeptnManagedNamespaceFunc: method is nil but IKeptnNamespaceHandler.PatchKeptnManagedNamespace was just called")
	}
	callInfo := struct {
		UseInClusterConfig bool
		Namespace          string
	}{
		UseInClusterConfig: useInClusterConfig,
		Namespace:          namespace,
	}
	mock.lockPatchKeptnManagedNamespace.Lock()
	mock.calls.PatchKeptnManagedNamespace = append(mock.calls.PatchKeptnManagedNamespace, callInfo)
	mock.lockPatchKeptnManagedNamespace.Unlock()
	return mock.PatchKeptnManagedNamespaceFunc(useInClusterConfig, namespace)
}

// PatchKeptnManagedNamespaceCalls gets all the calls that were made to PatchKeptnManagedNamespace.
// Check the length with:
//     len(mockedIKeptnNamespaceHandler.PatchKeptnManagedNamespaceCalls())
func (mock *IKeptnNamespaceHandlerMock) PatchKeptnManagedNamespaceCalls() []struct {
	UseInClusterConfig bool
	Namespace          string
} {
	var calls []struct {
		UseInClusterConfig bool
		Namespace          string
	}
	mock.lockPatchKeptnManagedNamespace.RLock()
	calls = mock.calls.PatchKeptnManagedNamespace
	mock.lockPatchKeptnManagedNamespace.RUnlock()
	return calls
}
