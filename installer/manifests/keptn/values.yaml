global:
  keptn:
    registry: docker.io/keptn
    tag: ""

continuousDelivery:
  enabled: false
  ingressConfig:
    ingress_hostname_suffix: "svc.cluster.local"
    ingress_protocol: "http"
    ingress_port: "80"
    istio_gateway: "public-gateway.istio-system"

mongo:
  enabled: true
  host: mongodb:27017
  architecture: standalone
  service:
    nameOverride: 'mongo'
    port: 27017
  auth:
    enabled: true
    databases:
      - 'keptn'
    existingSecret: 'mongodb-credentials' # If the password and rootPassword values below are used, remove this field.
    usernames:
      - 'keptn'
    password: null
    rootUser: 'admin'
    rootPassword: null
    bridgeAuthDatabase: 'keptn'
  external:
    connectionString:
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
  serviceAccount:
    automountServiceAccountToken: false
  resources:
    requests:
      cpu: 200m
      memory: 100Mi
    limits:
      cpu: 1000m
      memory: 500Mi

prefixPath: ""

keptnSpecVersion: latest

features:
  automaticProvisioning:
    serviceURL: ""
    message: ""
  swagger:
    hideDeprecated: false
  oauth:
    enabled: false
    prefix: "keptn:"

git:
  remoteURLDenyList: ""

nats:
  nameOverride: keptn-nats
  fullnameOverride: keptn-nats
  cluster:
    enabled: false
    replicas: 3
    name: nats
  securityContext:
    runAsNonRoot: true
    runAsUser: 10001
    fsGroup: 10001
  nats:
    automountServiceAccountToken: false
    resources:
      requests:
        cpu: 200m
        memory: 500Mi
      limits:
        cpu: 500m
        memory: 1Gi
    healthcheck:
      startup:
        enabled: false
    jetstream:
      enabled: true

      memStorage:
        enabled: true
        size: 500Mi

      fileStorage:
        enabled: true
        size: 5Gi
        storageDirectory: /data/
        storageClassName: ""
    securityContext:
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      privileged: false
      runAsNonRoot: true
      runAsUser: 65532
      capabilities:
        drop:
          - ALL

  natsbox:
    enabled: false
  reloader:
    enabled: false
  exporter:
    enabled: false

apiGatewayNginx:
  type: ClusterIP
  port: 80
  targetPort: 8080
  nodePort: 31090
  podSecurityContext:
    enabled: true
    defaultSeccompProfile: true
    fsGroup: 101
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 101
    readOnlyRootFilesystem: false
    allowPrivilegeEscalation: false
    privileged: false
    capabilities:
      drop:
        - ALL
  image:
    registry: "docker.io/nginxinc"           # Container Registry
    repository: "nginx-unprivileged"         # Container Image Name
    tag: "1.22.0-alpine"                     # Container Tag
  nodeSelector: {}
  gracePeriod: 60
  preStopHookTime: 20
  clientMaxBodySize: "5m"
  sidecars: []
  extraVolumeMounts: []
  extraVolumes: []
  resources:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "128Mi"
      cpu: "100m"

remediationService:
  enabled: true
  image:
    registry: ""                             # Container Registry
    repository: "remediation-service"        # Container Image Name
    tag: ""                                  # Container Tag
  nodeSelector: {}
  gracePeriod: 60
  preStopHookTime: 5
  sidecars: []
  extraVolumeMounts: []
  extraVolumes: []
  resources:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "1Gi"
      cpu: "200m"

apiService:
  tokenSecretName:
  image:
    registry: ""                             # Container Registry
    repository: "api"                        # Container Image Name
    tag: ""                                  # Container Tag
  maxAuth:
    enabled: true
    requestsPerSecond: "1.0"
    requestBurst: "2"
  nodeSelector: {}
  gracePeriod: 60
  preStopHookTime: 5
  sidecars: []
  extraVolumeMounts: []
  extraVolumes: []
  resources:
    requests:
      memory: "32Mi"
      cpu: "50m"
    limits:
      memory: "64Mi"
      cpu: "100m"

bridge:
  image:
    registry: ""                             # Container Registry
    repository: "bridge2"                    # Container Image Name
    tag: ""                                  # Container Tag
  cliDownloadLink: null
  secret:
    enabled: true
  versionCheck:
    enabled: true
  showApiToken:
    enabled: true
  installationType: null
  lookAndFeelUrl: null
  podSecurityContext:
    enabled: true
    defaultSeccompProfile: true
    fsGroup: 65532
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 65532
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    privileged: false
    capabilities:
      drop:
        - ALL
  oauth:
    discovery: ""
    secureCookie: false
    trustProxy: ""
    sessionTimeoutMin: ""
    sessionValidatingTimeoutMin: ""
    baseUrl: ""
    clientID: ""
    clientSecret: ""
    IDTokenAlg: ""
    scope: ""
    userIdentifier: ""
    mongoConnectionString: ""
  authMsg: ""
  d3:
    enabled: false
  nodeSelector: {}
  sidecars: []
  extraVolumeMounts: []
  extraVolumes: []
  resources:
    requests:
      memory: "64Mi"
      cpu: "25m"
    limits:
      memory: "256Mi"
      cpu: "200m"

distributor:
  metadata:
    hostname:
    namespace:
  image:
    registry: ""                             # Container Registry
    repository: "distributor"                # Container Image Name
    tag: ""                                  # Container Tag
  config:
    proxy:
      httpTimeout: "30"
      maxPayloadBytesKB: "64"
    queueGroup:
      enabled: true
    oauth:
      clientID: ""
      clientSecret: ""
      discovery: ""
      tokenURL: ""
      scopes: ""
  resources:
    requests:
      memory: "16Mi"
      cpu: "25m"
    limits:
      memory: "32Mi"
      cpu: "100m"

shipyardController:
  image:
    registry: ""                             # Container Registry
    repository: "shipyard-controller"        # Container Image Name
    tag: ""                                  # Container Tag
  config:
    taskStartedWaitDuration: "10m"
    uniformIntegrationTTL: "48h"
    leaderElection:
      enabled: false
    replicas: 1
    validation:
      # On Database level, Keptn creates collections that are named like <PROJECTNAME>-<suffix>
      # Keep in mind that "suffix" can occupy up to 20 characters so that you will eventually
      # hit the database limit for max collection name size when your project name is too long.
      # projectNameMaxSize can be used to forbid project names longer than a certain size in Keptn
      projectNameMaxSize: 200
      # The limit of 43 characters for a service's name is currently imposed by the helm-service,
      # which, if being used for the CD use case with blue/green deployments generates a helm release called <serviceName>-generated,
      # and helm releases have a maximum length of 53 characters. Therefore, we use this value as a default.
      # If the helm chart generation for blue/green deployments is not needed, and this value is too small, it can be adapted here
      serviceNameMaxSize: 43
  nodeSelector: {}
  gracePeriod: 60
  preStopHookTime: 15
  sidecars: []
  extraVolumeMounts: []
  extraVolumes: []
  resources:
    requests:
      memory: "32Mi"
      cpu: "50m"
    limits:
      memory: "128Mi"
      cpu: "100m"

secretService:
  image:
    registry: ""                             # Container Registry
    repository: "secret-service"             # Container Image Name
    tag: ""                                  # Container Tag
  nodeSelector: {}
  gracePeriod: 60
  preStopHookTime: 20
  sidecars: []
  extraVolumeMounts: []
  extraVolumes: []
  resources:
    requests:
      memory: "32Mi"
      cpu: "25m"
    limits:
      memory: "64Mi"
      cpu: "200m"

configurationService:
  image:
    registry: ""                             # Container Registry
    repository: "configuration-service"      # Container Image Name
    tag: ""                                  # Container Tag
  # storage and storageClass are the settings for the PVC used by the configuration-storage
  storage: 100Mi
  storageClass: null
  fsGroup: 1001
  initContainer: true
  env:
    GIT_KEPTN_USER: "keptn"
    GIT_KEPTN_EMAIL: "keptn@keptn.sh"
  nodeSelector: {}
  gracePeriod: 60
  preStopHookTime: 20
  sidecars: []
  extraVolumeMounts: []
  extraVolumes: []
  resources:
    requests:
      memory: "32Mi"
      cpu: "25m"
    limits:
      memory: "256Mi"
      cpu: "100m"

resourceService:
  replicas: 1
  image:
    registry: ""                             # Container Registry
    repository: "resource-service"           # Container Image Name
    tag: ""                                  # Container Tag
  env:
    GIT_KEPTN_USER: "keptn"
    GIT_KEPTN_EMAIL: "keptn@keptn.sh"
    DIRECTORY_STAGE_STRUCTURE: "false"
  nodeSelector: {}
  gracePeriod: 60
  preStopHookTime: 20
  sidecars: []
  extraVolumeMounts: []
  extraVolumes: []
  resources:
    requests:
      memory: "32Mi"
      cpu: "25m"
    limits:
      memory: "64Mi"
      cpu: "100m"

mongodbDatastore:
  image:
    registry: ""                             # Container Registry
    repository: "mongodb-datastore"          # Container Image Name
    tag: ""                                  # Container Tag
  nodeSelector: {}
  gracePeriod: 60
  preStopHookTime: 20
  sidecars: []
  extraVolumeMounts: []
  extraVolumes: []
  resources:
    requests:
      memory: "32Mi"
      cpu: "50m"
    limits:
      memory: "512Mi"
      cpu: "300m"

lighthouseService:
  enabled: true
  image:
    registry: ""                             # Container Registry
    repository: "lighthouse-service"         # Container Image Name
    tag: ""                                  # Container Tag
  nodeSelector: {}
  gracePeriod: 60
  preStopHookTime: 20
  sidecars: []
  extraVolumeMounts: []
  extraVolumes: []
  resources:
    requests:
      memory: "128Mi"
      cpu: "50m"
    limits:
      memory: "1Gi"
      cpu: "200m"

statisticsService:
  enabled: true
  image:
    registry: ""                             # Container Registry
    repository: "statistics-service"         # Container Image Name
    tag: ""                                  # Container Tag
  nodeSelector: {}
  gracePeriod: 60
  preStopHookTime: 20
  sidecars: []
  extraVolumeMounts: []
  extraVolumes: []
  resources:
    requests:
      memory: "32Mi"
      cpu: "25m"
    limits:
      memory: "64Mi"
      cpu: "100m"

approvalService:
  enabled: true
  image:
    registry: ""                             # Container Registry
    repository: "approval-service"           # Container Image Name
    tag: ""                                  # Container Tag
  nodeSelector: {}
  gracePeriod: 60
  preStopHookTime: 5
  sidecars: []
  extraVolumeMounts: []
  extraVolumes: []
  resources:
    requests:
      memory: "32Mi"
      cpu: "25m"
    limits:
      memory: "128Mi"
      cpu: "100m"

webhookService:
  enabled: true
  image:
    registry: ""                             # Container Registry
    repository: "webhook-service"            # Container Image Name
    tag: ""                                  # Container Tag
  nodeSelector: {}
  gracePeriod: 60
  preStopHookTime: 20
  sidecars: []
  extraVolumeMounts: []
  extraVolumes: []
  resources:
    requests:
      memory: "32Mi"
      cpu: "25m"
    limits:
      memory: "64Mi"
      cpu: "100m"

ingress:
  enabled: false
  annotations: {}
  host: {}
  path: /
  pathType: Prefix
  className: ""
  tls:
    []

logLevel: "info"

strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0
podSecurityContext:
  enabled: true
  defaultSeccompProfile: true
  fsGroup: 65532
containerSecurityContext:
  enabled: true
  runAsNonRoot: true
  runAsUser: 65532
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  privileged: false
  capabilities:
    drop:
      - ALL
nodeSelector: {}
