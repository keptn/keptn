apiVersion: v1
kind: Service
metadata:
  name: configuration-service
  labels:
    app.kubernetes.io/name: configuration-service
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
    app.kubernetes.io/component: {{ include "control-plane.name" . }}
    helm.sh/chart: {{ include "control-plane.chart" . }}
spec:
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    {{- if .Values.resourceService.enabled }}
    app.kubernetes.io/name: resource-service
    {{- else }}
    app.kubernetes.io/name: configuration-service
    {{- end }}
    app.kubernetes.io/instance: {{ .Release.Name }}
---
# resource-service
{{- if .Values.resourceService.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: resource-service
  labels:
    app.kubernetes.io/name: resource-service
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
    app.kubernetes.io/component: {{ include "control-plane.name" . }}
    app.kubernetes.io/version: {{ .Values.resourceService.image.tag | default .Chart.AppVersion }}
    helm.sh/chart: {{ include "control-plane.chart" . }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: resource-service
      app.kubernetes.io/instance: {{ .Release.Name }}
  replicas: {{ .Values.resourceService.replicas }}
  {{- include "control-plane.common.update-strategy" . | nindent 2 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: resource-service
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
        app.kubernetes.io/component: {{ include "control-plane.name" . }}
        app.kubernetes.io/version: {{ .Values.resourceService.image.tag | default .Chart.AppVersion }}
        helm.sh/chart: {{ include "control-plane.chart" . }}
    spec:
      securityContext:
        fsGroup: {{ .Values.configurationService.fsGroup | default 1001 }}
        {{- if ge .Capabilities.KubeVersion.Minor "21" }}
        seccompProfile:
          type: RuntimeDefault
        {{- end }}
      terminationGracePeriodSeconds: {{ .Values.resourceService.gracePeriod | default 120 }}
      containers:
        - name: resource-service
          image: {{ .Values.resourceService.image.repository }}:{{ .Values.resourceService.image.tag | default .Chart.AppVersion }}
          {{- $prestop := .Values.resourceService.preStopHookTime | default 90 | quote -}}
          {{- include "control-plane.prestop" $prestop | nindent 10 }}
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
          imagePullPolicy: IfNotPresent
          env:
            - name: PREFIX_PATH
              value: "{{ .Values.prefixPath }}"
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: LOG_LEVEL
              value: {{ .Values.logLevel | default "info" }}
            {{- range $key, $value := .Values.resourceService.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: "32Mi"
              cpu: "25m"
            limits:
              memory: "64Mi"
              cpu: "100m"
          volumeMounts:
            - mountPath: /data/config
              name: resource-volume
          securityContext:
            runAsNonRoot: true
            runAsUser: {{ .Values.configurationService.fsGroup | default 1001 }}
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            privileged: false
      volumes:
        - name: resource-volume
          emptyDir: {}
      serviceAccountName: keptn-configuration-service
      {{- include "keptn.nodeSelector" (dict "value" .Values.resourceService.nodeSelector "default" .Values.common.nodeSelector "indent" 6 "context" . )}}
{{- else }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: configuration-volume
  labels:
    app.kubernetes.io/name: configuration-volume
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
    app.kubernetes.io/component: {{ include "control-plane.name" . }}
    helm.sh/chart: {{ include "control-plane.chart" . }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage:  {{ .Values.configurationService.storage }}
  {{- if .Values.configurationService.storageClass }}
  storageClassName: {{ .Values.configurationService.storageClass }}
  {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: configuration-service
  labels:
    app.kubernetes.io/name: configuration-service
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
    app.kubernetes.io/component: {{ include "control-plane.name" . }}
    app.kubernetes.io/version: {{ .Values.configurationService.image.tag | default .Chart.AppVersion }}
    helm.sh/chart: {{ include "control-plane.chart" . }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: configuration-service
      app.kubernetes.io/instance: {{ .Release.Name }}
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: configuration-service
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
        app.kubernetes.io/component: {{ include "control-plane.name" . }}
        app.kubernetes.io/version: {{ .Values.configurationService.image.tag | default .Chart.AppVersion }}
        helm.sh/chart: {{ include "control-plane.chart" . }}
    spec:
      securityContext:
        fsGroup: {{ .Values.configurationService.fsGroup | default 1001 }}
        {{- if ge .Capabilities.KubeVersion.Minor "21" }}
        seccompProfile:
          type: RuntimeDefault
        {{- end }}
{{- if .Values.configurationService.initContainer }}
      initContainers:
        - name: change-user-init
          image: {{ .Values.configurationService.image.repository }}:{{ .Values.configurationService.image.tag | default .Chart.AppVersion }}
          securityContext:
            runAsUser: 0
          volumeMounts:
            - mountPath: /data/config
              name: configuration-volume
          command:
            - sh
            - -c
            - chown -R {{ .Values.configurationService.fsGroup | default 1001 }} /data/config
{{- end }}
      terminationGracePeriodSeconds: {{ .Values.configurationService.gracePeriod | default 120 }}
      containers:
        - name: configuration-service
          image: {{ .Values.configurationService.image.repository }}:{{ .Values.configurationService.image.tag | default .Chart.AppVersion }}
          {{- $prestop := .Values.configurationService.preStopHookTime | default 90 | quote -}}
          {{- include "control-plane.prestop" $prestop | nindent 10 }}
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
          imagePullPolicy: IfNotPresent
          env:
            - name: PREFIX_PATH
              value: "{{ .Values.prefixPath }}"
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: DATASTORE_URI
              value: mongodb-datastore:8080
            - name: LOG_LEVEL
              value: {{ .Values.logLevel | default "info" }}
            {{- range $key, $value := .Values.configurationService.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: "32Mi"
              cpu: "25m"
            limits:
              memory: "64Mi"
              cpu: "100m"
          volumeMounts:
            - mountPath: /data/config
              name: configuration-volume
          securityContext:
            runAsNonRoot: true
            runAsUser: {{ .Values.configurationService.fsGroup | default 1001 }}
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            privileged: false
      volumes:
        - name: configuration-volume
          persistentVolumeClaim:
            claimName: configuration-volume
      serviceAccountName: keptn-configuration-service
      {{- include "keptn.nodeSelector" (dict "value" .Values.configurationService.nodeSelector "default" .Values.common.nodeSelector "indent" 6 "context" . )}}
{{- end }}
