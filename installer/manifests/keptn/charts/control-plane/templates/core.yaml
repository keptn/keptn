{{- $apiToken := (randAlphaNum 45) | b64enc | quote }}
{{- $apisecret := (lookup "v1" "Secret" .Release.Namespace "keptn-api-token") }}
{{- if $apisecret }}
{{- $apiToken = index $apisecret.data "keptn-api-token" }}
{{- end -}}

{{- $bridgePassword := (randAlphaNum 20) | b64enc | quote }}
{{- $bridgesecret := (lookup "v1" "Secret" .Release.Namespace "bridge-credentials") }}
{{- if $bridgesecret }}
{{- $bridgePassword = index $bridgesecret.data "BASIC_AUTH_PASSWORD" }}
{{- end -}}

---
apiVersion: v1
kind: Secret
metadata:
  name: keptn-api-token
  labels:
    app.kubernetes.io/name: keptn-api-token
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
    app.kubernetes.io/component: {{ include "control-plane.name" . }}
    helm.sh/chart: {{ include "control-plane.chart" . }}
type: Opaque
data:
  keptn-api-token: {{ $apiToken }}
---
{{- if .Values.bridge.secret.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: bridge-credentials
  labels:
    app.kubernetes.io/name: bridge-credentials
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
    app.kubernetes.io/component: {{ include "control-plane.name" . }}
    helm.sh/chart: {{ include "control-plane.chart" . }}
type: Opaque
data:
  BASIC_AUTH_USERNAME: 'a2VwdG4='
  BASIC_AUTH_PASSWORD: {{ $bridgePassword }}
---
{{- end }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-service
  labels:
    app.kubernetes.io/name: api-service
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
    app.kubernetes.io/component: {{ include "control-plane.name" . }}
    app.kubernetes.io/version: {{ .Values.apiService.image.tag | default .Chart.AppVersion }}
    helm.sh/chart: {{ include "control-plane.chart" . }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: api-service
      app.kubernetes.io/instance: {{ .Release.Name }}
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: api-service
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
        app.kubernetes.io/component: {{ include "control-plane.name" . }}
        app.kubernetes.io/version: {{ .Values.apiService.image.tag | default .Chart.AppVersion }}
        helm.sh/chart: {{ include "control-plane.chart" . }}
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: api-service
          image: {{ .Values.apiService.image.repository }}:{{ .Values.apiService.image.tag | default .Chart.AppVersion }}
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: "32Mi"
              cpu: "50m"
            limits:
              memory: "64Mi"
              cpu: "100m"
          env:
            - name: PREFIX_PATH
              value: "{{ .Values.prefixPath }}"
            - name: EVENTBROKER_URI
              value: http://localhost:8081/event
            - name: DATASTORE_URI
              value: mongodb-datastore:8080
            - name: CONFIGURATION_URI
              value: configuration-service:8080
            - name: SECRET_TOKEN
              valueFrom:
                secretKeyRef:
                  name: keptn-api-token
                  key: keptn-api-token
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MAX_AUTH_REQUESTS_PER_SECOND
              value: '{{ .Values.apiService.config.maxAuthRequestsPerSecond | default "1.0"}}'
            - name: MAX_AUTH_REQUESTS_BURST
              value: '{{ .Values.apiService.config.maxAuthRequestBurst | default "2"}}'
            - name: LOG_LEVEL
              value: {{ .Values.logLevel | default "info" }}
          securityContext:
            runAsNonRoot: true
            runAsUser: 65532
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
        - name: distributor
          image: {{ .Values.distributor.image.repository }}:{{ .Values.distributor.image.tag | default .Chart.AppVersion }}
          {{- include "control-plane.dist.livenessProbe" . | nindent 10 }}
          {{- include "control-plane.dist.readinessProbe" . | nindent 10 }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          {{- include "keptn.distributor.resources" . | nindent 10 }}
          env:
            - name: PUBSUB_URL
              value: 'nats://keptn-nats-cluster'
          {{- include "control-plane.dist.common.env.vars" . | nindent 12 }}
          securityContext:
            runAsNonRoot: true
            runAsUser: 65532
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
      serviceAccountName: keptn-api-service
---
apiVersion: v1
kind: Service
metadata:
  name: api-service
  labels:
    app.kubernetes.io/name: api-service
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
    app.kubernetes.io/component: {{ include "control-plane.name" . }}
    helm.sh/chart: {{ include "control-plane.chart" . }}
spec:
  ports:
    - port: 8080
      name: http
      targetPort: 8080
      protocol: TCP
  selector:
    app.kubernetes.io/name: api-service
    app.kubernetes.io/instance: {{ .Release.Name }}
---
# bridge
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bridge
  labels:
    app.kubernetes.io/name: bridge
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
    app.kubernetes.io/component: {{ include "control-plane.name" . }}
    app.kubernetes.io/version: {{ .Values.bridge.image.tag | default .Chart.AppVersion }}
    helm.sh/chart: {{ include "control-plane.chart" . }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: bridge
      app.kubernetes.io/instance: {{ .Release.Name }}
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: bridge
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
        app.kubernetes.io/component: {{ include "control-plane.name" . }}
        app.kubernetes.io/version: {{ .Values.bridge.image.tag | default .Chart.AppVersion }}
        helm.sh/chart: {{ include "control-plane.chart" . }}
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: bridge
          image: {{ .Values.bridge.image.repository }}:{{ .Values.bridge.image.tag | default .Chart.AppVersion }}
          imagePullPolicy: IfNotPresent
          env:
            - name: API_URL
              value: "http://api-gateway-nginx{{ .Values.prefixPath }}/api"
            - name: API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: keptn-api-token
                  key: keptn-api-token
            - name: CLI_DOWNLOAD_LINK
              value: "{{ .Values.bridge.cliDownloadLink | default (print "https://github.com/keptn/keptn/releases/tag/" .Chart.AppVersion) }}"
            - name: INTEGRATIONS_PAGE_LINK
              value: "{{ .Values.bridge.integrationsPageLink | default (print "https://get.keptn.sh/integrations.html") }}"
            - name: ENABLE_VERSION_CHECK
              value: "{{ .Values.bridge.versionCheck.enabled }}"
            - name: SHOW_API_TOKEN
              value: "{{ .Values.bridge.showApiToken.enabled }}"
            - name: KEPTN_INSTALLATION_TYPE
              value: "{{ .Values.bridge.installationType |default (print "QUALITY_GATES,CONTINUOUS_OPERATIONS") }}"
            - name: LOOK_AND_FEEL_URL
              value: "{{ .Values.bridge.lookAndFeelUrl |default (print "") }}"
            - name: PREFIX_PATH
              value: "{{ .Values.prefixPath }}"
            - name: OAUTH_ENABLED
              value: "{{ .Values.bridge.oauth.enabled }}"
            - name: OAUTH_DISCOVERY
              value: "{{ .Values.bridge.oauth.discovery }}"
            - name: SECURE_COOKIE
              value: "{{ .Values.bridge.oauth.secureCookie }}"
            # Session cookie timeout in minutes
            - name: SESSION_TIMEOUT_MIN
              value: "{{ .Values.bridge.oauth.sessionTimeoutMin}}"
            # Correlates to trust proxy number of hops as defined at http://expressjs.com/en/guide/behind-proxies.html
            - name: TRUST_PROXY
              value: "{{ .Values.bridge.oauth.trustProxy }}"
            {{- range $key, $value := .Values.bridge.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          envFrom:
            - secretRef:
                name: bridge-credentials
                optional: true
          ports:
            - containerPort: 3000
          resources:
            requests:
              memory: "64Mi"
              cpu: "25m"
            limits:
              memory: "128Mi"
              cpu: "200m"
          volumeMounts:
            - mountPath: /usr/src/app/dist/assets/branding
              name: assets
          securityContext:
            runAsNonRoot: true
            runAsUser: 65532
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
      serviceAccountName: keptn-default
      volumes:
        - emptyDir: {}
          name: assets

---
apiVersion: v1
kind: Service
metadata:
  name: bridge
  labels:
    app.kubernetes.io/name: bridge
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
    app.kubernetes.io/component: {{ include "control-plane.name" . }}
    helm.sh/chart: {{ include "control-plane.chart" . }}
spec:
  ports:
    - port: 8080
      targetPort: 3000
      protocol: TCP
  selector:
    app.kubernetes.io/name: bridge
    app.kubernetes.io/instance: {{ .Release.Name }}
---
# shipyard-controller
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shipyard-controller
  labels:
    app.kubernetes.io/name: shipyard-controller
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
    app.kubernetes.io/component: {{ include "control-plane.name" . }}
    app.kubernetes.io/version: {{ .Values.shipyardController.image.tag | default .Chart.AppVersion }}
    helm.sh/chart: {{ include "control-plane.chart" . }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: shipyard-controller
      app.kubernetes.io/instance: {{ .Release.Name }}
  replicas: 1
  # recreate the deployment if anything changes (we can not do a rolling upgrade of this deployment as we use a volume)
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: shipyard-controller
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
        app.kubernetes.io/component: {{ include "control-plane.name" . }}
        app.kubernetes.io/version: {{ .Values.shipyardController.image.tag | default .Chart.AppVersion }}
        helm.sh/chart: {{ include "control-plane.chart" . }}
    spec:
      securityContext:
        fsGroup: 65532
      serviceAccountName: keptn-shipyard-controller
      containers:
        - name: shipyard-controller
          image: {{ .Values.shipyardController.image.repository }}:{{ .Values.shipyardController.image.tag | default .Chart.AppVersion }}
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
          imagePullPolicy: IfNotPresent
          env:
            - name: CONFIGURATION_SERVICE
              value: "http://configuration-service:8080"
            - name: EVENTBROKER
              value: http://localhost:8081/event
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MONGODB_HOST
              value: '{{ .Release.Name }}-{{ .Values.mongo.service.nameOverride }}:{{ .Values.mongo.service.port }}'
            - name: MONGODB_USER
              valueFrom:
                secretKeyRef:
                  name: mongodb-credentials
                  key: mongodb-user
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-credentials
                  key: mongodb-password
            - name: MONGODB_DATABASE
              value: {{ .Values.mongo.auth.database | default "keptn" }}
            - name: MONGODB_EXTERNAL_CONNECTION_STRING
              valueFrom:
                secretKeyRef:
                  name: mongodb-credentials
                  key: external_connection_string
                  optional: true
            - name: KEPTN_SPEC_VERSION
              value: {{ .Values.keptnSpecVersion }}
            - name: TASK_STARTED_WAIT_DURATION
              value: {{ .Values.shipyardController.config.taskStartedWaitDuration | default "10m"}}
            - name: UNIFORM_INTEGRATION_TTL
              value: {{ .Values.shipyardController.config.uniformIntegrationTTL | default "2m" }}
            - name: LOG_LEVEL
              value: {{ .Values.logLevel | default "info" }}
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: "32Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
          securityContext:
            runAsNonRoot: true
            runAsUser: 65532
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
        - name: distributor
          image: {{ .Values.distributor.image.repository }}:{{ .Values.distributor.image.tag | default .Chart.AppVersion }}
          {{- include "control-plane.dist.livenessProbe" . | nindent 10 }}
          {{- include "control-plane.dist.readinessProbe" . | nindent 10 }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          {{- include "keptn.distributor.resources" . | nindent 10 }}
          env:
            - name: PUBSUB_URL
              value: 'nats://keptn-nats-cluster'
            - name: PUBSUB_TOPIC
              value: 'sh.keptn.>'
            - name: PUBSUB_RECIPIENT
              value: '127.0.0.1'
            - name: PUBSUB_RECIPIENT_PATH
              value: '/v1/event'
            - name: DISABLE_REGISTRATION
              value: "true"
          securityContext:
            runAsNonRoot: true
            runAsUser: 65532
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
---
apiVersion: v1
kind: Service
metadata:
  name: shipyard-controller
  labels:
    app.kubernetes.io/name: shipyard-controller
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
    app.kubernetes.io/component: {{ include "control-plane.name" . }}
    helm.sh/chart: {{ include "control-plane.chart" . }}
spec:
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app.kubernetes.io/name: shipyard-controller
    app.kubernetes.io/instance: {{ .Release.Name }}
---
# secret-service
apiVersion: v1
kind: ConfigMap
metadata:
  name: secret-service-config
  labels:
    app.kubernetes.io/name: secret-service-config-cm
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
    app.kubernetes.io/component: {{ include "control-plane.name" . }}
    helm.sh/chart: {{ include "control-plane.chart" . }}
data:
  scopes.yaml: |
    Scopes:
      keptn-default:
        Capabilities:
          keptn-secrets-default-read:
            Permissions:
              - get
      keptn-webhook-service:
        Capabilities:
          keptn-webhook-svc-read:
            Permissions:
              - get
      dynatrace-service:
        Capabilities:
          keptn-dynatrace-svc-read:
            Permissions:
              - get
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: secret-service
  labels:
    app.kubernetes.io/name: secret-service
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
    app.kubernetes.io/component: {{ include "control-plane.name" . }}
    app.kubernetes.io/version: {{ .Values.secretService.image.tag | default .Chart.AppVersion }}
    helm.sh/chart: {{ include "control-plane.chart" . }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: secret-service
      app.kubernetes.io/instance: {{ .Release.Name }}
  replicas: 1
  # recreate the deployment if anything changes (we can not do a rolling upgrade of this deployment as we use a volume)
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: secret-service
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
        app.kubernetes.io/component: {{ include "control-plane.name" . }}
        app.kubernetes.io/version: {{ .Values.secretService.image.tag | default .Chart.AppVersion }}
        helm.sh/chart: {{ include "control-plane.chart" . }}
    spec:
      securityContext:
        fsGroup: 65532
      serviceAccountName: keptn-secret-service
      containers:
        - name: secret-service
          image: {{ .Values.secretService.image.repository }}:{{ .Values.secretService.image.tag | default .Chart.AppVersion }}
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /v1/secret
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
          imagePullPolicy: IfNotPresent
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: LOG_LEVEL
              value: {{ .Values.logLevel | default "info" }}
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: "32Mi"
              cpu: "25m"
            limits:
              memory: "64Mi"
              cpu: "200m"
          volumeMounts:
            - mountPath: /data
              name: secret-service-configmap-volume
          securityContext:
            runAsNonRoot: true
            runAsUser: 65532
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
      volumes:
        - name: secret-service-configmap-volume
          configMap:
            name: secret-service-config
---
apiVersion: v1
kind: Service
metadata:
  name: secret-service
  labels:
    app.kubernetes.io/name: secret-service
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
    app.kubernetes.io/component: {{ include "control-plane.name" . }}
    helm.sh/chart: {{ include "control-plane.chart" . }}
spec:
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app.kubernetes.io/name: secret-service
    app.kubernetes.io/instance: {{ .Release.Name }}
---
# configuration-service
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: configuration-volume
  labels:
    app.kubernetes.io/name: configuration-volume
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
    app.kubernetes.io/component: {{ include "control-plane.name" . }}
    helm.sh/chart: {{ include "control-plane.chart" . }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage:  {{ .Values.configurationService.storage }}
  {{- if .Values.configurationService.storageClass }}
  storageClassName: {{ .Values.configurationService.storageClass }}
  {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: configuration-service
  labels:
    app.kubernetes.io/name: configuration-service
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
    app.kubernetes.io/component: {{ include "control-plane.name" . }}
    app.kubernetes.io/version: {{ .Values.configurationService.image.tag | default .Chart.AppVersion }}
    helm.sh/chart: {{ include "control-plane.chart" . }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: configuration-service
      app.kubernetes.io/instance: {{ .Release.Name }}
  replicas: 1
  # recreate the deployment if anything changes (we can not do a rolling upgrade of this deployment as we use a volume)
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: configuration-service
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
        app.kubernetes.io/component: {{ include "control-plane.name" . }}
        app.kubernetes.io/version: {{ .Values.configurationService.image.tag | default .Chart.AppVersion }}
        helm.sh/chart: {{ include "control-plane.chart" . }}
    spec:
      securityContext:
        fsGroup: {{ .Values.configurationService.fsGroup | default 1001 }}
      containers:
        - name: configuration-service
          image: {{ .Values.configurationService.image.repository }}:{{ .Values.configurationService.image.tag | default .Chart.AppVersion }}
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
          imagePullPolicy: IfNotPresent
          env:
            - name: PREFIX_PATH
              value: "{{ .Values.prefixPath }}"
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: DATASTORE_URI
              value: mongodb-datastore:8080
            - name: LOG_LEVEL
              value: {{ .Values.logLevel | default "info" }}
            {{- range $key, $value := .Values.configurationService.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: "32Mi"
              cpu: "25m"
            limits:
              memory: "64Mi"
              cpu: "100m"
          volumeMounts:
            - mountPath: /data/config
              name: configuration-volume
          securityContext:
            runAsNonRoot: true
            runAsUser: {{ .Values.configurationService.fsGroup | default 1001 }}
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
      volumes:
        - name: configuration-volume
          persistentVolumeClaim:
            claimName: configuration-volume
      serviceAccountName: keptn-configuration-service
---
apiVersion: v1
kind: Service
metadata:
  name: configuration-service
  labels:
    app.kubernetes.io/name: configuration-service
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
    app.kubernetes.io/component: {{ include "control-plane.name" . }}
    helm.sh/chart: {{ include "control-plane.chart" . }}
spec:
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app.kubernetes.io/name: configuration-service
    app.kubernetes.io/instance: {{ .Release.Name }}
---
# statistics-service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: statistics-service
  labels:
    app.kubernetes.io/name: statistics-service
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
    app.kubernetes.io/component: {{ include "control-plane.name" . }}
    app.kubernetes.io/version: {{ .Values.statisticsService.image.tag | default .Chart.AppVersion }}
    helm.sh/chart: {{ include "control-plane.chart" . }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: statistics-service
      app.kubernetes.io/instance: {{ .Release.Name }}
  replicas: 1
  # recreate the deployment if anything changes (we can not do a rolling upgrade of this deployment as we use a volume)
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: statistics-service
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
        app.kubernetes.io/component: {{ include "control-plane.name" . }}
        app.kubernetes.io/version: {{ .Values.statisticsService.image.tag | default .Chart.AppVersion }}
        helm.sh/chart: {{ include "control-plane.chart" . }}
    spec:
      securityContext:
        fsGroup: 65532
      serviceAccountName: keptn-default
      containers:
        - name: statistics-service
          image: {{ .Values.statisticsService.image.repository }}:{{ .Values.statisticsService.image.tag | default .Chart.AppVersion }}
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
          imagePullPolicy: IfNotPresent
          env:
            - name: AGGREGATION_INTERVAL_SECONDS
              value: '1800'
            - name: NEXT_GEN_EVENTS
              value: 'true'
            - name: MONGODB_HOST
              value: '{{ .Release.Name }}-{{ .Values.mongo.service.nameOverride }}:{{ .Values.mongo.service.port }}'
            - name: MONGODB_USER
              valueFrom:
                secretKeyRef:
                  name: mongodb-credentials
                  key: mongodb-user
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-credentials
                  key: mongodb-password
            - name: MONGODB_DATABASE
              value: {{ .Values.mongo.auth.database | default "keptn" }}
            - name: MONGODB_EXTERNAL_CONNECTION_STRING
              valueFrom:
                secretKeyRef:
                  name: mongodb-credentials
                  key: external_connection_string
                  optional: true
            - name: LOG_LEVEL
              value: {{ .Values.logLevel | default "info" }}
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: "32Mi"
              cpu: "25m"
            limits:
              memory: "64Mi"
              cpu: "100m"
          securityContext:
            runAsNonRoot: true
            runAsUser: 65532
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
        - name: distributor
          image: {{ .Values.distributor.image.repository }}:{{ .Values.distributor.image.tag | default .Chart.AppVersion }}
          {{- include "control-plane.dist.livenessProbe" . | nindent 10 }}
          {{- include "control-plane.dist.readinessProbe" . | nindent 10 }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          {{- include "keptn.distributor.resources" . | nindent 10 }}
          env:
            - name: PUBSUB_URL
              value: 'nats://keptn-nats-cluster'
            - name: PUBSUB_TOPIC
              value: 'sh.keptn.>'
            - name: PUBSUB_RECIPIENT
              value: '127.0.0.1'
            - name: PUBSUB_RECIPIENT_PATH
              value: '/v1/event'
          {{- include "control-plane.dist.common.env.vars" . | nindent 12 }}
          securityContext:
            runAsNonRoot: true
            runAsUser: 65532
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
---
apiVersion: v1
kind: Service
metadata:
  name: statistics-service
  labels:
    app.kubernetes.io/name: statistics-service
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
    app.kubernetes.io/component: {{ include "control-plane.name" . }}
    helm.sh/chart: {{ include "control-plane.chart" . }}
spec:
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app.kubernetes.io/name: statistics-service
    app.kubernetes.io/instance: {{ .Release.Name }}
---
# approval-service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: approval-service
  labels:
    app.kubernetes.io/name: approval-service
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
    app.kubernetes.io/component: {{ include "control-plane.name" . }}
    app.kubernetes.io/version: {{ .Values.approvalService.image.tag | default .Chart.AppVersion }}
    helm.sh/chart: {{ include "control-plane.chart" . }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: approval-service
      app.kubernetes.io/instance: {{ .Release.Name }}
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: approval-service
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
        app.kubernetes.io/component: {{ include "control-plane.name" . }}
        app.kubernetes.io/version: {{ .Values.approvalService.image.tag | default .Chart.AppVersion }}
        helm.sh/chart: {{ include "control-plane.chart" . }}
    spec:
      securityContext:
        fsGroup: 65532
      serviceAccountName: keptn-default
      containers:
        - name: approval-service
          image: {{ .Values.approvalService.image.repository }}:{{ .Values.approvalService.image.tag | default .Chart.AppVersion }}
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: "32Mi"
              cpu: "25m"
            limits:
              memory: "128Mi"
              cpu: "100m"
          env:
            - name: CONFIGURATION_SERVICE
              value: 'http://configuration-service:8080'
            - name: EVENTBROKER
              value: 'http://localhost:8081/event'
            - name: LOG_LEVEL
              value: {{ .Values.logLevel | default "info" }}
          securityContext:
            runAsNonRoot: true
            runAsUser: 65532
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
        - name: distributor
          image: {{ .Values.distributor.image.repository }}:{{ .Values.distributor.image.tag | default .Chart.AppVersion }}
          {{- include "control-plane.dist.livenessProbe" . | nindent 10 }}
          {{- include "control-plane.dist.readinessProbe" . | nindent 10 }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          {{- include "keptn.distributor.resources" . | nindent 10 }}
          env:
            - name: PUBSUB_URL
              value: 'nats://keptn-nats-cluster'
            - name: PUBSUB_TOPIC
              value: 'sh.keptn.event.approval.>'
            - name: PUBSUB_RECIPIENT
              value: '127.0.0.1'
          {{- include "control-plane.dist.common.env.vars" . | nindent 12 }}
          securityContext:
            runAsNonRoot: true
            runAsUser: 65532
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
---
apiVersion: v1
kind: Service
metadata:
  name: approval-service
  labels:
    app.kubernetes.io/name: approval-service
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
    app.kubernetes.io/component: {{ include "control-plane.name" . }}
    helm.sh/chart: {{ include "control-plane.chart" . }}
spec:
  ports:
    - port: 8080
      protocol: TCP
  selector:
    app.kubernetes.io/name: approval-service
    app.kubernetes.io/instance: {{ .Release.Name }}

{{- if .Values.webhookService.enabled }}
---
# webhook-service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webhook-service
  labels:
    app.kubernetes.io/name: webhook-service
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
    app.kubernetes.io/component: {{ include "control-plane.name" . }}
    app.kubernetes.io/version: {{ .Values.webhookService.image.tag | default .Chart.AppVersion }}
    helm.sh/chart: {{ include "control-plane.chart" . }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: webhook-service
      app.kubernetes.io/instance: {{ .Release.Name }}
  replicas: 1
  # recreate the deployment if anything changes (we can not do a rolling upgrade of this deployment as we use a volume)
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: webhook-service
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
        app.kubernetes.io/component: {{ include "control-plane.name" . }}
        app.kubernetes.io/version: {{ .Values.webhookService.image.tag | default .Chart.AppVersion }}
        helm.sh/chart: {{ include "control-plane.chart" . }}
    spec:
      securityContext:
        fsGroup: 65532
      serviceAccountName: keptn-webhook-service
      containers:
        - name: webhook-service
          image: {{ .Values.webhookService.image.repository }}:{{ .Values.webhookService.image.tag | default .Chart.AppVersion }}
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: "32Mi"
              cpu: "25m"
            limits:
              memory: "64Mi"
              cpu: "100m"
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: LOG_LEVEL
            value: {{ .Values.logLevel | default "info" }}
          securityContext:
            runAsNonRoot: true
            runAsUser: 65532
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
        - name: distributor
          image: {{ .Values.distributor.image.repository }}:{{ .Values.distributor.image.tag | default .Chart.AppVersion }}
          {{- include "control-plane.dist.livenessProbe" . | nindent 10 }}
          {{- include "control-plane.dist.readinessProbe" . | nindent 10 }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          {{- include "keptn.distributor.resources" . | nindent 10 }}
          env:
            - name: PUBSUB_URL
              value: 'nats://keptn-nats-cluster'
            - name: PUBSUB_TOPIC
              value: ''
            - name: PUBSUB_RECIPIENT
              value: '127.0.0.1'
            - name: PUBSUB_RECIPIENT_PATH
              value: '/v1/event'
          {{- include "control-plane.dist.common.env.vars" . | nindent 12 }}
          securityContext:
            runAsNonRoot: true
            runAsUser: 65532
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
---
apiVersion: v1
kind: Service
metadata:
  name: webhook-service
  labels:
    app.kubernetes.io/name: webhook-service
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
    app.kubernetes.io/component: {{ include "control-plane.name" . }}
    helm.sh/chart: {{ include "control-plane.chart" . }}
spec:
  ports:
    - port: 8080
      protocol: TCP
  selector:
    app.kubernetes.io/name: webhook-service
    app.kubernetes.io/instance: {{ .Release.Name }}
{{- end }}
