---
# lighthouse-service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lighthouse-service
  labels:
    app.kubernetes.io/name: lighthouse-service
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
    app.kubernetes.io/component: {{ include "control-plane.name" . }}
    app.kubernetes.io/version: {{ .Values.lighthouseService.image.tag | default .Chart.AppVersion }}
    helm.sh/chart: {{ include "control-plane.chart" . }} 
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: lighthouse-service
      app.kubernetes.io/instance: {{ .Release.Name }}
  replicas: 1
  template:
    metadata:
      labels:        
        app.kubernetes.io/name: lighthouse-service
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
        app.kubernetes.io/component: {{ include "control-plane.name" . }}
        app.kubernetes.io/version: {{ .Values.lighthouseService.image.tag | default .Chart.AppVersion }}
        helm.sh/chart: {{ include "control-plane.chart" . }}         
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: lighthouse-service
          image: {{ .Values.lighthouseService.image.repository }}:{{ .Values.lighthouseService.image.tag | default .Chart.AppVersion }}
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: "128Mi"
              cpu: "50m"
            limits:
              memory: "1Gi"
              cpu: "200m"
          env:
            - name: EVENTBROKER
              value: 'http://localhost:8081/event'
            - name: CONFIGURATION_SERVICE
              value: 'http://configuration-service:8080'
            - name: MONGODB_DATASTORE
              value: 'mongodb-datastore:8080'
            - name: ENVIRONMENT
              value: 'production'
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: LOG_LEVEL
              value: {{ .Values.logLevel | default "info" }}
          securityContext:
            runAsNonRoot: true
            runAsUser: 65532
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
        - name: distributor
          image: {{ .Values.distributor.image.repository }}:{{ .Values.distributor.image.tag | default .Chart.AppVersion }}
          {{- include "control-plane.dist.livenessProbe" . | nindent 10 }}
          {{- include "control-plane.dist.readinessProbe" . | nindent 10 }}
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - sleep 30
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          {{- include "keptn.distributor.resources" . | nindent 10 }}
          env:
            - name: PUBSUB_URL
              value: 'nats://keptn-nats-cluster'
            - name: PUBSUB_TOPIC
              value: 'sh.keptn.event.evaluation.triggered,sh.keptn.event.get-sli.finished,sh.keptn.event.monitoring.configure'
            - name: PUBSUB_RECIPIENT
              value: '127.0.0.1'
          {{- include "control-plane.dist.common.env.vars" . | nindent 12 }}
          securityContext:
            runAsNonRoot: true
            runAsUser: 65532
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
      terminationGracePeriodSeconds: 60
      serviceAccountName: keptn-lighthouse-service
---
apiVersion: v1
kind: Service
metadata:
  name: lighthouse-service
  labels:
    app.kubernetes.io/name: lighthouse-service
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: keptn-{{ .Release.Namespace }}
    app.kubernetes.io/component: {{ include "control-plane.name" . }}    
    helm.sh/chart: {{ include "control-plane.chart" . }} 
spec:
  ports:
    - port: 8080
      protocol: TCP
  selector:
    app.kubernetes.io/name: lighthouse-service
    app.kubernetes.io/instance: {{ .Release.Name }}
