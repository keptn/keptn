// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"sync"
)

// ProjectCheckerMock is a mock implementation of handler.projectChecker.
//
// 	func TestSomethingThatUsesprojectChecker(t *testing.T) {
//
// 		// make and configure a mocked handler.projectChecker
// 		mockedprojectChecker := &ProjectCheckerMock{
// 			ProjectExistsFunc: func(projectName string) (bool, error) {
// 				panic("mock out the ProjectExists method")
// 			},
// 		}
//
// 		// use mockedprojectChecker in code that requires handler.projectChecker
// 		// and then make assertions.
//
// 	}
type ProjectCheckerMock struct {
	// ProjectExistsFunc mocks the ProjectExists method.
	ProjectExistsFunc func(projectName string) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// ProjectExists holds details about calls to the ProjectExists method.
		ProjectExists []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
		}
	}
	lockProjectExists sync.RWMutex
}

// ProjectExists calls ProjectExistsFunc.
func (mock *ProjectCheckerMock) ProjectExists(projectName string) (bool, error) {
	if mock.ProjectExistsFunc == nil {
		panic("ProjectCheckerMock.ProjectExistsFunc: method is nil but projectChecker.ProjectExists was just called")
	}
	callInfo := struct {
		ProjectName string
	}{
		ProjectName: projectName,
	}
	mock.lockProjectExists.Lock()
	mock.calls.ProjectExists = append(mock.calls.ProjectExists, callInfo)
	mock.lockProjectExists.Unlock()
	return mock.ProjectExistsFunc(projectName)
}

// ProjectExistsCalls gets all the calls that were made to ProjectExists.
// Check the length with:
//     len(mockedprojectChecker.ProjectExistsCalls())
func (mock *ProjectCheckerMock) ProjectExistsCalls() []struct {
	ProjectName string
} {
	var calls []struct {
		ProjectName string
	}
	mock.lockProjectExists.RLock()
	calls = mock.calls.ProjectExists
	mock.lockProjectExists.RUnlock()
	return calls
}
