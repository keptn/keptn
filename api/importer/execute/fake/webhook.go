// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"sync"
)

// MockIntegrationIdRetriever is a mock implementation of execute.integrationIdRetriever.
//
// 	func TestSomethingThatUsesintegrationIdRetriever(t *testing.T) {
//
// 		// make and configure a mocked execute.integrationIdRetriever
// 		mockedintegrationIdRetriever := &MockIntegrationIdRetriever{
// 			GetIntegrationIDsByNameFunc: func(name string) ([]string, error) {
// 				panic("mock out the GetIntegrationIDsByName method")
// 			},
// 		}
//
// 		// use mockedintegrationIdRetriever in code that requires execute.integrationIdRetriever
// 		// and then make assertions.
//
// 	}
type MockIntegrationIdRetriever struct {
	// GetIntegrationIDsByNameFunc mocks the GetIntegrationIDsByName method.
	GetIntegrationIDsByNameFunc func(name string) ([]string, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetIntegrationIDsByName holds details about calls to the GetIntegrationIDsByName method.
		GetIntegrationIDsByName []struct {
			// Name is the name argument value.
			Name string
		}
	}
	lockGetIntegrationIDsByName sync.RWMutex
}

// GetIntegrationIDsByName calls GetIntegrationIDsByNameFunc.
func (mock *MockIntegrationIdRetriever) GetIntegrationIDsByName(name string) ([]string, error) {
	if mock.GetIntegrationIDsByNameFunc == nil {
		panic("MockIntegrationIdRetriever.GetIntegrationIDsByNameFunc: method is nil but integrationIdRetriever.GetIntegrationIDsByName was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockGetIntegrationIDsByName.Lock()
	mock.calls.GetIntegrationIDsByName = append(mock.calls.GetIntegrationIDsByName, callInfo)
	mock.lockGetIntegrationIDsByName.Unlock()
	return mock.GetIntegrationIDsByNameFunc(name)
}

// GetIntegrationIDsByNameCalls gets all the calls that were made to GetIntegrationIDsByName.
// Check the length with:
//     len(mockedintegrationIdRetriever.GetIntegrationIDsByNameCalls())
func (mock *MockIntegrationIdRetriever) GetIntegrationIDsByNameCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockGetIntegrationIDsByName.RLock()
	calls = mock.calls.GetIntegrationIDsByName
	mock.lockGetIntegrationIDsByName.RUnlock()
	return calls
}
