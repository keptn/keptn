// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handlers_mock

import (
	apimodels "github.com/keptn/go-utils/pkg/api/models"
	"sync"
)

// eventPublisherMock is a mock implementation of handlers.eventPublisher.
//
// 	func TestSomethingThatUseseventPublisher(t *testing.T) {
//
// 		// make and configure a mocked handlers.eventPublisher
// 		mockedeventPublisher := &eventPublisherMock{
// 			PublishFunc: func(event apimodels.KeptnContextExtendedCE) error {
// 				panic("mock out the Publish method")
// 			},
// 		}
//
// 		// use mockedeventPublisher in code that requires handlers.eventPublisher
// 		// and then make assertions.
//
// 	}
type eventPublisherMock struct {
	// PublishFunc mocks the Publish method.
	PublishFunc func(event apimodels.KeptnContextExtendedCE) error

	// calls tracks calls to the methods.
	calls struct {
		// Publish holds details about calls to the Publish method.
		Publish []struct {
			// Event is the event argument value.
			Event apimodels.KeptnContextExtendedCE
		}
	}
	lockPublish sync.RWMutex
}

// Publish calls PublishFunc.
func (mock *eventPublisherMock) Publish(event apimodels.KeptnContextExtendedCE) error {
	if mock.PublishFunc == nil {
		panic("eventPublisherMock.PublishFunc: method is nil but eventPublisher.Publish was just called")
	}
	callInfo := struct {
		Event apimodels.KeptnContextExtendedCE
	}{
		Event: event,
	}
	mock.lockPublish.Lock()
	mock.calls.Publish = append(mock.calls.Publish, callInfo)
	mock.lockPublish.Unlock()
	return mock.PublishFunc(event)
}

// PublishCalls gets all the calls that were made to Publish.
// Check the length with:
//     len(mockedeventPublisher.PublishCalls())
func (mock *eventPublisherMock) PublishCalls() []struct {
	Event apimodels.KeptnContextExtendedCE
} {
	var calls []struct {
		Event apimodels.KeptnContextExtendedCE
	}
	mock.lockPublish.RLock()
	calls = mock.calls.Publish
	mock.lockPublish.RUnlock()
	return calls
}
