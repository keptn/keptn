// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handlers_mock

import (
	"github.com/keptn/keptn/api/importer"
	"sync"
)

// ProjectCheckerMock is a mock implementation of handlers.projectChecker.
//
// 	func TestSomethingThatUsesprojectChecker(t *testing.T) {
//
// 		// make and configure a mocked handlers.projectChecker
// 		mockedprojectChecker := &ProjectCheckerMock{
// 			ProjectExistsFunc: func(projectName string) (bool, error) {
// 				panic("mock out the ProjectExists method")
// 			},
// 		}
//
// 		// use mockedprojectChecker in code that requires handlers.projectChecker
// 		// and then make assertions.
//
// 	}
type ProjectCheckerMock struct {
	// ProjectExistsFunc mocks the ProjectExists method.
	ProjectExistsFunc func(projectName string) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// ProjectExists holds details about calls to the ProjectExists method.
		ProjectExists []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
		}
	}
	lockProjectExists sync.RWMutex
}

// ProjectExists calls ProjectExistsFunc.
func (mock *ProjectCheckerMock) ProjectExists(projectName string) (bool, error) {
	if mock.ProjectExistsFunc == nil {
		panic("ProjectCheckerMock.ProjectExistsFunc: method is nil but projectChecker.ProjectExists was just called")
	}
	callInfo := struct {
		ProjectName string
	}{
		ProjectName: projectName,
	}
	mock.lockProjectExists.Lock()
	mock.calls.ProjectExists = append(mock.calls.ProjectExists, callInfo)
	mock.lockProjectExists.Unlock()
	return mock.ProjectExistsFunc(projectName)
}

// ProjectExistsCalls gets all the calls that were made to ProjectExists.
// Check the length with:
//     len(mockedprojectChecker.ProjectExistsCalls())
func (mock *ProjectCheckerMock) ProjectExistsCalls() []struct {
	ProjectName string
} {
	var calls []struct {
		ProjectName string
	}
	mock.lockProjectExists.RLock()
	calls = mock.calls.ProjectExists
	mock.lockProjectExists.RUnlock()
	return calls
}

// MockImportPackageProcessor is a mock implementation of handlers.importPackageProcessor.
//
// 	func TestSomethingThatUsesimportPackageProcessor(t *testing.T) {
//
// 		// make and configure a mocked handlers.importPackageProcessor
// 		mockedimportPackageProcessor := &MockImportPackageProcessor{
// 			ProcessFunc: func(project string, ip importer.ImportPackage) error {
// 				panic("mock out the Process method")
// 			},
// 		}
//
// 		// use mockedimportPackageProcessor in code that requires handlers.importPackageProcessor
// 		// and then make assertions.
//
// 	}
type MockImportPackageProcessor struct {
	// ProcessFunc mocks the Process method.
	ProcessFunc func(project string, ip importer.ImportPackage) error

	// calls tracks calls to the methods.
	calls struct {
		// Process holds details about calls to the Process method.
		Process []struct {
			// Project is the project argument value.
			Project string
			// IP is the ip argument value.
			IP importer.ImportPackage
		}
	}
	lockProcess sync.RWMutex
}

// Process calls ProcessFunc.
func (mock *MockImportPackageProcessor) Process(project string, ip importer.ImportPackage) error {
	if mock.ProcessFunc == nil {
		panic("MockImportPackageProcessor.ProcessFunc: method is nil but importPackageProcessor.Process was just called")
	}
	callInfo := struct {
		Project string
		IP      importer.ImportPackage
	}{
		Project: project,
		IP:      ip,
	}
	mock.lockProcess.Lock()
	mock.calls.Process = append(mock.calls.Process, callInfo)
	mock.lockProcess.Unlock()
	return mock.ProcessFunc(project, ip)
}

// ProcessCalls gets all the calls that were made to Process.
// Check the length with:
//     len(mockedimportPackageProcessor.ProcessCalls())
func (mock *MockImportPackageProcessor) ProcessCalls() []struct {
	Project string
	IP      importer.ImportPackage
} {
	var calls []struct {
		Project string
		IP      importer.ImportPackage
	}
	mock.lockProcess.RLock()
	calls = mock.calls.Process
	mock.lockProcess.RUnlock()
	return calls
}
