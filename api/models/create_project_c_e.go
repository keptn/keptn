// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateProjectCE create project c e
// swagger:model CreateProjectCE
type CreateProjectCE struct {

	// contenttype
	Contenttype string `json:"contenttype,omitempty"`

	// extensions
	Extensions interface{} `json:"extensions,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// shkeptncontext
	// Required: true
	Shkeptncontext *string `json:"shkeptncontext"`

	// source
	// Required: true
	Source *string `json:"source"`

	// specversion
	// Required: true
	Specversion *string `json:"specversion"`

	// time
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// type
	// Required: true
	Type *string `json:"type"`

	// data
	Data *CreateProjectCEAO1Data `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CreateProjectCE) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Contenttype string `json:"contenttype,omitempty"`

		Extensions interface{} `json:"extensions,omitempty"`

		ID *string `json:"id"`

		Shkeptncontext *string `json:"shkeptncontext"`

		Source *string `json:"source"`

		Specversion *string `json:"specversion"`

		Time strfmt.DateTime `json:"time,omitempty"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Contenttype = dataAO0.Contenttype

	m.Extensions = dataAO0.Extensions

	m.ID = dataAO0.ID

	m.Shkeptncontext = dataAO0.Shkeptncontext

	m.Source = dataAO0.Source

	m.Specversion = dataAO0.Specversion

	m.Time = dataAO0.Time

	m.Type = dataAO0.Type

	// AO1
	var dataAO1 struct {
		Data *CreateProjectCEAO1Data `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Data = dataAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CreateProjectCE) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		Contenttype string `json:"contenttype,omitempty"`

		Extensions interface{} `json:"extensions,omitempty"`

		ID *string `json:"id"`

		Shkeptncontext *string `json:"shkeptncontext"`

		Source *string `json:"source"`

		Specversion *string `json:"specversion"`

		Time strfmt.DateTime `json:"time,omitempty"`

		Type *string `json:"type"`
	}

	dataAO0.Contenttype = m.Contenttype

	dataAO0.Extensions = m.Extensions

	dataAO0.ID = m.ID

	dataAO0.Shkeptncontext = m.Shkeptncontext

	dataAO0.Source = m.Source

	dataAO0.Specversion = m.Specversion

	dataAO0.Time = m.Time

	dataAO0.Type = m.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	var dataAO1 struct {
		Data *CreateProjectCEAO1Data `json:"data,omitempty"`
	}

	dataAO1.Data = m.Data

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this create project c e
func (m *CreateProjectCE) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShkeptncontext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpecversion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateProjectCE) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *CreateProjectCE) validateShkeptncontext(formats strfmt.Registry) error {

	if err := validate.Required("shkeptncontext", "body", m.Shkeptncontext); err != nil {
		return err
	}

	return nil
}

func (m *CreateProjectCE) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

func (m *CreateProjectCE) validateSpecversion(formats strfmt.Registry) error {

	if err := validate.Required("specversion", "body", m.Specversion); err != nil {
		return err
	}

	return nil
}

func (m *CreateProjectCE) validateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("time", "body", "date-time", m.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateProjectCE) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *CreateProjectCE) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateProjectCE) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateProjectCE) UnmarshalBinary(b []byte) error {
	var res CreateProjectCE
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CreateProjectCEAO1Data create project c e a o1 data
// swagger:model CreateProjectCEAO1Data
type CreateProjectCEAO1Data struct {

	// project
	// Required: true
	Project *string `json:"project"`

	// stages
	// Required: true
	Stages []*CreateProjectCEAO1DataStagesItems0 `json:"stages"`
}

// Validate validates this create project c e a o1 data
func (m *CreateProjectCEAO1Data) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateProjectCEAO1Data) validateProject(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"project", "body", m.Project); err != nil {
		return err
	}

	return nil
}

func (m *CreateProjectCEAO1Data) validateStages(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"stages", "body", m.Stages); err != nil {
		return err
	}

	for i := 0; i < len(m.Stages); i++ {
		if swag.IsZero(m.Stages[i]) { // not required
			continue
		}

		if m.Stages[i] != nil {
			if err := m.Stages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + "stages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateProjectCEAO1Data) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateProjectCEAO1Data) UnmarshalBinary(b []byte) error {
	var res CreateProjectCEAO1Data
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CreateProjectCEAO1DataStagesItems0 create project c e a o1 data stages items0
// swagger:model CreateProjectCEAO1DataStagesItems0
type CreateProjectCEAO1DataStagesItems0 struct {

	// deployment strategy
	// Required: true
	DeploymentStrategy *string `json:"deployment_strategy"`

	// name
	// Required: true
	Name *string `json:"name"`

	// test strategy
	TestStrategy string `json:"test_strategy,omitempty"`
}

// Validate validates this create project c e a o1 data stages items0
func (m *CreateProjectCEAO1DataStagesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeploymentStrategy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateProjectCEAO1DataStagesItems0) validateDeploymentStrategy(formats strfmt.Registry) error {

	if err := validate.Required("deployment_strategy", "body", m.DeploymentStrategy); err != nil {
		return err
	}

	return nil
}

func (m *CreateProjectCEAO1DataStagesItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateProjectCEAO1DataStagesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateProjectCEAO1DataStagesItems0) UnmarshalBinary(b []byte) error {
	var res CreateProjectCEAO1DataStagesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
