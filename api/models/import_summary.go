// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImportSummary import summary
//
// swagger:model importSummary
type ImportSummary struct {

	// message
	Message string `json:"message,omitempty"`

	// outcome
	// Enum: [success failure]
	Outcome string `json:"outcome,omitempty"`

	// tasks
	Tasks []*Task `json:"tasks"`
}

// Validate validates this import summary
func (m *ImportSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOutcome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTasks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var importSummaryTypeOutcomePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["success","failure"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		importSummaryTypeOutcomePropEnum = append(importSummaryTypeOutcomePropEnum, v)
	}
}

const (

	// ImportSummaryOutcomeSuccess captures enum value "success"
	ImportSummaryOutcomeSuccess string = "success"

	// ImportSummaryOutcomeFailure captures enum value "failure"
	ImportSummaryOutcomeFailure string = "failure"
)

// prop value enum
func (m *ImportSummary) validateOutcomeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, importSummaryTypeOutcomePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ImportSummary) validateOutcome(formats strfmt.Registry) error {
	if swag.IsZero(m.Outcome) { // not required
		return nil
	}

	// value enum
	if err := m.validateOutcomeEnum("outcome", "body", m.Outcome); err != nil {
		return err
	}

	return nil
}

func (m *ImportSummary) validateTasks(formats strfmt.Registry) error {
	if swag.IsZero(m.Tasks) { // not required
		return nil
	}

	for i := 0; i < len(m.Tasks); i++ {
		if swag.IsZero(m.Tasks[i]) { // not required
			continue
		}

		if m.Tasks[i] != nil {
			if err := m.Tasks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tasks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this import summary based on the context it is used
func (m *ImportSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTasks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImportSummary) contextValidateTasks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tasks); i++ {

		if m.Tasks[i] != nil {
			if err := m.Tasks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tasks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImportSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImportSummary) UnmarshalBinary(b []byte) error {
	var res ImportSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
