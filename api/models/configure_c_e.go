// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigureCE configure c e
// swagger:model ConfigureCE
type ConfigureCE struct {
	CEWithoutDataWithKeptncontext

	// data
	Data *ConfigureCEAO1Data `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ConfigureCE) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CEWithoutDataWithKeptncontext
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CEWithoutDataWithKeptncontext = aO0

	// AO1
	var dataAO1 struct {
		Data *ConfigureCEAO1Data `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Data = dataAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ConfigureCE) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CEWithoutDataWithKeptncontext)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Data *ConfigureCEAO1Data `json:"data,omitempty"`
	}

	dataAO1.Data = m.Data

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this configure c e
func (m *ConfigureCE) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CEWithoutDataWithKeptncontext
	if err := m.CEWithoutDataWithKeptncontext.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigureCE) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigureCE) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigureCE) UnmarshalBinary(b []byte) error {
	var res ConfigureCE
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ConfigureCEAO1Data configure c e a o1 data
// swagger:model ConfigureCEAO1Data
type ConfigureCEAO1Data struct {

	// org
	// Required: true
	Org *string `json:"org"`

	// token
	// Required: true
	Token *string `json:"token"`

	// user
	// Required: true
	User *string `json:"user"`
}

// Validate validates this configure c e a o1 data
func (m *ConfigureCEAO1Data) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigureCEAO1Data) validateOrg(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"org", "body", m.Org); err != nil {
		return err
	}

	return nil
}

func (m *ConfigureCEAO1Data) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"token", "body", m.Token); err != nil {
		return err
	}

	return nil
}

func (m *ConfigureCEAO1Data) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"user", "body", m.User); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigureCEAO1Data) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigureCEAO1Data) UnmarshalBinary(b []byte) error {
	var res ConfigureCEAO1Data
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
