// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package middleware_mock

import (
	"github.com/keptn/keptn/api/models"
	"sync"
)

// TokenValidatorMock is a mock implementation of middleware.TokenValidator.
//
// 	func TestSomethingThatUsesTokenValidator(t *testing.T) {
//
// 		// make and configure a mocked middleware.TokenValidator
// 		mockedTokenValidator := &TokenValidatorMock{
// 			ValidateTokenFunc: func(token string) (*models.Principal, error) {
// 				panic("mock out the ValidateToken method")
// 			},
// 		}
//
// 		// use mockedTokenValidator in code that requires middleware.TokenValidator
// 		// and then make assertions.
//
// 	}
type TokenValidatorMock struct {
	// ValidateTokenFunc mocks the ValidateToken method.
	ValidateTokenFunc func(token string) (*models.Principal, error)

	// calls tracks calls to the methods.
	calls struct {
		// ValidateToken holds details about calls to the ValidateToken method.
		ValidateToken []struct {
			// Token is the token argument value.
			Token string
		}
	}
	lockValidateToken sync.RWMutex
}

// ValidateToken calls ValidateTokenFunc.
func (mock *TokenValidatorMock) ValidateToken(token string) (*models.Principal, error) {
	if mock.ValidateTokenFunc == nil {
		panic("TokenValidatorMock.ValidateTokenFunc: method is nil but TokenValidator.ValidateToken was just called")
	}
	callInfo := struct {
		Token string
	}{
		Token: token,
	}
	mock.lockValidateToken.Lock()
	mock.calls.ValidateToken = append(mock.calls.ValidateToken, callInfo)
	mock.lockValidateToken.Unlock()
	return mock.ValidateTokenFunc(token)
}

// ValidateTokenCalls gets all the calls that were made to ValidateToken.
// Check the length with:
//     len(mockedTokenValidator.ValidateTokenCalls())
func (mock *TokenValidatorMock) ValidateTokenCalls() []struct {
	Token string
} {
	var calls []struct {
		Token string
	}
	mock.lockValidateToken.RLock()
	calls = mock.calls.ValidateToken
	mock.lockValidateToken.RUnlock()
	return calls
}
