// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json",
    "application/cloudevents+json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "keptn api",
    "version": "0.1.0"
  },
  "basePath": "/v1",
  "paths": {
    "/auth": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Checks the provided token",
        "operationId": "auth",
        "responses": {
          "200": {
            "description": "Authenticated"
          }
        }
      }
    },
    "/event": {
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Forwards the received event",
        "operationId": "sendEvent",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "https://raw.githubusercontent.com/cloudevents/spec/v0.2/spec.json#/definitions/event"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Forwarded",
            "schema": {
              "$ref": "response_model.yaml#/definitions/channelInfo"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "response_model.yaml#/definitions/error"
            }
          }
        }
      }
    },
    "/project": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Creates a new project",
        "parameters": [
          {
            "$ref": "#/parameters/project"
          }
        ],
        "responses": {
          "200": {
            "description": "Creating of project triggered",
            "schema": {
              "$ref": "response_model.yaml#/definitions/channelInfo"
            }
          },
          "400": {
            "description": "Failed. Project could not be created",
            "schema": {
              "$ref": "response_model.yaml#/definitions/error"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "response_model.yaml#/definitions/error"
            }
          }
        }
      }
    },
    "/project/{projectName}": {
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Deletes the specified project",
        "responses": {
          "200": {
            "description": "Deleting of project triggered",
            "schema": {
              "$ref": "response_model.yaml#/definitions/channelInfo"
            }
          },
          "400": {
            "description": "Failed. Project could not be deleted",
            "schema": {
              "$ref": "response_model.yaml#/definitions/error"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "response_model.yaml#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/projectName"
        }
      ]
    },
    "/project/{projectName}/service": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Creates a new service",
        "parameters": [
          {
            "$ref": "#/parameters/service"
          }
        ],
        "responses": {
          "200": {
            "description": "Creating of service triggered",
            "schema": {
              "$ref": "response_model.yaml#/definitions/channelInfo"
            }
          },
          "400": {
            "description": "Failed. Project could not be created",
            "schema": {
              "$ref": "response_model.yaml#/definitions/error"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "response_model.yaml#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/projectName"
        }
      ]
    },
    "/project/{projectName}/stage/{stageName}/service/{serviceName}/resource": {
      "put": {
        "tags": [
          "Service Resource"
        ],
        "summary": "Update list of service resources",
        "parameters": [
          {
            "$ref": "#/parameters/resources"
          }
        ],
        "responses": {
          "201": {
            "description": "Success. Service resources have been updated"
          },
          "400": {
            "description": "Failed. Service resources could not be updated.",
            "schema": {
              "$ref": "response_model.yaml#/definitions/error"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "response_model.yaml#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Service Resource"
        ],
        "summary": "Upload a list of new resources for the service",
        "parameters": [
          {
            "$ref": "#/parameters/resources"
          }
        ],
        "responses": {
          "201": {
            "description": "Success. Service resources have been uploaded"
          },
          "400": {
            "description": "Failed. Service resources could not be uploaded",
            "schema": {
              "$ref": "response_model.yaml#/definitions/error"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "response_model.yaml#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/projectName"
        },
        {
          "$ref": "#/parameters/stageName"
        },
        {
          "$ref": "#/parameters/serviceName"
        }
      ]
    }
  },
  "parameters": {
    "project": {
      "description": "Project entity",
      "name": "project",
      "in": "body",
      "schema": {
        "$ref": "project_model.yaml#/definitions/project"
      }
    },
    "projectName": {
      "type": "string",
      "description": "Name of the project",
      "name": "projectName",
      "in": "path",
      "required": true
    },
    "resource": {
      "description": "Resource",
      "name": "resource",
      "in": "body",
      "schema": {
        "$ref": "resource_model.yaml#/definitions/resource"
      }
    },
    "resourceURI": {
      "type": "string",
      "description": "Resource URI",
      "name": "resourceURI",
      "in": "path",
      "required": true
    },
    "resources": {
      "description": "List of resources",
      "name": "resources",
      "in": "body",
      "schema": {
        "properties": {
          "resources": {
            "type": "array",
            "items": {
              "$ref": "resource_model.yaml#/definitions/resource"
            }
          }
        }
      }
    },
    "service": {
      "description": "Service entity",
      "name": "service",
      "in": "body",
      "schema": {
        "$ref": "service_model.yaml#/definitions/service"
      }
    },
    "serviceName": {
      "type": "string",
      "description": "Name of the service",
      "name": "serviceName",
      "in": "path",
      "required": true
    },
    "stageName": {
      "type": "string",
      "description": "Name of the stage",
      "name": "stageName",
      "in": "path",
      "required": true
    }
  },
  "securityDefinitions": {
    "key": {
      "type": "apiKey",
      "name": "x-token",
      "in": "header"
    }
  },
  "security": [
    {
      "key": []
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json",
    "application/cloudevents+json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "keptn api",
    "version": "0.1.0"
  },
  "basePath": "/v1",
  "paths": {
    "/auth": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Checks the provided token",
        "operationId": "auth",
        "responses": {
          "200": {
            "description": "Authenticated"
          }
        }
      }
    },
    "/event": {
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Forwards the received event",
        "operationId": "sendEvent",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/event"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Forwarded",
            "schema": {
              "$ref": "#/definitions/channelInfo"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/project": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Creates a new project",
        "parameters": [
          {
            "description": "Project entity",
            "name": "project",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Creating of project triggered",
            "schema": {
              "$ref": "#/definitions/channelInfo"
            }
          },
          "400": {
            "description": "Failed. Project could not be created",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/project/{projectName}": {
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Deletes the specified project",
        "responses": {
          "200": {
            "description": "Deleting of project triggered",
            "schema": {
              "$ref": "#/definitions/channelInfo"
            }
          },
          "400": {
            "description": "Failed. Project could not be deleted",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Name of the project",
          "name": "projectName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/project/{projectName}/service": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Creates a new service",
        "parameters": [
          {
            "description": "Service entity",
            "name": "service",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/service"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Creating of service triggered",
            "schema": {
              "$ref": "#/definitions/channelInfo"
            }
          },
          "400": {
            "description": "Failed. Project could not be created",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Name of the project",
          "name": "projectName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/project/{projectName}/stage/{stageName}/service/{serviceName}/resource": {
      "put": {
        "tags": [
          "Service Resource"
        ],
        "summary": "Update list of service resources",
        "parameters": [
          {
            "description": "List of resources",
            "name": "resources",
            "in": "body",
            "schema": {
              "properties": {
                "resources": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/resource"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success. Service resources have been updated"
          },
          "400": {
            "description": "Failed. Service resources could not be updated.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Service Resource"
        ],
        "summary": "Upload a list of new resources for the service",
        "parameters": [
          {
            "description": "List of resources",
            "name": "resources",
            "in": "body",
            "schema": {
              "properties": {
                "resources": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/resource"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success. Service resources have been uploaded"
          },
          "400": {
            "description": "Failed. Service resources could not be uploaded",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Name of the project",
          "name": "projectName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Name of the stage",
          "name": "stageName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "Name of the service",
          "name": "serviceName",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "channelInfo": {
      "type": "object",
      "required": [
        "token",
        "channelID"
      ],
      "properties": {
        "channelID": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "contenttype": {
      "type": "string"
    },
    "data": {
      "type": [
        "object",
        "string"
      ]
    },
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "fields": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "event": {
      "type": "object",
      "required": [
        "specversion",
        "id",
        "type",
        "source"
      ],
      "properties": {
        "contenttype": {
          "$ref": "#/definitions/contenttype"
        },
        "data": {
          "$ref": "#/definitions/data"
        },
        "extensions": {
          "$ref": "#/definitions/extensions"
        },
        "id": {
          "$ref": "#/definitions/id"
        },
        "source": {
          "$ref": "#/definitions/source"
        },
        "specversion": {
          "$ref": "#/definitions/specversion"
        },
        "time": {
          "$ref": "#/definitions/time"
        },
        "type": {
          "$ref": "#/definitions/type"
        }
      }
    },
    "extensions": {
      "type": "object"
    },
    "id": {
      "type": "string"
    },
    "project": {
      "type": "object",
      "properties": {
        "gitRemoteURL": {
          "type": "string"
        },
        "gitToken": {
          "type": "string"
        },
        "gitUser": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "shipyard": {
          "type": "string"
        }
      },
      "requried": [
        "name",
        "shipyard"
      ]
    },
    "resource": {
      "type": "object",
      "required": [
        "resourceURI",
        "resourceContent"
      ],
      "properties": {
        "resourceContent": {
          "description": "Resource content",
          "type": "string"
        },
        "resourceURI": {
          "description": "Resource URI",
          "type": "string"
        }
      }
    },
    "service": {
      "type": "object",
      "properties": {
        "deploymentStrategies": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "helmChart": {
          "type": "string"
        },
        "serviceName": {
          "type": "string"
        }
      },
      "requried": [
        "serviceName",
        "helmChart"
      ]
    },
    "source": {
      "type": "string",
      "format": "uri-reference"
    },
    "specversion": {
      "type": "string"
    },
    "time": {
      "type": "string",
      "format": "date-time"
    },
    "type": {
      "type": "string"
    }
  },
  "parameters": {
    "project": {
      "description": "Project entity",
      "name": "project",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/project"
      }
    },
    "projectName": {
      "type": "string",
      "description": "Name of the project",
      "name": "projectName",
      "in": "path",
      "required": true
    },
    "resource": {
      "description": "Resource",
      "name": "resource",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/resource"
      }
    },
    "resourceURI": {
      "type": "string",
      "description": "Resource URI",
      "name": "resourceURI",
      "in": "path",
      "required": true
    },
    "resources": {
      "description": "List of resources",
      "name": "resources",
      "in": "body",
      "schema": {
        "properties": {
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/resource"
            }
          }
        }
      }
    },
    "service": {
      "description": "Service entity",
      "name": "service",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/service"
      }
    },
    "serviceName": {
      "type": "string",
      "description": "Name of the service",
      "name": "serviceName",
      "in": "path",
      "required": true
    },
    "stageName": {
      "type": "string",
      "description": "Name of the stage",
      "name": "stageName",
      "in": "path",
      "required": true
    }
  },
  "securityDefinitions": {
    "key": {
      "type": "apiKey",
      "name": "x-token",
      "in": "header"
    }
  },
  "security": [
    {
      "key": []
    }
  ]
}`))
}
