// Code generated by go-swagger; DO NOT EDIT.

package openws

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "github.com/keptn/keptn/api/models"
)

// OpenWSHandlerFunc turns a function with the right signature into a open w s handler
type OpenWSHandlerFunc func(OpenWSParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn OpenWSHandlerFunc) Handle(params OpenWSParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// OpenWSHandler interface for that can handle valid open w s params
type OpenWSHandler interface {
	Handle(OpenWSParams, *models.Principal) middleware.Responder
}

// NewOpenWS creates a new http.Handler for the open w s operation
func NewOpenWS(ctx *middleware.Context, handler OpenWSHandler) *OpenWS {
	return &OpenWS{Context: ctx, Handler: handler}
}

/*OpenWS swagger:route GET / openws openWS

OpenWS open w s API

*/
type OpenWS struct {
	Context *middleware.Context
	Handler OpenWSHandler
}

func (o *OpenWS) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewOpenWSParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// OpenWSDefaultBody open w s default body
// swagger:model OpenWSDefaultBody
type OpenWSDefaultBody struct {

	// code
	Code int64 `json:"code,omitempty"`

	// fields
	Fields string `json:"fields,omitempty"`

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this open w s default body
func (o *OpenWSDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OpenWSDefaultBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("openWS default"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OpenWSDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OpenWSDefaultBody) UnmarshalBinary(b []byte) error {
	var res OpenWSDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
