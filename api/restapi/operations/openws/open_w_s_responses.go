// Code generated by go-swagger; DO NOT EDIT.

package openws

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// OpenWSOKCode is the HTTP code returned for type OpenWSOK
const OpenWSOKCode int = 200

/*OpenWSOK Upgrading to WS

swagger:response openWSOK
*/
type OpenWSOK struct {
}

// NewOpenWSOK creates OpenWSOK with default headers values
func NewOpenWSOK() *OpenWSOK {

	return &OpenWSOK{}
}

// WriteResponse to the client
func (o *OpenWSOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

/*OpenWSDefault error

swagger:response openWSDefault
*/
type OpenWSDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *OpenWSDefaultBody `json:"body,omitempty"`
}

// NewOpenWSDefault creates OpenWSDefault with default headers values
func NewOpenWSDefault(code int) *OpenWSDefault {
	if code <= 0 {
		code = 500
	}

	return &OpenWSDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the open w s default response
func (o *OpenWSDefault) WithStatusCode(code int) *OpenWSDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the open w s default response
func (o *OpenWSDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the open w s default response
func (o *OpenWSDefault) WithPayload(payload *OpenWSDefaultBody) *OpenWSDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the open w s default response
func (o *OpenWSDefault) SetPayload(payload *OpenWSDefaultBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *OpenWSDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
