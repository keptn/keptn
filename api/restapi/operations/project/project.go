// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "github.com/keptn/keptn/api/models"
)

// ProjectHandlerFunc turns a function with the right signature into a project handler
type ProjectHandlerFunc func(ProjectParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn ProjectHandlerFunc) Handle(params ProjectParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// ProjectHandler interface for that can handle valid project params
type ProjectHandler interface {
	Handle(ProjectParams, *models.Principal) middleware.Responder
}

// NewProject creates a new http.Handler for the project operation
func NewProject(ctx *middleware.Context, handler ProjectHandler) *Project {
	return &Project{Context: ctx, Handler: handler}
}

/*Project swagger:route POST /project project project

Forwards the received project event to the eventbroker

*/
type Project struct {
	Context *middleware.Context
	Handler ProjectHandler
}

func (o *Project) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewProjectParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ProjectBody project body
// swagger:model ProjectBody
type ProjectBody struct {

	// contenttype
	Contenttype string `json:"contenttype,omitempty"`

	// extensions
	Extensions interface{} `json:"extensions,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// shkeptncontext
	// Required: true
	Shkeptncontext *string `json:"shkeptncontext"`

	// source
	// Required: true
	Source *string `json:"source"`

	// specversion
	// Required: true
	Specversion *string `json:"specversion"`

	// time
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// type
	// Required: true
	Type *string `json:"type"`

	// data
	Data *ProjectParamsBodyAO1Data `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ProjectBody) UnmarshalJSON(raw []byte) error {
	// ProjectParamsBodyAO0
	var dataProjectParamsBodyAO0 struct {
		Contenttype string `json:"contenttype,omitempty"`

		Extensions interface{} `json:"extensions,omitempty"`

		ID *string `json:"id"`

		Shkeptncontext *string `json:"shkeptncontext"`

		Source *string `json:"source"`

		Specversion *string `json:"specversion"`

		Time strfmt.DateTime `json:"time,omitempty"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataProjectParamsBodyAO0); err != nil {
		return err
	}

	o.Contenttype = dataProjectParamsBodyAO0.Contenttype

	o.Extensions = dataProjectParamsBodyAO0.Extensions

	o.ID = dataProjectParamsBodyAO0.ID

	o.Shkeptncontext = dataProjectParamsBodyAO0.Shkeptncontext

	o.Source = dataProjectParamsBodyAO0.Source

	o.Specversion = dataProjectParamsBodyAO0.Specversion

	o.Time = dataProjectParamsBodyAO0.Time

	o.Type = dataProjectParamsBodyAO0.Type

	// ProjectParamsBodyAO1
	var dataProjectParamsBodyAO1 struct {
		Data *ProjectParamsBodyAO1Data `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataProjectParamsBodyAO1); err != nil {
		return err
	}

	o.Data = dataProjectParamsBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ProjectBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataProjectParamsBodyAO0 struct {
		Contenttype string `json:"contenttype,omitempty"`

		Extensions interface{} `json:"extensions,omitempty"`

		ID *string `json:"id"`

		Shkeptncontext *string `json:"shkeptncontext"`

		Source *string `json:"source"`

		Specversion *string `json:"specversion"`

		Time strfmt.DateTime `json:"time,omitempty"`

		Type *string `json:"type"`
	}

	dataProjectParamsBodyAO0.Contenttype = o.Contenttype

	dataProjectParamsBodyAO0.Extensions = o.Extensions

	dataProjectParamsBodyAO0.ID = o.ID

	dataProjectParamsBodyAO0.Shkeptncontext = o.Shkeptncontext

	dataProjectParamsBodyAO0.Source = o.Source

	dataProjectParamsBodyAO0.Specversion = o.Specversion

	dataProjectParamsBodyAO0.Time = o.Time

	dataProjectParamsBodyAO0.Type = o.Type

	jsonDataProjectParamsBodyAO0, errProjectParamsBodyAO0 := swag.WriteJSON(dataProjectParamsBodyAO0)
	if errProjectParamsBodyAO0 != nil {
		return nil, errProjectParamsBodyAO0
	}
	_parts = append(_parts, jsonDataProjectParamsBodyAO0)

	var dataProjectParamsBodyAO1 struct {
		Data *ProjectParamsBodyAO1Data `json:"data,omitempty"`
	}

	dataProjectParamsBodyAO1.Data = o.Data

	jsonDataProjectParamsBodyAO1, errProjectParamsBodyAO1 := swag.WriteJSON(dataProjectParamsBodyAO1)
	if errProjectParamsBodyAO1 != nil {
		return nil, errProjectParamsBodyAO1
	}
	_parts = append(_parts, jsonDataProjectParamsBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this project body
func (o *ProjectBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateShkeptncontext(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSpecversion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *ProjectBody) validateShkeptncontext(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"shkeptncontext", "body", o.Shkeptncontext); err != nil {
		return err
	}

	return nil
}

func (o *ProjectBody) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"source", "body", o.Source); err != nil {
		return err
	}

	return nil
}

func (o *ProjectBody) validateSpecversion(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"specversion", "body", o.Specversion); err != nil {
		return err
	}

	return nil
}

func (o *ProjectBody) validateTime(formats strfmt.Registry) error {

	if swag.IsZero(o.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"time", "body", "date-time", o.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ProjectBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

func (o *ProjectBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProjectBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectBody) UnmarshalBinary(b []byte) error {
	var res ProjectBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ProjectCreatedBody project created body
// swagger:model ProjectCreatedBody
type ProjectCreatedBody struct {

	// channel ID
	// Required: true
	ChannelID *string `json:"channelID"`

	// token
	// Required: true
	Token *string `json:"token"`
}

// Validate validates this project created body
func (o *ProjectCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChannelID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectCreatedBody) validateChannelID(formats strfmt.Registry) error {

	if err := validate.Required("projectCreated"+"."+"channelID", "body", o.ChannelID); err != nil {
		return err
	}

	return nil
}

func (o *ProjectCreatedBody) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("projectCreated"+"."+"token", "body", o.Token); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProjectCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectCreatedBody) UnmarshalBinary(b []byte) error {
	var res ProjectCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ProjectDefaultBody project default body
// swagger:model ProjectDefaultBody
type ProjectDefaultBody struct {

	// code
	Code int64 `json:"code,omitempty"`

	// fields
	Fields string `json:"fields,omitempty"`

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this project default body
func (o *ProjectDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectDefaultBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("project default"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProjectDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectDefaultBody) UnmarshalBinary(b []byte) error {
	var res ProjectDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ProjectParamsBodyAO1Data project params body a o1 data
// swagger:model ProjectParamsBodyAO1Data
type ProjectParamsBodyAO1Data struct {

	// project
	// Required: true
	Project *string `json:"project"`

	// stages
	// Required: true
	Stages []*ProjectParamsBodyAO1DataStagesItems0 `json:"stages"`
}

// Validate validates this project params body a o1 data
func (o *ProjectParamsBodyAO1Data) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectParamsBodyAO1Data) validateProject(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data"+"."+"project", "body", o.Project); err != nil {
		return err
	}

	return nil
}

func (o *ProjectParamsBodyAO1Data) validateStages(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data"+"."+"stages", "body", o.Stages); err != nil {
		return err
	}

	for i := 0; i < len(o.Stages); i++ {
		if swag.IsZero(o.Stages[i]) { // not required
			continue
		}

		if o.Stages[i] != nil {
			if err := o.Stages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "data" + "." + "stages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProjectParamsBodyAO1Data) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectParamsBodyAO1Data) UnmarshalBinary(b []byte) error {
	var res ProjectParamsBodyAO1Data
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ProjectParamsBodyAO1DataStagesItems0 project params body a o1 data stages items0
// swagger:model ProjectParamsBodyAO1DataStagesItems0
type ProjectParamsBodyAO1DataStagesItems0 struct {

	// deployment strategy
	// Required: true
	DeploymentStrategy *string `json:"deployment_strategy"`

	// name
	// Required: true
	Name *string `json:"name"`

	// test strategy
	TestStrategy string `json:"test_strategy,omitempty"`
}

// Validate validates this project params body a o1 data stages items0
func (o *ProjectParamsBodyAO1DataStagesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeploymentStrategy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectParamsBodyAO1DataStagesItems0) validateDeploymentStrategy(formats strfmt.Registry) error {

	if err := validate.Required("deployment_strategy", "body", o.DeploymentStrategy); err != nil {
		return err
	}

	return nil
}

func (o *ProjectParamsBodyAO1DataStagesItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProjectParamsBodyAO1DataStagesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectParamsBodyAO1DataStagesItems0) UnmarshalBinary(b []byte) error {
	var res ProjectParamsBodyAO1DataStagesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
