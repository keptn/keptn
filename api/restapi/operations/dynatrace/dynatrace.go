// Code generated by go-swagger; DO NOT EDIT.

package dynatrace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "github.com/keptn/keptn/api/models"
)

// DynatraceHandlerFunc turns a function with the right signature into a dynatrace handler
type DynatraceHandlerFunc func(DynatraceParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn DynatraceHandlerFunc) Handle(params DynatraceParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// DynatraceHandler interface for that can handle valid dynatrace params
type DynatraceHandler interface {
	Handle(DynatraceParams, *models.Principal) middleware.Responder
}

// NewDynatrace creates a new http.Handler for the dynatrace operation
func NewDynatrace(ctx *middleware.Context, handler DynatraceHandler) *Dynatrace {
	return &Dynatrace{Context: ctx, Handler: handler}
}

/*Dynatrace swagger:route POST /dynatrace dynatrace dynatrace

Forwards the received event from Dynatrace to the eventbroker

*/
type Dynatrace struct {
	Context *middleware.Context
	Handler DynatraceHandler
}

func (o *Dynatrace) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDynatraceParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DynatraceBody dynatrace body
// swagger:model DynatraceBody
type DynatraceBody struct {

	// contenttype
	Contenttype string `json:"contenttype,omitempty"`

	// extensions
	Extensions interface{} `json:"extensions,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// shkeptncontext
	Shkeptncontext string `json:"shkeptncontext,omitempty"`

	// source
	// Required: true
	Source *string `json:"source"`

	// specversion
	// Required: true
	Specversion *string `json:"specversion"`

	// time
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// type
	// Required: true
	Type *string `json:"type"`

	// data
	Data *DynatraceParamsBodyAO1Data `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DynatraceBody) UnmarshalJSON(raw []byte) error {
	// DynatraceParamsBodyAO0
	var dataDynatraceParamsBodyAO0 struct {
		Contenttype string `json:"contenttype,omitempty"`

		Extensions interface{} `json:"extensions,omitempty"`

		ID *string `json:"id"`

		Shkeptncontext string `json:"shkeptncontext,omitempty"`

		Source *string `json:"source"`

		Specversion *string `json:"specversion"`

		Time strfmt.DateTime `json:"time,omitempty"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataDynatraceParamsBodyAO0); err != nil {
		return err
	}

	o.Contenttype = dataDynatraceParamsBodyAO0.Contenttype

	o.Extensions = dataDynatraceParamsBodyAO0.Extensions

	o.ID = dataDynatraceParamsBodyAO0.ID

	o.Shkeptncontext = dataDynatraceParamsBodyAO0.Shkeptncontext

	o.Source = dataDynatraceParamsBodyAO0.Source

	o.Specversion = dataDynatraceParamsBodyAO0.Specversion

	o.Time = dataDynatraceParamsBodyAO0.Time

	o.Type = dataDynatraceParamsBodyAO0.Type

	// DynatraceParamsBodyAO1
	var dataDynatraceParamsBodyAO1 struct {
		Data *DynatraceParamsBodyAO1Data `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataDynatraceParamsBodyAO1); err != nil {
		return err
	}

	o.Data = dataDynatraceParamsBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DynatraceBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataDynatraceParamsBodyAO0 struct {
		Contenttype string `json:"contenttype,omitempty"`

		Extensions interface{} `json:"extensions,omitempty"`

		ID *string `json:"id"`

		Shkeptncontext string `json:"shkeptncontext,omitempty"`

		Source *string `json:"source"`

		Specversion *string `json:"specversion"`

		Time strfmt.DateTime `json:"time,omitempty"`

		Type *string `json:"type"`
	}

	dataDynatraceParamsBodyAO0.Contenttype = o.Contenttype

	dataDynatraceParamsBodyAO0.Extensions = o.Extensions

	dataDynatraceParamsBodyAO0.ID = o.ID

	dataDynatraceParamsBodyAO0.Shkeptncontext = o.Shkeptncontext

	dataDynatraceParamsBodyAO0.Source = o.Source

	dataDynatraceParamsBodyAO0.Specversion = o.Specversion

	dataDynatraceParamsBodyAO0.Time = o.Time

	dataDynatraceParamsBodyAO0.Type = o.Type

	jsonDataDynatraceParamsBodyAO0, errDynatraceParamsBodyAO0 := swag.WriteJSON(dataDynatraceParamsBodyAO0)
	if errDynatraceParamsBodyAO0 != nil {
		return nil, errDynatraceParamsBodyAO0
	}
	_parts = append(_parts, jsonDataDynatraceParamsBodyAO0)

	var dataDynatraceParamsBodyAO1 struct {
		Data *DynatraceParamsBodyAO1Data `json:"data,omitempty"`
	}

	dataDynatraceParamsBodyAO1.Data = o.Data

	jsonDataDynatraceParamsBodyAO1, errDynatraceParamsBodyAO1 := swag.WriteJSON(dataDynatraceParamsBodyAO1)
	if errDynatraceParamsBodyAO1 != nil {
		return nil, errDynatraceParamsBodyAO1
	}
	_parts = append(_parts, jsonDataDynatraceParamsBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this dynatrace body
func (o *DynatraceBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSpecversion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DynatraceBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *DynatraceBody) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"source", "body", o.Source); err != nil {
		return err
	}

	return nil
}

func (o *DynatraceBody) validateSpecversion(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"specversion", "body", o.Specversion); err != nil {
		return err
	}

	return nil
}

func (o *DynatraceBody) validateTime(formats strfmt.Registry) error {

	if swag.IsZero(o.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"time", "body", "date-time", o.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *DynatraceBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

func (o *DynatraceBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DynatraceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DynatraceBody) UnmarshalBinary(b []byte) error {
	var res DynatraceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DynatraceDefaultBody dynatrace default body
// swagger:model DynatraceDefaultBody
type DynatraceDefaultBody struct {

	// code
	Code int64 `json:"code,omitempty"`

	// fields
	Fields string `json:"fields,omitempty"`

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this dynatrace default body
func (o *DynatraceDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DynatraceDefaultBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("dynatrace default"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DynatraceDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DynatraceDefaultBody) UnmarshalBinary(b []byte) error {
	var res DynatraceDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DynatraceParamsBodyAO1Data dynatrace params body a o1 data
// swagger:model DynatraceParamsBodyAO1Data
type DynatraceParamsBodyAO1Data struct {

	// impactedentities
	// Required: true
	Impactedentities []*DynatraceParamsBodyAO1DataImpactedentitiesItems0 `json:"impactedentities"`

	// impactedentity
	// Required: true
	Impactedentity *string `json:"impactedentity"`

	// pid
	// Required: true
	Pid *string `json:"pid"`

	// problemdetails
	// Required: true
	Problemdetails *DynatraceParamsBodyAO1DataProblemdetails `json:"problemdetails"`

	// problemid
	// Required: true
	Problemid *string `json:"problemid"`

	// problemtitle
	// Required: true
	Problemtitle *string `json:"problemtitle"`

	// state
	// Required: true
	State *string `json:"state"`
}

// Validate validates this dynatrace params body a o1 data
func (o *DynatraceParamsBodyAO1Data) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateImpactedentities(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateImpactedentity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePid(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProblemdetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProblemid(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProblemtitle(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DynatraceParamsBodyAO1Data) validateImpactedentities(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data"+"."+"impactedentities", "body", o.Impactedentities); err != nil {
		return err
	}

	for i := 0; i < len(o.Impactedentities); i++ {
		if swag.IsZero(o.Impactedentities[i]) { // not required
			continue
		}

		if o.Impactedentities[i] != nil {
			if err := o.Impactedentities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "data" + "." + "impactedentities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *DynatraceParamsBodyAO1Data) validateImpactedentity(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data"+"."+"impactedentity", "body", o.Impactedentity); err != nil {
		return err
	}

	return nil
}

func (o *DynatraceParamsBodyAO1Data) validatePid(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data"+"."+"pid", "body", o.Pid); err != nil {
		return err
	}

	return nil
}

func (o *DynatraceParamsBodyAO1Data) validateProblemdetails(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data"+"."+"problemdetails", "body", o.Problemdetails); err != nil {
		return err
	}

	if o.Problemdetails != nil {
		if err := o.Problemdetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data" + "." + "problemdetails")
			}
			return err
		}
	}

	return nil
}

func (o *DynatraceParamsBodyAO1Data) validateProblemid(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data"+"."+"problemid", "body", o.Problemid); err != nil {
		return err
	}

	return nil
}

func (o *DynatraceParamsBodyAO1Data) validateProblemtitle(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data"+"."+"problemtitle", "body", o.Problemtitle); err != nil {
		return err
	}

	return nil
}

func (o *DynatraceParamsBodyAO1Data) validateState(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data"+"."+"state", "body", o.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DynatraceParamsBodyAO1Data) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DynatraceParamsBodyAO1Data) UnmarshalBinary(b []byte) error {
	var res DynatraceParamsBodyAO1Data
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DynatraceParamsBodyAO1DataImpactedentitiesItems0 dynatrace params body a o1 data impactedentities items0
// swagger:model DynatraceParamsBodyAO1DataImpactedentitiesItems0
type DynatraceParamsBodyAO1DataImpactedentitiesItems0 struct {

	// entity
	// Required: true
	Entity *string `json:"entity"`

	// name
	// Required: true
	Name *string `json:"name"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this dynatrace params body a o1 data impactedentities items0
func (o *DynatraceParamsBodyAO1DataImpactedentitiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DynatraceParamsBodyAO1DataImpactedentitiesItems0) validateEntity(formats strfmt.Registry) error {

	if err := validate.Required("entity", "body", o.Entity); err != nil {
		return err
	}

	return nil
}

func (o *DynatraceParamsBodyAO1DataImpactedentitiesItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *DynatraceParamsBodyAO1DataImpactedentitiesItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DynatraceParamsBodyAO1DataImpactedentitiesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DynatraceParamsBodyAO1DataImpactedentitiesItems0) UnmarshalBinary(b []byte) error {
	var res DynatraceParamsBodyAO1DataImpactedentitiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DynatraceParamsBodyAO1DataProblemdetails dynatrace params body a o1 data problemdetails
// swagger:model DynatraceParamsBodyAO1DataProblemdetails
type DynatraceParamsBodyAO1DataProblemdetails struct {

	// id
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this dynatrace params body a o1 data problemdetails
func (o *DynatraceParamsBodyAO1DataProblemdetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DynatraceParamsBodyAO1DataProblemdetails) validateID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data"+"."+"problemdetails"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DynatraceParamsBodyAO1DataProblemdetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DynatraceParamsBodyAO1DataProblemdetails) UnmarshalBinary(b []byte) error {
	var res DynatraceParamsBodyAO1DataProblemdetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
