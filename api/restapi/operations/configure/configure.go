// Code generated by go-swagger; DO NOT EDIT.

package configure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "github.com/keptn/keptn/api/models"
)

// ConfigureHandlerFunc turns a function with the right signature into a configure handler
type ConfigureHandlerFunc func(ConfigureParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn ConfigureHandlerFunc) Handle(params ConfigureParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// ConfigureHandler interface for that can handle valid configure params
type ConfigureHandler interface {
	Handle(ConfigureParams, *models.Principal) middleware.Responder
}

// NewConfigure creates a new http.Handler for the configure operation
func NewConfigure(ctx *middleware.Context, handler ConfigureHandler) *Configure {
	return &Configure{Context: ctx, Handler: handler}
}

/*Configure swagger:route POST /configure configure configure

Forwards the received configure event to the eventbroker

*/
type Configure struct {
	Context *middleware.Context
	Handler ConfigureHandler
}

func (o *Configure) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewConfigureParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ConfigureBody configure body
// swagger:model ConfigureBody
type ConfigureBody struct {

	// contenttype
	Contenttype string `json:"contenttype,omitempty"`

	// extensions
	Extensions interface{} `json:"extensions,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// shkeptncontext
	Shkeptncontext string `json:"shkeptncontext,omitempty"`

	// source
	// Required: true
	Source *string `json:"source"`

	// specversion
	// Required: true
	Specversion *string `json:"specversion"`

	// time
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// type
	// Required: true
	Type *string `json:"type"`

	// data
	Data *ConfigureParamsBodyAO1Data `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ConfigureBody) UnmarshalJSON(raw []byte) error {
	// ConfigureParamsBodyAO0
	var dataConfigureParamsBodyAO0 struct {
		Contenttype string `json:"contenttype,omitempty"`

		Extensions interface{} `json:"extensions,omitempty"`

		ID *string `json:"id"`

		Shkeptncontext string `json:"shkeptncontext,omitempty"`

		Source *string `json:"source"`

		Specversion *string `json:"specversion"`

		Time strfmt.DateTime `json:"time,omitempty"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataConfigureParamsBodyAO0); err != nil {
		return err
	}

	o.Contenttype = dataConfigureParamsBodyAO0.Contenttype

	o.Extensions = dataConfigureParamsBodyAO0.Extensions

	o.ID = dataConfigureParamsBodyAO0.ID

	o.Shkeptncontext = dataConfigureParamsBodyAO0.Shkeptncontext

	o.Source = dataConfigureParamsBodyAO0.Source

	o.Specversion = dataConfigureParamsBodyAO0.Specversion

	o.Time = dataConfigureParamsBodyAO0.Time

	o.Type = dataConfigureParamsBodyAO0.Type

	// ConfigureParamsBodyAO1
	var dataConfigureParamsBodyAO1 struct {
		Data *ConfigureParamsBodyAO1Data `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataConfigureParamsBodyAO1); err != nil {
		return err
	}

	o.Data = dataConfigureParamsBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ConfigureBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataConfigureParamsBodyAO0 struct {
		Contenttype string `json:"contenttype,omitempty"`

		Extensions interface{} `json:"extensions,omitempty"`

		ID *string `json:"id"`

		Shkeptncontext string `json:"shkeptncontext,omitempty"`

		Source *string `json:"source"`

		Specversion *string `json:"specversion"`

		Time strfmt.DateTime `json:"time,omitempty"`

		Type *string `json:"type"`
	}

	dataConfigureParamsBodyAO0.Contenttype = o.Contenttype

	dataConfigureParamsBodyAO0.Extensions = o.Extensions

	dataConfigureParamsBodyAO0.ID = o.ID

	dataConfigureParamsBodyAO0.Shkeptncontext = o.Shkeptncontext

	dataConfigureParamsBodyAO0.Source = o.Source

	dataConfigureParamsBodyAO0.Specversion = o.Specversion

	dataConfigureParamsBodyAO0.Time = o.Time

	dataConfigureParamsBodyAO0.Type = o.Type

	jsonDataConfigureParamsBodyAO0, errConfigureParamsBodyAO0 := swag.WriteJSON(dataConfigureParamsBodyAO0)
	if errConfigureParamsBodyAO0 != nil {
		return nil, errConfigureParamsBodyAO0
	}
	_parts = append(_parts, jsonDataConfigureParamsBodyAO0)

	var dataConfigureParamsBodyAO1 struct {
		Data *ConfigureParamsBodyAO1Data `json:"data,omitempty"`
	}

	dataConfigureParamsBodyAO1.Data = o.Data

	jsonDataConfigureParamsBodyAO1, errConfigureParamsBodyAO1 := swag.WriteJSON(dataConfigureParamsBodyAO1)
	if errConfigureParamsBodyAO1 != nil {
		return nil, errConfigureParamsBodyAO1
	}
	_parts = append(_parts, jsonDataConfigureParamsBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this configure body
func (o *ConfigureBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSpecversion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ConfigureBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *ConfigureBody) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"source", "body", o.Source); err != nil {
		return err
	}

	return nil
}

func (o *ConfigureBody) validateSpecversion(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"specversion", "body", o.Specversion); err != nil {
		return err
	}

	return nil
}

func (o *ConfigureBody) validateTime(formats strfmt.Registry) error {

	if swag.IsZero(o.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"time", "body", "date-time", o.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ConfigureBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

func (o *ConfigureBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ConfigureBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ConfigureBody) UnmarshalBinary(b []byte) error {
	var res ConfigureBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ConfigureCreatedBody configure created body
// swagger:model ConfigureCreatedBody
type ConfigureCreatedBody struct {

	// contenttype
	Contenttype string `json:"contenttype,omitempty"`

	// extensions
	Extensions interface{} `json:"extensions,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// shkeptncontext
	Shkeptncontext string `json:"shkeptncontext,omitempty"`

	// source
	// Required: true
	Source *string `json:"source"`

	// specversion
	// Required: true
	Specversion *string `json:"specversion"`

	// time
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// type
	// Required: true
	Type *string `json:"type"`

	// data
	Data *ConfigureCreatedBodyAO1Data `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ConfigureCreatedBody) UnmarshalJSON(raw []byte) error {
	// ConfigureCreatedBodyAO0
	var dataConfigureCreatedBodyAO0 struct {
		Contenttype string `json:"contenttype,omitempty"`

		Extensions interface{} `json:"extensions,omitempty"`

		ID *string `json:"id"`

		Shkeptncontext string `json:"shkeptncontext,omitempty"`

		Source *string `json:"source"`

		Specversion *string `json:"specversion"`

		Time strfmt.DateTime `json:"time,omitempty"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataConfigureCreatedBodyAO0); err != nil {
		return err
	}

	o.Contenttype = dataConfigureCreatedBodyAO0.Contenttype

	o.Extensions = dataConfigureCreatedBodyAO0.Extensions

	o.ID = dataConfigureCreatedBodyAO0.ID

	o.Shkeptncontext = dataConfigureCreatedBodyAO0.Shkeptncontext

	o.Source = dataConfigureCreatedBodyAO0.Source

	o.Specversion = dataConfigureCreatedBodyAO0.Specversion

	o.Time = dataConfigureCreatedBodyAO0.Time

	o.Type = dataConfigureCreatedBodyAO0.Type

	// ConfigureCreatedBodyAO1
	var dataConfigureCreatedBodyAO1 struct {
		Data *ConfigureCreatedBodyAO1Data `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataConfigureCreatedBodyAO1); err != nil {
		return err
	}

	o.Data = dataConfigureCreatedBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ConfigureCreatedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataConfigureCreatedBodyAO0 struct {
		Contenttype string `json:"contenttype,omitempty"`

		Extensions interface{} `json:"extensions,omitempty"`

		ID *string `json:"id"`

		Shkeptncontext string `json:"shkeptncontext,omitempty"`

		Source *string `json:"source"`

		Specversion *string `json:"specversion"`

		Time strfmt.DateTime `json:"time,omitempty"`

		Type *string `json:"type"`
	}

	dataConfigureCreatedBodyAO0.Contenttype = o.Contenttype

	dataConfigureCreatedBodyAO0.Extensions = o.Extensions

	dataConfigureCreatedBodyAO0.ID = o.ID

	dataConfigureCreatedBodyAO0.Shkeptncontext = o.Shkeptncontext

	dataConfigureCreatedBodyAO0.Source = o.Source

	dataConfigureCreatedBodyAO0.Specversion = o.Specversion

	dataConfigureCreatedBodyAO0.Time = o.Time

	dataConfigureCreatedBodyAO0.Type = o.Type

	jsonDataConfigureCreatedBodyAO0, errConfigureCreatedBodyAO0 := swag.WriteJSON(dataConfigureCreatedBodyAO0)
	if errConfigureCreatedBodyAO0 != nil {
		return nil, errConfigureCreatedBodyAO0
	}
	_parts = append(_parts, jsonDataConfigureCreatedBodyAO0)

	var dataConfigureCreatedBodyAO1 struct {
		Data *ConfigureCreatedBodyAO1Data `json:"data,omitempty"`
	}

	dataConfigureCreatedBodyAO1.Data = o.Data

	jsonDataConfigureCreatedBodyAO1, errConfigureCreatedBodyAO1 := swag.WriteJSON(dataConfigureCreatedBodyAO1)
	if errConfigureCreatedBodyAO1 != nil {
		return nil, errConfigureCreatedBodyAO1
	}
	_parts = append(_parts, jsonDataConfigureCreatedBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this configure created body
func (o *ConfigureCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSpecversion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ConfigureCreatedBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("configureCreated"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *ConfigureCreatedBody) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("configureCreated"+"."+"source", "body", o.Source); err != nil {
		return err
	}

	return nil
}

func (o *ConfigureCreatedBody) validateSpecversion(formats strfmt.Registry) error {

	if err := validate.Required("configureCreated"+"."+"specversion", "body", o.Specversion); err != nil {
		return err
	}

	return nil
}

func (o *ConfigureCreatedBody) validateTime(formats strfmt.Registry) error {

	if swag.IsZero(o.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("configureCreated"+"."+"time", "body", "date-time", o.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ConfigureCreatedBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("configureCreated"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

func (o *ConfigureCreatedBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configureCreated" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ConfigureCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ConfigureCreatedBody) UnmarshalBinary(b []byte) error {
	var res ConfigureCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ConfigureCreatedBodyAO1Data configure created body a o1 data
// swagger:model ConfigureCreatedBodyAO1Data
type ConfigureCreatedBodyAO1Data struct {

	// channel info
	ChannelInfo *ConfigureCreatedBodyAO1DataChannelInfo `json:"channelInfo,omitempty"`
}

// Validate validates this configure created body a o1 data
func (o *ConfigureCreatedBodyAO1Data) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChannelInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ConfigureCreatedBodyAO1Data) validateChannelInfo(formats strfmt.Registry) error {

	if swag.IsZero(o.ChannelInfo) { // not required
		return nil
	}

	if o.ChannelInfo != nil {
		if err := o.ChannelInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configureCreated" + "." + "data" + "." + "channelInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ConfigureCreatedBodyAO1Data) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ConfigureCreatedBodyAO1Data) UnmarshalBinary(b []byte) error {
	var res ConfigureCreatedBodyAO1Data
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ConfigureCreatedBodyAO1DataChannelInfo configure created body a o1 data channel info
// swagger:model ConfigureCreatedBodyAO1DataChannelInfo
type ConfigureCreatedBodyAO1DataChannelInfo struct {

	// channel ID
	// Required: true
	ChannelID *string `json:"channelID"`

	// token
	// Required: true
	Token *string `json:"token"`
}

// Validate validates this configure created body a o1 data channel info
func (o *ConfigureCreatedBodyAO1DataChannelInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChannelID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ConfigureCreatedBodyAO1DataChannelInfo) validateChannelID(formats strfmt.Registry) error {

	if err := validate.Required("configureCreated"+"."+"data"+"."+"channelInfo"+"."+"channelID", "body", o.ChannelID); err != nil {
		return err
	}

	return nil
}

func (o *ConfigureCreatedBodyAO1DataChannelInfo) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("configureCreated"+"."+"data"+"."+"channelInfo"+"."+"token", "body", o.Token); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ConfigureCreatedBodyAO1DataChannelInfo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ConfigureCreatedBodyAO1DataChannelInfo) UnmarshalBinary(b []byte) error {
	var res ConfigureCreatedBodyAO1DataChannelInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ConfigureDefaultBody configure default body
// swagger:model ConfigureDefaultBody
type ConfigureDefaultBody struct {

	// code
	Code int64 `json:"code,omitempty"`

	// fields
	Fields string `json:"fields,omitempty"`

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this configure default body
func (o *ConfigureDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ConfigureDefaultBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("configure default"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ConfigureDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ConfigureDefaultBody) UnmarshalBinary(b []byte) error {
	var res ConfigureDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ConfigureParamsBodyAO1Data configure params body a o1 data
// swagger:model ConfigureParamsBodyAO1Data
type ConfigureParamsBodyAO1Data struct {

	// org
	// Required: true
	Org *string `json:"org"`

	// token
	// Required: true
	Token *string `json:"token"`

	// user
	// Required: true
	User *string `json:"user"`
}

// Validate validates this configure params body a o1 data
func (o *ConfigureParamsBodyAO1Data) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ConfigureParamsBodyAO1Data) validateOrg(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data"+"."+"org", "body", o.Org); err != nil {
		return err
	}

	return nil
}

func (o *ConfigureParamsBodyAO1Data) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data"+"."+"token", "body", o.Token); err != nil {
		return err
	}

	return nil
}

func (o *ConfigureParamsBodyAO1Data) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data"+"."+"user", "body", o.User); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ConfigureParamsBodyAO1Data) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ConfigureParamsBodyAO1Data) UnmarshalBinary(b []byte) error {
	var res ConfigureParamsBodyAO1Data
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
