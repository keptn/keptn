// Code generated by go-swagger; DO NOT EDIT.

package import_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/keptn/keptn/api/models"
)

// ImportOKCode is the HTTP code returned for type ImportOK
const ImportOKCode int = 200

/*ImportOK OK

swagger:response importOK
*/
type ImportOK struct {
}

// NewImportOK creates ImportOK with default headers values
func NewImportOK() *ImportOK {

	return &ImportOK{}
}

// WriteResponse to the client
func (o *ImportOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// ImportBadRequestCode is the HTTP code returned for type ImportBadRequest
const ImportBadRequestCode int = 400

/*ImportBadRequest Bad request

swagger:response importBadRequest
*/
type ImportBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewImportBadRequest creates ImportBadRequest with default headers values
func NewImportBadRequest() *ImportBadRequest {

	return &ImportBadRequest{}
}

// WithPayload adds the payload to the import bad request response
func (o *ImportBadRequest) WithPayload(payload *models.Error) *ImportBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the import bad request response
func (o *ImportBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ImportBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ImportNotFoundCode is the HTTP code returned for type ImportNotFound
const ImportNotFoundCode int = 404

/*ImportNotFound Project not found

swagger:response importNotFound
*/
type ImportNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewImportNotFound creates ImportNotFound with default headers values
func NewImportNotFound() *ImportNotFound {

	return &ImportNotFound{}
}

// WithPayload adds the payload to the import not found response
func (o *ImportNotFound) WithPayload(payload *models.Error) *ImportNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the import not found response
func (o *ImportNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ImportNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ImportUnsupportedMediaTypeCode is the HTTP code returned for type ImportUnsupportedMediaType
const ImportUnsupportedMediaTypeCode int = 415

/*ImportUnsupportedMediaType Unsupported media type

swagger:response importUnsupportedMediaType
*/
type ImportUnsupportedMediaType struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewImportUnsupportedMediaType creates ImportUnsupportedMediaType with default headers values
func NewImportUnsupportedMediaType() *ImportUnsupportedMediaType {

	return &ImportUnsupportedMediaType{}
}

// WithPayload adds the payload to the import unsupported media type response
func (o *ImportUnsupportedMediaType) WithPayload(payload *models.Error) *ImportUnsupportedMediaType {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the import unsupported media type response
func (o *ImportUnsupportedMediaType) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ImportUnsupportedMediaType) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(415)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
