// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "github.com/keptn/keptn/api/models"
)

// ServiceHandlerFunc turns a function with the right signature into a service handler
type ServiceHandlerFunc func(ServiceParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn ServiceHandlerFunc) Handle(params ServiceParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// ServiceHandler interface for that can handle valid service params
type ServiceHandler interface {
	Handle(ServiceParams, *models.Principal) middleware.Responder
}

// NewService creates a new http.Handler for the service operation
func NewService(ctx *middleware.Context, handler ServiceHandler) *Service {
	return &Service{Context: ctx, Handler: handler}
}

/*Service swagger:route POST /service service service

Forwards the received service event to the eventbroker

*/
type Service struct {
	Context *middleware.Context
	Handler ServiceHandler
}

func (o *Service) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewServiceParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ServiceBody service body
// swagger:model ServiceBody
type ServiceBody struct {

	// contenttype
	Contenttype string `json:"contenttype,omitempty"`

	// data
	Data interface{} `json:"data,omitempty"`

	// extensions
	Extensions interface{} `json:"extensions,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// source
	// Required: true
	Source *string `json:"source"`

	// specversion
	// Required: true
	Specversion *string `json:"specversion"`

	// time
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// type
	// Required: true
	Type *string `json:"type"`

	// shkeptncontext
	// Required: true
	Shkeptncontext *string `json:"shkeptncontext"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ServiceBody) UnmarshalJSON(raw []byte) error {
	// ServiceParamsBodyAO0
	var dataServiceParamsBodyAO0 struct {
		Contenttype string `json:"contenttype,omitempty"`

		Data interface{} `json:"data,omitempty"`

		Extensions interface{} `json:"extensions,omitempty"`

		ID *string `json:"id"`

		Source *string `json:"source"`

		Specversion *string `json:"specversion"`

		Time strfmt.DateTime `json:"time,omitempty"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataServiceParamsBodyAO0); err != nil {
		return err
	}

	o.Contenttype = dataServiceParamsBodyAO0.Contenttype

	o.Data = dataServiceParamsBodyAO0.Data

	o.Extensions = dataServiceParamsBodyAO0.Extensions

	o.ID = dataServiceParamsBodyAO0.ID

	o.Source = dataServiceParamsBodyAO0.Source

	o.Specversion = dataServiceParamsBodyAO0.Specversion

	o.Time = dataServiceParamsBodyAO0.Time

	o.Type = dataServiceParamsBodyAO0.Type

	// ServiceParamsBodyAO1
	var dataServiceParamsBodyAO1 struct {
		Shkeptncontext *string `json:"shkeptncontext"`
	}
	if err := swag.ReadJSON(raw, &dataServiceParamsBodyAO1); err != nil {
		return err
	}

	o.Shkeptncontext = dataServiceParamsBodyAO1.Shkeptncontext

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ServiceBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataServiceParamsBodyAO0 struct {
		Contenttype string `json:"contenttype,omitempty"`

		Data interface{} `json:"data,omitempty"`

		Extensions interface{} `json:"extensions,omitempty"`

		ID *string `json:"id"`

		Source *string `json:"source"`

		Specversion *string `json:"specversion"`

		Time strfmt.DateTime `json:"time,omitempty"`

		Type *string `json:"type"`
	}

	dataServiceParamsBodyAO0.Contenttype = o.Contenttype

	dataServiceParamsBodyAO0.Data = o.Data

	dataServiceParamsBodyAO0.Extensions = o.Extensions

	dataServiceParamsBodyAO0.ID = o.ID

	dataServiceParamsBodyAO0.Source = o.Source

	dataServiceParamsBodyAO0.Specversion = o.Specversion

	dataServiceParamsBodyAO0.Time = o.Time

	dataServiceParamsBodyAO0.Type = o.Type

	jsonDataServiceParamsBodyAO0, errServiceParamsBodyAO0 := swag.WriteJSON(dataServiceParamsBodyAO0)
	if errServiceParamsBodyAO0 != nil {
		return nil, errServiceParamsBodyAO0
	}
	_parts = append(_parts, jsonDataServiceParamsBodyAO0)

	var dataServiceParamsBodyAO1 struct {
		Shkeptncontext *string `json:"shkeptncontext"`
	}

	dataServiceParamsBodyAO1.Shkeptncontext = o.Shkeptncontext

	jsonDataServiceParamsBodyAO1, errServiceParamsBodyAO1 := swag.WriteJSON(dataServiceParamsBodyAO1)
	if errServiceParamsBodyAO1 != nil {
		return nil, errServiceParamsBodyAO1
	}
	_parts = append(_parts, jsonDataServiceParamsBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this service body
func (o *ServiceBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSpecversion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateShkeptncontext(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *ServiceBody) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"source", "body", o.Source); err != nil {
		return err
	}

	return nil
}

func (o *ServiceBody) validateSpecversion(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"specversion", "body", o.Specversion); err != nil {
		return err
	}

	return nil
}

func (o *ServiceBody) validateTime(formats strfmt.Registry) error {

	if swag.IsZero(o.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"time", "body", "date-time", o.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ServiceBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

func (o *ServiceBody) validateShkeptncontext(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"shkeptncontext", "body", o.Shkeptncontext); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServiceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceBody) UnmarshalBinary(b []byte) error {
	var res ServiceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ServiceCreatedBody service created body
// swagger:model ServiceCreatedBody
type ServiceCreatedBody struct {

	// contenttype
	Contenttype string `json:"contenttype,omitempty"`

	// extensions
	Extensions interface{} `json:"extensions,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// shkeptncontext
	Shkeptncontext string `json:"shkeptncontext,omitempty"`

	// source
	// Required: true
	Source *string `json:"source"`

	// specversion
	// Required: true
	Specversion *string `json:"specversion"`

	// time
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// type
	// Required: true
	Type *string `json:"type"`

	// data
	Data *ServiceCreatedBodyAO1Data `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ServiceCreatedBody) UnmarshalJSON(raw []byte) error {
	// ServiceCreatedBodyAO0
	var dataServiceCreatedBodyAO0 struct {
		Contenttype string `json:"contenttype,omitempty"`

		Extensions interface{} `json:"extensions,omitempty"`

		ID *string `json:"id"`

		Shkeptncontext string `json:"shkeptncontext,omitempty"`

		Source *string `json:"source"`

		Specversion *string `json:"specversion"`

		Time strfmt.DateTime `json:"time,omitempty"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataServiceCreatedBodyAO0); err != nil {
		return err
	}

	o.Contenttype = dataServiceCreatedBodyAO0.Contenttype

	o.Extensions = dataServiceCreatedBodyAO0.Extensions

	o.ID = dataServiceCreatedBodyAO0.ID

	o.Shkeptncontext = dataServiceCreatedBodyAO0.Shkeptncontext

	o.Source = dataServiceCreatedBodyAO0.Source

	o.Specversion = dataServiceCreatedBodyAO0.Specversion

	o.Time = dataServiceCreatedBodyAO0.Time

	o.Type = dataServiceCreatedBodyAO0.Type

	// ServiceCreatedBodyAO1
	var dataServiceCreatedBodyAO1 struct {
		Data *ServiceCreatedBodyAO1Data `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataServiceCreatedBodyAO1); err != nil {
		return err
	}

	o.Data = dataServiceCreatedBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ServiceCreatedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataServiceCreatedBodyAO0 struct {
		Contenttype string `json:"contenttype,omitempty"`

		Extensions interface{} `json:"extensions,omitempty"`

		ID *string `json:"id"`

		Shkeptncontext string `json:"shkeptncontext,omitempty"`

		Source *string `json:"source"`

		Specversion *string `json:"specversion"`

		Time strfmt.DateTime `json:"time,omitempty"`

		Type *string `json:"type"`
	}

	dataServiceCreatedBodyAO0.Contenttype = o.Contenttype

	dataServiceCreatedBodyAO0.Extensions = o.Extensions

	dataServiceCreatedBodyAO0.ID = o.ID

	dataServiceCreatedBodyAO0.Shkeptncontext = o.Shkeptncontext

	dataServiceCreatedBodyAO0.Source = o.Source

	dataServiceCreatedBodyAO0.Specversion = o.Specversion

	dataServiceCreatedBodyAO0.Time = o.Time

	dataServiceCreatedBodyAO0.Type = o.Type

	jsonDataServiceCreatedBodyAO0, errServiceCreatedBodyAO0 := swag.WriteJSON(dataServiceCreatedBodyAO0)
	if errServiceCreatedBodyAO0 != nil {
		return nil, errServiceCreatedBodyAO0
	}
	_parts = append(_parts, jsonDataServiceCreatedBodyAO0)

	var dataServiceCreatedBodyAO1 struct {
		Data *ServiceCreatedBodyAO1Data `json:"data,omitempty"`
	}

	dataServiceCreatedBodyAO1.Data = o.Data

	jsonDataServiceCreatedBodyAO1, errServiceCreatedBodyAO1 := swag.WriteJSON(dataServiceCreatedBodyAO1)
	if errServiceCreatedBodyAO1 != nil {
		return nil, errServiceCreatedBodyAO1
	}
	_parts = append(_parts, jsonDataServiceCreatedBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this service created body
func (o *ServiceCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSpecversion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceCreatedBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("serviceCreated"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *ServiceCreatedBody) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("serviceCreated"+"."+"source", "body", o.Source); err != nil {
		return err
	}

	return nil
}

func (o *ServiceCreatedBody) validateSpecversion(formats strfmt.Registry) error {

	if err := validate.Required("serviceCreated"+"."+"specversion", "body", o.Specversion); err != nil {
		return err
	}

	return nil
}

func (o *ServiceCreatedBody) validateTime(formats strfmt.Registry) error {

	if swag.IsZero(o.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("serviceCreated"+"."+"time", "body", "date-time", o.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ServiceCreatedBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("serviceCreated"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

func (o *ServiceCreatedBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceCreated" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServiceCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceCreatedBody) UnmarshalBinary(b []byte) error {
	var res ServiceCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ServiceCreatedBodyAO1Data service created body a o1 data
// swagger:model ServiceCreatedBodyAO1Data
type ServiceCreatedBodyAO1Data struct {

	// channel info
	ChannelInfo *ServiceCreatedBodyAO1DataChannelInfo `json:"channelInfo,omitempty"`
}

// Validate validates this service created body a o1 data
func (o *ServiceCreatedBodyAO1Data) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChannelInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceCreatedBodyAO1Data) validateChannelInfo(formats strfmt.Registry) error {

	if swag.IsZero(o.ChannelInfo) { // not required
		return nil
	}

	if o.ChannelInfo != nil {
		if err := o.ChannelInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceCreated" + "." + "data" + "." + "channelInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServiceCreatedBodyAO1Data) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceCreatedBodyAO1Data) UnmarshalBinary(b []byte) error {
	var res ServiceCreatedBodyAO1Data
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ServiceCreatedBodyAO1DataChannelInfo service created body a o1 data channel info
// swagger:model ServiceCreatedBodyAO1DataChannelInfo
type ServiceCreatedBodyAO1DataChannelInfo struct {

	// channel ID
	// Required: true
	ChannelID *string `json:"channelID"`

	// token
	// Required: true
	Token *string `json:"token"`
}

// Validate validates this service created body a o1 data channel info
func (o *ServiceCreatedBodyAO1DataChannelInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChannelID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceCreatedBodyAO1DataChannelInfo) validateChannelID(formats strfmt.Registry) error {

	if err := validate.Required("serviceCreated"+"."+"data"+"."+"channelInfo"+"."+"channelID", "body", o.ChannelID); err != nil {
		return err
	}

	return nil
}

func (o *ServiceCreatedBodyAO1DataChannelInfo) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("serviceCreated"+"."+"data"+"."+"channelInfo"+"."+"token", "body", o.Token); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServiceCreatedBodyAO1DataChannelInfo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceCreatedBodyAO1DataChannelInfo) UnmarshalBinary(b []byte) error {
	var res ServiceCreatedBodyAO1DataChannelInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ServiceDefaultBody service default body
// swagger:model ServiceDefaultBody
type ServiceDefaultBody struct {

	// code
	Code int64 `json:"code,omitempty"`

	// fields
	Fields string `json:"fields,omitempty"`

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this service default body
func (o *ServiceDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServiceDefaultBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("service default"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServiceDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceDefaultBody) UnmarshalBinary(b []byte) error {
	var res ServiceDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
