// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/keptn/keptn/api/models"
)

// PostProjectProjectNameServiceOKCode is the HTTP code returned for type PostProjectProjectNameServiceOK
const PostProjectProjectNameServiceOKCode int = 200

/*PostProjectProjectNameServiceOK Creating of service triggered

swagger:response postProjectProjectNameServiceOK
*/
type PostProjectProjectNameServiceOK struct {

	/*
	  In: Body
	*/
	Payload *models.EventContext `json:"body,omitempty"`
}

// NewPostProjectProjectNameServiceOK creates PostProjectProjectNameServiceOK with default headers values
func NewPostProjectProjectNameServiceOK() *PostProjectProjectNameServiceOK {

	return &PostProjectProjectNameServiceOK{}
}

// WithPayload adds the payload to the post project project name service o k response
func (o *PostProjectProjectNameServiceOK) WithPayload(payload *models.EventContext) *PostProjectProjectNameServiceOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post project project name service o k response
func (o *PostProjectProjectNameServiceOK) SetPayload(payload *models.EventContext) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostProjectProjectNameServiceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostProjectProjectNameServiceBadRequestCode is the HTTP code returned for type PostProjectProjectNameServiceBadRequest
const PostProjectProjectNameServiceBadRequestCode int = 400

/*PostProjectProjectNameServiceBadRequest Failed. Project could not be created

swagger:response postProjectProjectNameServiceBadRequest
*/
type PostProjectProjectNameServiceBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostProjectProjectNameServiceBadRequest creates PostProjectProjectNameServiceBadRequest with default headers values
func NewPostProjectProjectNameServiceBadRequest() *PostProjectProjectNameServiceBadRequest {

	return &PostProjectProjectNameServiceBadRequest{}
}

// WithPayload adds the payload to the post project project name service bad request response
func (o *PostProjectProjectNameServiceBadRequest) WithPayload(payload *models.Error) *PostProjectProjectNameServiceBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post project project name service bad request response
func (o *PostProjectProjectNameServiceBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostProjectProjectNameServiceBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostProjectProjectNameServiceDefault Error

swagger:response postProjectProjectNameServiceDefault
*/
type PostProjectProjectNameServiceDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostProjectProjectNameServiceDefault creates PostProjectProjectNameServiceDefault with default headers values
func NewPostProjectProjectNameServiceDefault(code int) *PostProjectProjectNameServiceDefault {
	if code <= 0 {
		code = 500
	}

	return &PostProjectProjectNameServiceDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post project project name service default response
func (o *PostProjectProjectNameServiceDefault) WithStatusCode(code int) *PostProjectProjectNameServiceDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post project project name service default response
func (o *PostProjectProjectNameServiceDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post project project name service default response
func (o *PostProjectProjectNameServiceDefault) WithPayload(payload *models.Error) *PostProjectProjectNameServiceDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post project project name service default response
func (o *PostProjectProjectNameServiceDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostProjectProjectNameServiceDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
