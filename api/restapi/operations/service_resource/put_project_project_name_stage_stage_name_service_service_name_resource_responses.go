// Code generated by go-swagger; DO NOT EDIT.

package service_resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/keptn/keptn/api/models"
)

// PutProjectProjectNameStageStageNameServiceServiceNameResourceCreatedCode is the HTTP code returned for type PutProjectProjectNameStageStageNameServiceServiceNameResourceCreated
const PutProjectProjectNameStageStageNameServiceServiceNameResourceCreatedCode int = 201

/*PutProjectProjectNameStageStageNameServiceServiceNameResourceCreated Success. Service resources have been updated. The version of the new configuration is returned.

swagger:response putProjectProjectNameStageStageNameServiceServiceNameResourceCreated
*/
type PutProjectProjectNameStageStageNameServiceServiceNameResourceCreated struct {

	/*
	  In: Body
	*/
	Payload *models.Version `json:"body,omitempty"`
}

// NewPutProjectProjectNameStageStageNameServiceServiceNameResourceCreated creates PutProjectProjectNameStageStageNameServiceServiceNameResourceCreated with default headers values
func NewPutProjectProjectNameStageStageNameServiceServiceNameResourceCreated() *PutProjectProjectNameStageStageNameServiceServiceNameResourceCreated {

	return &PutProjectProjectNameStageStageNameServiceServiceNameResourceCreated{}
}

// WithPayload adds the payload to the put project project name stage stage name service service name resource created response
func (o *PutProjectProjectNameStageStageNameServiceServiceNameResourceCreated) WithPayload(payload *models.Version) *PutProjectProjectNameStageStageNameServiceServiceNameResourceCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put project project name stage stage name service service name resource created response
func (o *PutProjectProjectNameStageStageNameServiceServiceNameResourceCreated) SetPayload(payload *models.Version) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutProjectProjectNameStageStageNameServiceServiceNameResourceCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutProjectProjectNameStageStageNameServiceServiceNameResourceBadRequestCode is the HTTP code returned for type PutProjectProjectNameStageStageNameServiceServiceNameResourceBadRequest
const PutProjectProjectNameStageStageNameServiceServiceNameResourceBadRequestCode int = 400

/*PutProjectProjectNameStageStageNameServiceServiceNameResourceBadRequest Failed. Service resources could not be updated.

swagger:response putProjectProjectNameStageStageNameServiceServiceNameResourceBadRequest
*/
type PutProjectProjectNameStageStageNameServiceServiceNameResourceBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutProjectProjectNameStageStageNameServiceServiceNameResourceBadRequest creates PutProjectProjectNameStageStageNameServiceServiceNameResourceBadRequest with default headers values
func NewPutProjectProjectNameStageStageNameServiceServiceNameResourceBadRequest() *PutProjectProjectNameStageStageNameServiceServiceNameResourceBadRequest {

	return &PutProjectProjectNameStageStageNameServiceServiceNameResourceBadRequest{}
}

// WithPayload adds the payload to the put project project name stage stage name service service name resource bad request response
func (o *PutProjectProjectNameStageStageNameServiceServiceNameResourceBadRequest) WithPayload(payload *models.Error) *PutProjectProjectNameStageStageNameServiceServiceNameResourceBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put project project name stage stage name service service name resource bad request response
func (o *PutProjectProjectNameStageStageNameServiceServiceNameResourceBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutProjectProjectNameStageStageNameServiceServiceNameResourceBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PutProjectProjectNameStageStageNameServiceServiceNameResourceDefault Error

swagger:response putProjectProjectNameStageStageNameServiceServiceNameResourceDefault
*/
type PutProjectProjectNameStageStageNameServiceServiceNameResourceDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutProjectProjectNameStageStageNameServiceServiceNameResourceDefault creates PutProjectProjectNameStageStageNameServiceServiceNameResourceDefault with default headers values
func NewPutProjectProjectNameStageStageNameServiceServiceNameResourceDefault(code int) *PutProjectProjectNameStageStageNameServiceServiceNameResourceDefault {
	if code <= 0 {
		code = 500
	}

	return &PutProjectProjectNameStageStageNameServiceServiceNameResourceDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the put project project name stage stage name service service name resource default response
func (o *PutProjectProjectNameStageStageNameServiceServiceNameResourceDefault) WithStatusCode(code int) *PutProjectProjectNameStageStageNameServiceServiceNameResourceDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the put project project name stage stage name service service name resource default response
func (o *PutProjectProjectNameStageStageNameServiceServiceNameResourceDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the put project project name stage stage name service service name resource default response
func (o *PutProjectProjectNameStageStageNameServiceServiceNameResourceDefault) WithPayload(payload *models.Error) *PutProjectProjectNameStageStageNameServiceServiceNameResourceDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put project project name stage stage name service service name resource default response
func (o *PutProjectProjectNameStageStageNameServiceServiceNameResourceDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutProjectProjectNameStageStageNameServiceServiceNameResourceDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
