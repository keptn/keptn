// Code generated by go-swagger; DO NOT EDIT.

package event

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/keptn/keptn/api/models"
)

// GetEventEventTypeOKCode is the HTTP code returned for type GetEventEventTypeOK
const GetEventEventTypeOKCode int = 200

/*GetEventEventTypeOK Success

swagger:response getEventEventTypeOK
*/
type GetEventEventTypeOK struct {

	/*
	  In: Body
	*/
	Payload *models.Event `json:"body,omitempty"`
}

// NewGetEventEventTypeOK creates GetEventEventTypeOK with default headers values
func NewGetEventEventTypeOK() *GetEventEventTypeOK {

	return &GetEventEventTypeOK{}
}

// WithPayload adds the payload to the get event event type o k response
func (o *GetEventEventTypeOK) WithPayload(payload *models.Event) *GetEventEventTypeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get event event type o k response
func (o *GetEventEventTypeOK) SetPayload(payload *models.Event) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetEventEventTypeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetEventEventTypeNotFoundCode is the HTTP code returned for type GetEventEventTypeNotFound
const GetEventEventTypeNotFoundCode int = 404

/*GetEventEventTypeNotFound Failed. Event could not be found.

swagger:response getEventEventTypeNotFound
*/
type GetEventEventTypeNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetEventEventTypeNotFound creates GetEventEventTypeNotFound with default headers values
func NewGetEventEventTypeNotFound() *GetEventEventTypeNotFound {

	return &GetEventEventTypeNotFound{}
}

// WithPayload adds the payload to the get event event type not found response
func (o *GetEventEventTypeNotFound) WithPayload(payload *models.Error) *GetEventEventTypeNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get event event type not found response
func (o *GetEventEventTypeNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetEventEventTypeNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetEventEventTypeDefault Error

swagger:response getEventEventTypeDefault
*/
type GetEventEventTypeDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetEventEventTypeDefault creates GetEventEventTypeDefault with default headers values
func NewGetEventEventTypeDefault(code int) *GetEventEventTypeDefault {
	if code <= 0 {
		code = 500
	}

	return &GetEventEventTypeDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get event event type default response
func (o *GetEventEventTypeDefault) WithStatusCode(code int) *GetEventEventTypeDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get event event type default response
func (o *GetEventEventTypeDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get event event type default response
func (o *GetEventEventTypeDefault) WithPayload(payload *models.Error) *GetEventEventTypeDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get event event type default response
func (o *GetEventEventTypeDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetEventEventTypeDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
