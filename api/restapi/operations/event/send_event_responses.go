// Code generated by go-swagger; DO NOT EDIT.

package event

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/keptn/keptn/api/models"
)

// SendEventCreatedCode is the HTTP code returned for type SendEventCreated
const SendEventCreatedCode int = 201

/*SendEventCreated forwarded

swagger:response sendEventCreated
*/
type SendEventCreated struct {

	/*
	  In: Body
	*/
	Payload *models.ChannelInfo `json:"body,omitempty"`
}

// NewSendEventCreated creates SendEventCreated with default headers values
func NewSendEventCreated() *SendEventCreated {

	return &SendEventCreated{}
}

// WithPayload adds the payload to the send event created response
func (o *SendEventCreated) WithPayload(payload *models.ChannelInfo) *SendEventCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the send event created response
func (o *SendEventCreated) SetPayload(payload *models.ChannelInfo) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SendEventCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*SendEventDefault error

swagger:response sendEventDefault
*/
type SendEventDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSendEventDefault creates SendEventDefault with default headers values
func NewSendEventDefault(code int) *SendEventDefault {
	if code <= 0 {
		code = 500
	}

	return &SendEventDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the send event default response
func (o *SendEventDefault) WithStatusCode(code int) *SendEventDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the send event default response
func (o *SendEventDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the send event default response
func (o *SendEventDefault) WithPayload(payload *models.Error) *SendEventDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the send event default response
func (o *SendEventDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SendEventDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
