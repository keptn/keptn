// Code generated by go-swagger; DO NOT EDIT.

package configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/keptn/keptn/api/models"
)

// GetConfigBridgeOKCode is the HTTP code returned for type GetConfigBridgeOK
const GetConfigBridgeOKCode int = 200

/*GetConfigBridgeOK Bridge credentials have been retrieved

swagger:response getConfigBridgeOK
*/
type GetConfigBridgeOK struct {

	/*
	  In: Body
	*/
	Payload *models.ConfigureBridge `json:"body,omitempty"`
}

// NewGetConfigBridgeOK creates GetConfigBridgeOK with default headers values
func NewGetConfigBridgeOK() *GetConfigBridgeOK {

	return &GetConfigBridgeOK{}
}

// WithPayload adds the payload to the get config bridge o k response
func (o *GetConfigBridgeOK) WithPayload(payload *models.ConfigureBridge) *GetConfigBridgeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get config bridge o k response
func (o *GetConfigBridgeOK) SetPayload(payload *models.ConfigureBridge) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetConfigBridgeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetConfigBridgeBadRequestCode is the HTTP code returned for type GetConfigBridgeBadRequest
const GetConfigBridgeBadRequestCode int = 400

/*GetConfigBridgeBadRequest Bridge credentials could not be retrieved

swagger:response getConfigBridgeBadRequest
*/
type GetConfigBridgeBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetConfigBridgeBadRequest creates GetConfigBridgeBadRequest with default headers values
func NewGetConfigBridgeBadRequest() *GetConfigBridgeBadRequest {

	return &GetConfigBridgeBadRequest{}
}

// WithPayload adds the payload to the get config bridge bad request response
func (o *GetConfigBridgeBadRequest) WithPayload(payload *models.Error) *GetConfigBridgeBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get config bridge bad request response
func (o *GetConfigBridgeBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetConfigBridgeBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetConfigBridgeDefault Error

swagger:response getConfigBridgeDefault
*/
type GetConfigBridgeDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetConfigBridgeDefault creates GetConfigBridgeDefault with default headers values
func NewGetConfigBridgeDefault(code int) *GetConfigBridgeDefault {
	if code <= 0 {
		code = 500
	}

	return &GetConfigBridgeDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get config bridge default response
func (o *GetConfigBridgeDefault) WithStatusCode(code int) *GetConfigBridgeDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get config bridge default response
func (o *GetConfigBridgeDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get config bridge default response
func (o *GetConfigBridgeDefault) WithPayload(payload *models.Error) *GetConfigBridgeDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get config bridge default response
func (o *GetConfigBridgeDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetConfigBridgeDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
