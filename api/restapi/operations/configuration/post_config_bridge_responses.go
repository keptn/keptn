// Code generated by go-swagger; DO NOT EDIT.

package configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/keptn/keptn/api/models"
)

// PostConfigBridgeOKCode is the HTTP code returned for type PostConfigBridgeOK
const PostConfigBridgeOKCode int = 200

/*PostConfigBridgeOK Bridge credentials were set successfully

swagger:response postConfigBridgeOK
*/
type PostConfigBridgeOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPostConfigBridgeOK creates PostConfigBridgeOK with default headers values
func NewPostConfigBridgeOK() *PostConfigBridgeOK {

	return &PostConfigBridgeOK{}
}

// WithPayload adds the payload to the post config bridge o k response
func (o *PostConfigBridgeOK) WithPayload(payload string) *PostConfigBridgeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post config bridge o k response
func (o *PostConfigBridgeOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostConfigBridgeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostConfigBridgeBadRequestCode is the HTTP code returned for type PostConfigBridgeBadRequest
const PostConfigBridgeBadRequestCode int = 400

/*PostConfigBridgeBadRequest Bridge credentials could not be set

swagger:response postConfigBridgeBadRequest
*/
type PostConfigBridgeBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostConfigBridgeBadRequest creates PostConfigBridgeBadRequest with default headers values
func NewPostConfigBridgeBadRequest() *PostConfigBridgeBadRequest {

	return &PostConfigBridgeBadRequest{}
}

// WithPayload adds the payload to the post config bridge bad request response
func (o *PostConfigBridgeBadRequest) WithPayload(payload *models.Error) *PostConfigBridgeBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post config bridge bad request response
func (o *PostConfigBridgeBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostConfigBridgeBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostConfigBridgeDefault Error

swagger:response postConfigBridgeDefault
*/
type PostConfigBridgeDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostConfigBridgeDefault creates PostConfigBridgeDefault with default headers values
func NewPostConfigBridgeDefault(code int) *PostConfigBridgeDefault {
	if code <= 0 {
		code = 500
	}

	return &PostConfigBridgeDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post config bridge default response
func (o *PostConfigBridgeDefault) WithStatusCode(code int) *PostConfigBridgeDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post config bridge default response
func (o *PostConfigBridgeDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post config bridge default response
func (o *PostConfigBridgeDefault) WithPayload(payload *models.Error) *PostConfigBridgeDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post config bridge default response
func (o *PostConfigBridgeDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostConfigBridgeDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
