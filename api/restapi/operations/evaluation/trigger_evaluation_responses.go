// Code generated by go-swagger; DO NOT EDIT.

package evaluation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/keptn/keptn/api/models"
)

// TriggerEvaluationOKCode is the HTTP code returned for type TriggerEvaluationOK
const TriggerEvaluationOKCode int = 200

/*TriggerEvaluationOK Evaluation has been triggered

swagger:response triggerEvaluationOK
*/
type TriggerEvaluationOK struct {

	/*
	  In: Body
	*/
	Payload *models.EventContext `json:"body,omitempty"`
}

// NewTriggerEvaluationOK creates TriggerEvaluationOK with default headers values
func NewTriggerEvaluationOK() *TriggerEvaluationOK {

	return &TriggerEvaluationOK{}
}

// WithPayload adds the payload to the trigger evaluation o k response
func (o *TriggerEvaluationOK) WithPayload(payload *models.EventContext) *TriggerEvaluationOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the trigger evaluation o k response
func (o *TriggerEvaluationOK) SetPayload(payload *models.EventContext) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TriggerEvaluationOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TriggerEvaluationBadRequestCode is the HTTP code returned for type TriggerEvaluationBadRequest
const TriggerEvaluationBadRequestCode int = 400

/*TriggerEvaluationBadRequest Evaluation could not be triggered

swagger:response triggerEvaluationBadRequest
*/
type TriggerEvaluationBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewTriggerEvaluationBadRequest creates TriggerEvaluationBadRequest with default headers values
func NewTriggerEvaluationBadRequest() *TriggerEvaluationBadRequest {

	return &TriggerEvaluationBadRequest{}
}

// WithPayload adds the payload to the trigger evaluation bad request response
func (o *TriggerEvaluationBadRequest) WithPayload(payload *models.Error) *TriggerEvaluationBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the trigger evaluation bad request response
func (o *TriggerEvaluationBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TriggerEvaluationBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*TriggerEvaluationDefault Error

swagger:response triggerEvaluationDefault
*/
type TriggerEvaluationDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewTriggerEvaluationDefault creates TriggerEvaluationDefault with default headers values
func NewTriggerEvaluationDefault(code int) *TriggerEvaluationDefault {
	if code <= 0 {
		code = 500
	}

	return &TriggerEvaluationDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the trigger evaluation default response
func (o *TriggerEvaluationDefault) WithStatusCode(code int) *TriggerEvaluationDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the trigger evaluation default response
func (o *TriggerEvaluationDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the trigger evaluation default response
func (o *TriggerEvaluationDefault) WithPayload(payload *models.Error) *TriggerEvaluationDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the trigger evaluation default response
func (o *TriggerEvaluationDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TriggerEvaluationDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
