// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package sdk

import (
	"github.com/keptn/go-utils/pkg/api/models"
	"sync"
)

// Ensure, that ResourceHandlerMock does implement ResourceHandler.
// If this is not the case, regenerate this file with moq.
var _ ResourceHandler = &ResourceHandlerMock{}

// ResourceHandlerMock is a mock implementation of ResourceHandler.
//
// 	func TestSomethingThatUsesResourceHandler(t *testing.T) {
//
// 		// make and configure a mocked ResourceHandler
// 		mockedResourceHandler := &ResourceHandlerMock{
// 			GetProjectResourceFunc: func(project string, resourceURI string) (*models.Resource, error) {
// 				panic("mock out the GetProjectResource method")
// 			},
// 			GetServiceResourceFunc: func(project string, stage string, service string, resourceURI string) (*models.Resource, error) {
// 				panic("mock out the GetServiceResource method")
// 			},
// 			GetStageResourceFunc: func(project string, stage string, resourceURI string) (*models.Resource, error) {
// 				panic("mock out the GetStageResource method")
// 			},
// 		}
//
// 		// use mockedResourceHandler in code that requires ResourceHandler
// 		// and then make assertions.
//
// 	}
type ResourceHandlerMock struct {
	// GetProjectResourceFunc mocks the GetProjectResource method.
	GetProjectResourceFunc func(project string, resourceURI string) (*models.Resource, error)

	// GetServiceResourceFunc mocks the GetServiceResource method.
	GetServiceResourceFunc func(project string, stage string, service string, resourceURI string) (*models.Resource, error)

	// GetStageResourceFunc mocks the GetStageResource method.
	GetStageResourceFunc func(project string, stage string, resourceURI string) (*models.Resource, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetProjectResource holds details about calls to the GetProjectResource method.
		GetProjectResource []struct {
			// Project is the project argument value.
			Project string
			// ResourceURI is the resourceURI argument value.
			ResourceURI string
		}
		// GetServiceResource holds details about calls to the GetServiceResource method.
		GetServiceResource []struct {
			// Project is the project argument value.
			Project string
			// Stage is the stage argument value.
			Stage string
			// Service is the service argument value.
			Service string
			// ResourceURI is the resourceURI argument value.
			ResourceURI string
		}
		// GetStageResource holds details about calls to the GetStageResource method.
		GetStageResource []struct {
			// Project is the project argument value.
			Project string
			// Stage is the stage argument value.
			Stage string
			// ResourceURI is the resourceURI argument value.
			ResourceURI string
		}
	}
	lockGetProjectResource sync.RWMutex
	lockGetServiceResource sync.RWMutex
	lockGetStageResource   sync.RWMutex
}

// GetProjectResource calls GetProjectResourceFunc.
func (mock *ResourceHandlerMock) GetProjectResource(project string, resourceURI string) (*models.Resource, error) {
	if mock.GetProjectResourceFunc == nil {
		panic("ResourceHandlerMock.GetProjectResourceFunc: method is nil but ResourceHandler.GetProjectResource was just called")
	}
	callInfo := struct {
		Project     string
		ResourceURI string
	}{
		Project:     project,
		ResourceURI: resourceURI,
	}
	mock.lockGetProjectResource.Lock()
	mock.calls.GetProjectResource = append(mock.calls.GetProjectResource, callInfo)
	mock.lockGetProjectResource.Unlock()
	return mock.GetProjectResourceFunc(project, resourceURI)
}

// GetProjectResourceCalls gets all the calls that were made to GetProjectResource.
// Check the length with:
//     len(mockedResourceHandler.GetProjectResourceCalls())
func (mock *ResourceHandlerMock) GetProjectResourceCalls() []struct {
	Project     string
	ResourceURI string
} {
	var calls []struct {
		Project     string
		ResourceURI string
	}
	mock.lockGetProjectResource.RLock()
	calls = mock.calls.GetProjectResource
	mock.lockGetProjectResource.RUnlock()
	return calls
}

// GetServiceResource calls GetServiceResourceFunc.
func (mock *ResourceHandlerMock) GetServiceResource(project string, stage string, service string, resourceURI string) (*models.Resource, error) {
	if mock.GetServiceResourceFunc == nil {
		panic("ResourceHandlerMock.GetServiceResourceFunc: method is nil but ResourceHandler.GetServiceResource was just called")
	}
	callInfo := struct {
		Project     string
		Stage       string
		Service     string
		ResourceURI string
	}{
		Project:     project,
		Stage:       stage,
		Service:     service,
		ResourceURI: resourceURI,
	}
	mock.lockGetServiceResource.Lock()
	mock.calls.GetServiceResource = append(mock.calls.GetServiceResource, callInfo)
	mock.lockGetServiceResource.Unlock()
	return mock.GetServiceResourceFunc(project, stage, service, resourceURI)
}

// GetServiceResourceCalls gets all the calls that were made to GetServiceResource.
// Check the length with:
//     len(mockedResourceHandler.GetServiceResourceCalls())
func (mock *ResourceHandlerMock) GetServiceResourceCalls() []struct {
	Project     string
	Stage       string
	Service     string
	ResourceURI string
} {
	var calls []struct {
		Project     string
		Stage       string
		Service     string
		ResourceURI string
	}
	mock.lockGetServiceResource.RLock()
	calls = mock.calls.GetServiceResource
	mock.lockGetServiceResource.RUnlock()
	return calls
}

// GetStageResource calls GetStageResourceFunc.
func (mock *ResourceHandlerMock) GetStageResource(project string, stage string, resourceURI string) (*models.Resource, error) {
	if mock.GetStageResourceFunc == nil {
		panic("ResourceHandlerMock.GetStageResourceFunc: method is nil but ResourceHandler.GetStageResource was just called")
	}
	callInfo := struct {
		Project     string
		Stage       string
		ResourceURI string
	}{
		Project:     project,
		Stage:       stage,
		ResourceURI: resourceURI,
	}
	mock.lockGetStageResource.Lock()
	mock.calls.GetStageResource = append(mock.calls.GetStageResource, callInfo)
	mock.lockGetStageResource.Unlock()
	return mock.GetStageResourceFunc(project, stage, resourceURI)
}

// GetStageResourceCalls gets all the calls that were made to GetStageResource.
// Check the length with:
//     len(mockedResourceHandler.GetStageResourceCalls())
func (mock *ResourceHandlerMock) GetStageResourceCalls() []struct {
	Project     string
	Stage       string
	ResourceURI string
} {
	var calls []struct {
		Project     string
		Stage       string
		ResourceURI string
	}
	mock.lockGetStageResource.RLock()
	calls = mock.calls.GetStageResource
	mock.lockGetStageResource.RUnlock()
	return calls
}
