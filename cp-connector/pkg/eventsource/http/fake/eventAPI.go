// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"github.com/keptn/go-utils/pkg/api/models"
	api "github.com/keptn/go-utils/pkg/api/utils"
	"sync"
)

// EventAPIMock is a mock implementation of httpeventsource.EventAPI.
//
// 	func TestSomethingThatUsesEventAPI(t *testing.T) {
//
// 		// make and configure a mocked httpeventsource.EventAPI
// 		mockedEventAPI := &EventAPIMock{
// 			GetFunc: func(eventFilter api.EventFilter) ([]*models.KeptnContextExtendedCE, error) {
// 				panic("mock out the Get method")
// 			},
// 			SendFunc: func(keptnContextExtendedCE models.KeptnContextExtendedCE) error {
// 				panic("mock out the Send method")
// 			},
// 		}
//
// 		// use mockedEventAPI in code that requires httpeventsource.EventAPI
// 		// and then make assertions.
//
// 	}
type EventAPIMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(eventFilter api.EventFilter) ([]*models.KeptnContextExtendedCE, error)

	// SendFunc mocks the Send method.
	SendFunc func(keptnContextExtendedCE models.KeptnContextExtendedCE) error

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// EventFilter is the eventFilter argument value.
			EventFilter api.EventFilter
		}
		// Send holds details about calls to the Send method.
		Send []struct {
			// KeptnContextExtendedCE is the keptnContextExtendedCE argument value.
			KeptnContextExtendedCE models.KeptnContextExtendedCE
		}
	}
	lockGet  sync.RWMutex
	lockSend sync.RWMutex
}

// Get calls GetFunc.
func (mock *EventAPIMock) Get(eventFilter api.EventFilter) ([]*models.KeptnContextExtendedCE, error) {
	if mock.GetFunc == nil {
		panic("EventAPIMock.GetFunc: method is nil but EventAPI.Get was just called")
	}
	callInfo := struct {
		EventFilter api.EventFilter
	}{
		EventFilter: eventFilter,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(eventFilter)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedEventAPI.GetCalls())
func (mock *EventAPIMock) GetCalls() []struct {
	EventFilter api.EventFilter
} {
	var calls []struct {
		EventFilter api.EventFilter
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Send calls SendFunc.
func (mock *EventAPIMock) Send(keptnContextExtendedCE models.KeptnContextExtendedCE) error {
	if mock.SendFunc == nil {
		panic("EventAPIMock.SendFunc: method is nil but EventAPI.Send was just called")
	}
	callInfo := struct {
		KeptnContextExtendedCE models.KeptnContextExtendedCE
	}{
		KeptnContextExtendedCE: keptnContextExtendedCE,
	}
	mock.lockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	mock.lockSend.Unlock()
	return mock.SendFunc(keptnContextExtendedCE)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//     len(mockedEventAPI.SendCalls())
func (mock *EventAPIMock) SendCalls() []struct {
	KeptnContextExtendedCE models.KeptnContextExtendedCE
} {
	var calls []struct {
		KeptnContextExtendedCE models.KeptnContextExtendedCE
	}
	mock.lockSend.RLock()
	calls = mock.calls.Send
	mock.lockSend.RUnlock()
	return calls
}
