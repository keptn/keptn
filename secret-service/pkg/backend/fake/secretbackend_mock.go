// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"github.com/keptn/keptn/secret-service/pkg/backend"
	"github.com/keptn/keptn/secret-service/pkg/model"
	"sync"
)

// Ensure, that SecretBackendMock does implement backend.SecretBackend.
// If this is not the case, regenerate this file with moq.
var _ backend.SecretBackend = &SecretBackendMock{}

// SecretBackendMock is a mock implementation of backend.SecretBackend.
//
// 	func TestSomethingThatUsesSecretBackend(t *testing.T) {
//
// 		// make and configure a mocked backend.SecretBackend
// 		mockedSecretBackend := &SecretBackendMock{
// 			CreateSecretFunc: func(secret model.Secret) error {
// 				panic("mock out the CreateSecret method")
// 			},
// 			DeleteSecretFunc: func(secret model.Secret) error {
// 				panic("mock out the DeleteSecret method")
// 			},
// 			GetScopesFunc: func() ([]string, error) {
// 				panic("mock out the GetScopes method")
// 			},
// 			GetSecretsFunc: func(secret model.Secret) ([]model.GetSecretResponseItem, error) {
// 				panic("mock out the GetSecrets method")
// 			},
// 			UpdateSecretFunc: func(secret model.Secret) error {
// 				panic("mock out the UpdateSecret method")
// 			},
// 		}
//
// 		// use mockedSecretBackend in code that requires backend.SecretBackend
// 		// and then make assertions.
//
// 	}
type SecretBackendMock struct {
	// CreateSecretFunc mocks the CreateSecret method.
	CreateSecretFunc func(secret model.Secret) error

	// DeleteSecretFunc mocks the DeleteSecret method.
	DeleteSecretFunc func(secret model.Secret) error

	// GetScopesFunc mocks the GetScopes method.
	GetScopesFunc func() ([]string, error)

	// GetSecretsFunc mocks the GetSecrets method.
	GetSecretsFunc func(secret model.Secret) ([]model.GetSecretResponseItem, error)

	// UpdateSecretFunc mocks the UpdateSecret method.
	UpdateSecretFunc func(secret model.Secret) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateSecret holds details about calls to the CreateSecret method.
		CreateSecret []struct {
			// Secret is the secret argument value.
			Secret model.Secret
		}
		// DeleteSecret holds details about calls to the DeleteSecret method.
		DeleteSecret []struct {
			// Secret is the secret argument value.
			Secret model.Secret
		}
		// GetScopes holds details about calls to the GetScopes method.
		GetScopes []struct {
		}
		// GetSecrets holds details about calls to the GetSecrets method.
		GetSecrets []struct {
			Secret model.Secret
		}
		// UpdateSecret holds details about calls to the UpdateSecret method.
		UpdateSecret []struct {
			// Secret is the secret argument value.
			Secret model.Secret
		}
	}
	lockCreateSecret sync.RWMutex
	lockDeleteSecret sync.RWMutex
	lockGetScopes    sync.RWMutex
	lockGetSecrets   sync.RWMutex
	lockUpdateSecret sync.RWMutex
}

// CreateSecret calls CreateSecretFunc.
func (mock *SecretBackendMock) CreateSecret(secret model.Secret) error {
	if mock.CreateSecretFunc == nil {
		panic("SecretBackendMock.CreateSecretFunc: method is nil but SecretBackend.CreateSecret was just called")
	}
	callInfo := struct {
		Secret model.Secret
	}{
		Secret: secret,
	}
	mock.lockCreateSecret.Lock()
	mock.calls.CreateSecret = append(mock.calls.CreateSecret, callInfo)
	mock.lockCreateSecret.Unlock()
	return mock.CreateSecretFunc(secret)
}

// CreateSecretCalls gets all the calls that were made to CreateSecret.
// Check the length with:
//     len(mockedSecretBackend.CreateSecretCalls())
func (mock *SecretBackendMock) CreateSecretCalls() []struct {
	Secret model.Secret
} {
	var calls []struct {
		Secret model.Secret
	}
	mock.lockCreateSecret.RLock()
	calls = mock.calls.CreateSecret
	mock.lockCreateSecret.RUnlock()
	return calls
}

// DeleteSecret calls DeleteSecretFunc.
func (mock *SecretBackendMock) DeleteSecret(secret model.Secret) error {
	if mock.DeleteSecretFunc == nil {
		panic("SecretBackendMock.DeleteSecretFunc: method is nil but SecretBackend.DeleteSecret was just called")
	}
	callInfo := struct {
		Secret model.Secret
	}{
		Secret: secret,
	}
	mock.lockDeleteSecret.Lock()
	mock.calls.DeleteSecret = append(mock.calls.DeleteSecret, callInfo)
	mock.lockDeleteSecret.Unlock()
	return mock.DeleteSecretFunc(secret)
}

// DeleteSecretCalls gets all the calls that were made to DeleteSecret.
// Check the length with:
//     len(mockedSecretBackend.DeleteSecretCalls())
func (mock *SecretBackendMock) DeleteSecretCalls() []struct {
	Secret model.Secret
} {
	var calls []struct {
		Secret model.Secret
	}
	mock.lockDeleteSecret.RLock()
	calls = mock.calls.DeleteSecret
	mock.lockDeleteSecret.RUnlock()
	return calls
}

// GetScopes calls GetScopesFunc.
func (mock *SecretBackendMock) GetScopes() ([]string, error) {
	if mock.GetScopesFunc == nil {
		panic("SecretBackendMock.GetScopesFunc: method is nil but SecretBackend.GetScopes was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetScopes.Lock()
	mock.calls.GetScopes = append(mock.calls.GetScopes, callInfo)
	mock.lockGetScopes.Unlock()
	return mock.GetScopesFunc()
}

// GetScopesCalls gets all the calls that were made to GetScopes.
// Check the length with:
//     len(mockedSecretBackend.GetScopesCalls())
func (mock *SecretBackendMock) GetScopesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetScopes.RLock()
	calls = mock.calls.GetScopes
	mock.lockGetScopes.RUnlock()
	return calls
}

// GetSecrets calls GetSecretsFunc.
func (mock *SecretBackendMock) GetSecrets(secret model.Secret) ([]model.GetSecretResponseItem, error) {
	if mock.GetSecretsFunc == nil {
		panic("SecretBackendMock.GetSecretsFunc: method is nil but SecretBackend.GetSecrets was just called")
	}
	callInfo := struct {
		Secret model.Secret
	}{}
	mock.lockGetSecrets.Lock()
	mock.calls.GetSecrets = append(mock.calls.GetSecrets, callInfo)
	mock.lockGetSecrets.Unlock()
	return mock.GetSecretsFunc(secret)
}

// GetSecretsCalls gets all the calls that were made to GetSecrets.
// Check the length with:
//     len(mockedSecretBackend.GetSecretsCalls())
func (mock *SecretBackendMock) GetSecretsCalls() []struct {
	Secret model.Secret
} {
	var calls []struct {
		Secret model.Secret
	}
	mock.lockGetSecrets.RLock()
	calls = mock.calls.GetSecrets
	mock.lockGetSecrets.RUnlock()
	return calls
}

// UpdateSecret calls UpdateSecretFunc.
func (mock *SecretBackendMock) UpdateSecret(secret model.Secret) error {
	if mock.UpdateSecretFunc == nil {
		panic("SecretBackendMock.UpdateSecretFunc: method is nil but SecretBackend.UpdateSecret was just called")
	}
	callInfo := struct {
		Secret model.Secret
	}{
		Secret: secret,
	}
	mock.lockUpdateSecret.Lock()
	mock.calls.UpdateSecret = append(mock.calls.UpdateSecret, callInfo)
	mock.lockUpdateSecret.Unlock()
	return mock.UpdateSecretFunc(secret)
}

// UpdateSecretCalls gets all the calls that were made to UpdateSecret.
// Check the length with:
//     len(mockedSecretBackend.UpdateSecretCalls())
func (mock *SecretBackendMock) UpdateSecretCalls() []struct {
	Secret model.Secret
} {
	var calls []struct {
		Secret model.Secret
	}
	mock.lockUpdateSecret.RLock()
	calls = mock.calls.UpdateSecret
	mock.lockUpdateSecret.RUnlock()
	return calls
}
