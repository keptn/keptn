// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package event_handler_mock

import (
	apimodels "github.com/keptn/go-utils/pkg/api/models"
	keptnapi "github.com/keptn/go-utils/pkg/api/utils"
	"sync"
)

// EventStoreMock is a mock implementation of event_handler.EventStore.
//
// 	func TestSomethingThatUsesEventStore(t *testing.T) {
//
// 		// make and configure a mocked event_handler.EventStore
// 		mockedEventStore := &EventStoreMock{
// 			GetEventsFunc: func(filter *keptnapi.EventFilter) ([]*apimodels.KeptnContextExtendedCE, *apimodels.Error) {
// 				panic("mock out the GetEvents method")
// 			},
// 		}
//
// 		// use mockedEventStore in code that requires event_handler.EventStore
// 		// and then make assertions.
//
// 	}
type EventStoreMock struct {
	// GetEventsFunc mocks the GetEvents method.
	GetEventsFunc func(filter *keptnapi.EventFilter) ([]*apimodels.KeptnContextExtendedCE, *apimodels.Error)

	// calls tracks calls to the methods.
	calls struct {
		// GetEvents holds details about calls to the GetEvents method.
		GetEvents []struct {
			// Filter is the filter argument value.
			Filter *keptnapi.EventFilter
		}
	}
	lockGetEvents sync.RWMutex
}

// GetEvents calls GetEventsFunc.
func (mock *EventStoreMock) GetEvents(filter *keptnapi.EventFilter) ([]*apimodels.KeptnContextExtendedCE, *apimodels.Error) {
	if mock.GetEventsFunc == nil {
		panic("EventStoreMock.GetEventsFunc: method is nil but EventStore.GetEvents was just called")
	}
	callInfo := struct {
		Filter *keptnapi.EventFilter
	}{
		Filter: filter,
	}
	mock.lockGetEvents.Lock()
	mock.calls.GetEvents = append(mock.calls.GetEvents, callInfo)
	mock.lockGetEvents.Unlock()
	return mock.GetEventsFunc(filter)
}

// GetEventsCalls gets all the calls that were made to GetEvents.
// Check the length with:
//     len(mockedEventStore.GetEventsCalls())
func (mock *EventStoreMock) GetEventsCalls() []struct {
	Filter *keptnapi.EventFilter
} {
	var calls []struct {
		Filter *keptnapi.EventFilter
	}
	mock.lockGetEvents.RLock()
	calls = mock.calls.GetEvents
	mock.lockGetEvents.RUnlock()
	return calls
}
