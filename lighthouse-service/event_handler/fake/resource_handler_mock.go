// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package event_handler_mock

import (
	apimodels "github.com/keptn/go-utils/pkg/api/models"
	keptnapi "github.com/keptn/go-utils/pkg/api/utils"
	"sync"
)

// ResourceHandlerMock is a mock implementation of event_handler.ResourceHandler.
//
// 	func TestSomethingThatUsesResourceHandler(t *testing.T) {
//
// 		// make and configure a mocked event_handler.ResourceHandler
// 		mockedResourceHandler := &ResourceHandlerMock{
// 			GetResourceFunc: func(scope keptnapi.ResourceScope, options ...keptnapi.URIOption) (*apimodels.Resource, error) {
// 				panic("mock out the GetResource method")
// 			},
// 		}
//
// 		// use mockedResourceHandler in code that requires event_handler.ResourceHandler
// 		// and then make assertions.
//
// 	}
type ResourceHandlerMock struct {
	// GetResourceFunc mocks the GetResource method.
	GetResourceFunc func(scope keptnapi.ResourceScope, options ...keptnapi.URIOption) (*apimodels.Resource, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetResource holds details about calls to the GetResource method.
		GetResource []struct {
			// Scope is the scope argument value.
			Scope keptnapi.ResourceScope
			// Options is the options argument value.
			Options []keptnapi.URIOption
		}
	}
	lockGetResource sync.RWMutex
}

// GetResource calls GetResourceFunc.
func (mock *ResourceHandlerMock) GetResource(scope keptnapi.ResourceScope, options ...keptnapi.URIOption) (*apimodels.Resource, error) {
	if mock.GetResourceFunc == nil {
		panic("ResourceHandlerMock.GetResourceFunc: method is nil but ResourceHandler.GetResource was just called")
	}
	callInfo := struct {
		Scope   keptnapi.ResourceScope
		Options []keptnapi.URIOption
	}{
		Scope:   scope,
		Options: options,
	}
	mock.lockGetResource.Lock()
	mock.calls.GetResource = append(mock.calls.GetResource, callInfo)
	mock.lockGetResource.Unlock()
	return mock.GetResourceFunc(scope, options...)
}

// GetResourceCalls gets all the calls that were made to GetResource.
// Check the length with:
//     len(mockedResourceHandler.GetResourceCalls())
func (mock *ResourceHandlerMock) GetResourceCalls() []struct {
	Scope   keptnapi.ResourceScope
	Options []keptnapi.URIOption
} {
	var calls []struct {
		Scope   keptnapi.ResourceScope
		Options []keptnapi.URIOption
	}
	mock.lockGetResource.RLock()
	calls = mock.calls.GetResource
	mock.lockGetResource.RUnlock()
	return calls
}
