// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package db_mock

import (
	"github.com/keptn/keptn/shipyard-controller/models"
	"sync"
)

// TaskSequenceRepoMock is a mock implementation of db.TaskSequenceRepo.
//
// 	func TestSomethingThatUsesTaskSequenceRepo(t *testing.T) {
//
// 		// make and configure a mocked db.TaskSequenceRepo
// 		mockedTaskSequenceRepo := &TaskSequenceRepoMock{
// 			CreateTaskSequenceMappingFunc: func(project string, taskSequenceEvent models.TaskSequenceEvent) error {
// 				panic("mock out the CreateTaskSequenceMapping method")
// 			},
// 			DeleteTaskSequenceCollectionFunc: func(project string) error {
// 				panic("mock out the DeleteTaskSequenceCollection method")
// 			},
// 			DeleteTaskSequenceMappingFunc: func(keptnContext string, project string, stage string, taskSequenceName string) error {
// 				panic("mock out the DeleteTaskSequenceMapping method")
// 			},
// 			GetTaskSequencesFunc: func(project string, filter models.TaskSequenceEvent) ([]models.TaskSequenceEvent, error) {
// 				panic("mock out the GetTaskSequences method")
// 			},
// 		}
//
// 		// use mockedTaskSequenceRepo in code that requires db.TaskSequenceRepo
// 		// and then make assertions.
//
// 	}
type TaskSequenceRepoMock struct {
	// CreateTaskSequenceMappingFunc mocks the CreateTaskSequenceMapping method.
	CreateTaskSequenceMappingFunc func(project string, taskSequenceEvent models.TaskSequenceEvent) error

	// DeleteTaskSequenceCollectionFunc mocks the DeleteTaskSequenceCollection method.
	DeleteTaskSequenceCollectionFunc func(project string) error

	// DeleteTaskSequenceMappingFunc mocks the DeleteTaskSequenceMapping method.
	DeleteTaskSequenceMappingFunc func(keptnContext string, project string, stage string, taskSequenceName string) error

	// GetTaskSequencesFunc mocks the GetTaskSequences method.
	GetTaskSequencesFunc func(project string, filter models.TaskSequenceEvent) ([]models.TaskSequenceEvent, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateTaskSequenceMapping holds details about calls to the CreateTaskSequenceMapping method.
		CreateTaskSequenceMapping []struct {
			// Project is the project argument value.
			Project string
			// TaskSequenceEvent is the taskSequenceEvent argument value.
			TaskSequenceEvent models.TaskSequenceEvent
		}
		// DeleteTaskSequenceCollection holds details about calls to the DeleteTaskSequenceCollection method.
		DeleteTaskSequenceCollection []struct {
			// Project is the project argument value.
			Project string
		}
		// DeleteTaskSequenceMapping holds details about calls to the DeleteTaskSequenceMapping method.
		DeleteTaskSequenceMapping []struct {
			// KeptnContext is the keptnContext argument value.
			KeptnContext string
			// Project is the project argument value.
			Project string
			// Stage is the stage argument value.
			Stage string
			// TaskSequenceName is the taskSequenceName argument value.
			TaskSequenceName string
		}
		// GetTaskSequences holds details about calls to the GetTaskSequences method.
		GetTaskSequences []struct {
			// Project is the project argument value.
			Project string
			// Filter is the filter argument value.
			Filter models.TaskSequenceEvent
		}
	}
	lockCreateTaskSequenceMapping    sync.RWMutex
	lockDeleteTaskSequenceCollection sync.RWMutex
	lockDeleteTaskSequenceMapping    sync.RWMutex
	lockGetTaskSequences             sync.RWMutex
}

// CreateTaskSequenceMapping calls CreateTaskSequenceMappingFunc.
func (mock *TaskSequenceRepoMock) CreateTaskSequenceMapping(project string, taskSequenceEvent models.TaskSequenceEvent) error {
	if mock.CreateTaskSequenceMappingFunc == nil {
		panic("TaskSequenceRepoMock.CreateTaskSequenceMappingFunc: method is nil but TaskSequenceRepo.CreateTaskSequenceMapping was just called")
	}
	callInfo := struct {
		Project           string
		TaskSequenceEvent models.TaskSequenceEvent
	}{
		Project:           project,
		TaskSequenceEvent: taskSequenceEvent,
	}
	mock.lockCreateTaskSequenceMapping.Lock()
	mock.calls.CreateTaskSequenceMapping = append(mock.calls.CreateTaskSequenceMapping, callInfo)
	mock.lockCreateTaskSequenceMapping.Unlock()
	return mock.CreateTaskSequenceMappingFunc(project, taskSequenceEvent)
}

// CreateTaskSequenceMappingCalls gets all the calls that were made to CreateTaskSequenceMapping.
// Check the length with:
//     len(mockedTaskSequenceRepo.CreateTaskSequenceMappingCalls())
func (mock *TaskSequenceRepoMock) CreateTaskSequenceMappingCalls() []struct {
	Project           string
	TaskSequenceEvent models.TaskSequenceEvent
} {
	var calls []struct {
		Project           string
		TaskSequenceEvent models.TaskSequenceEvent
	}
	mock.lockCreateTaskSequenceMapping.RLock()
	calls = mock.calls.CreateTaskSequenceMapping
	mock.lockCreateTaskSequenceMapping.RUnlock()
	return calls
}

// DeleteTaskSequenceCollection calls DeleteTaskSequenceCollectionFunc.
func (mock *TaskSequenceRepoMock) DeleteTaskSequenceCollection(project string) error {
	if mock.DeleteTaskSequenceCollectionFunc == nil {
		panic("TaskSequenceRepoMock.DeleteTaskSequenceCollectionFunc: method is nil but TaskSequenceRepo.DeleteTaskSequenceCollection was just called")
	}
	callInfo := struct {
		Project string
	}{
		Project: project,
	}
	mock.lockDeleteTaskSequenceCollection.Lock()
	mock.calls.DeleteTaskSequenceCollection = append(mock.calls.DeleteTaskSequenceCollection, callInfo)
	mock.lockDeleteTaskSequenceCollection.Unlock()
	return mock.DeleteTaskSequenceCollectionFunc(project)
}

// DeleteTaskSequenceCollectionCalls gets all the calls that were made to DeleteTaskSequenceCollection.
// Check the length with:
//     len(mockedTaskSequenceRepo.DeleteTaskSequenceCollectionCalls())
func (mock *TaskSequenceRepoMock) DeleteTaskSequenceCollectionCalls() []struct {
	Project string
} {
	var calls []struct {
		Project string
	}
	mock.lockDeleteTaskSequenceCollection.RLock()
	calls = mock.calls.DeleteTaskSequenceCollection
	mock.lockDeleteTaskSequenceCollection.RUnlock()
	return calls
}

// DeleteTaskSequenceMapping calls DeleteTaskSequenceMappingFunc.
func (mock *TaskSequenceRepoMock) DeleteTaskSequenceMapping(keptnContext string, project string, stage string, taskSequenceName string) error {
	if mock.DeleteTaskSequenceMappingFunc == nil {
		panic("TaskSequenceRepoMock.DeleteTaskSequenceMappingFunc: method is nil but TaskSequenceRepo.DeleteTaskSequenceMapping was just called")
	}
	callInfo := struct {
		KeptnContext     string
		Project          string
		Stage            string
		TaskSequenceName string
	}{
		KeptnContext:     keptnContext,
		Project:          project,
		Stage:            stage,
		TaskSequenceName: taskSequenceName,
	}
	mock.lockDeleteTaskSequenceMapping.Lock()
	mock.calls.DeleteTaskSequenceMapping = append(mock.calls.DeleteTaskSequenceMapping, callInfo)
	mock.lockDeleteTaskSequenceMapping.Unlock()
	return mock.DeleteTaskSequenceMappingFunc(keptnContext, project, stage, taskSequenceName)
}

// DeleteTaskSequenceMappingCalls gets all the calls that were made to DeleteTaskSequenceMapping.
// Check the length with:
//     len(mockedTaskSequenceRepo.DeleteTaskSequenceMappingCalls())
func (mock *TaskSequenceRepoMock) DeleteTaskSequenceMappingCalls() []struct {
	KeptnContext     string
	Project          string
	Stage            string
	TaskSequenceName string
} {
	var calls []struct {
		KeptnContext     string
		Project          string
		Stage            string
		TaskSequenceName string
	}
	mock.lockDeleteTaskSequenceMapping.RLock()
	calls = mock.calls.DeleteTaskSequenceMapping
	mock.lockDeleteTaskSequenceMapping.RUnlock()
	return calls
}

// GetTaskSequences calls GetTaskSequencesFunc.
func (mock *TaskSequenceRepoMock) GetTaskSequences(project string, filter models.TaskSequenceEvent) ([]models.TaskSequenceEvent, error) {
	if mock.GetTaskSequencesFunc == nil {
		panic("TaskSequenceRepoMock.GetTaskSequencesFunc: method is nil but TaskSequenceRepo.GetTaskSequences was just called")
	}
	callInfo := struct {
		Project string
		Filter  models.TaskSequenceEvent
	}{
		Project: project,
		Filter:  filter,
	}
	mock.lockGetTaskSequences.Lock()
	mock.calls.GetTaskSequences = append(mock.calls.GetTaskSequences, callInfo)
	mock.lockGetTaskSequences.Unlock()
	return mock.GetTaskSequencesFunc(project, filter)
}

// GetTaskSequencesCalls gets all the calls that were made to GetTaskSequences.
// Check the length with:
//     len(mockedTaskSequenceRepo.GetTaskSequencesCalls())
func (mock *TaskSequenceRepoMock) GetTaskSequencesCalls() []struct {
	Project string
	Filter  models.TaskSequenceEvent
} {
	var calls []struct {
		Project string
		Filter  models.TaskSequenceEvent
	}
	mock.lockGetTaskSequences.RLock()
	calls = mock.calls.GetTaskSequences
	mock.lockGetTaskSequences.RUnlock()
	return calls
}
