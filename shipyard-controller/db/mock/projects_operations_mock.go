// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package db_mock

import (
	"github.com/keptn/keptn/shipyard-controller/models"
	"sync"
)

// ProjectsDBOperationsMock is a mock implementation of db.ProjectsDBOperations.
//
// 	func TestSomethingThatUsesProjectsDBOperations(t *testing.T) {
//
// 		// make and configure a mocked db.ProjectsDBOperations
// 		mockedProjectsDBOperations := &ProjectsDBOperationsMock{
// 			CreateProjectFunc: func(prj *models.ExpandedProject) error {
// 				panic("mock out the CreateProject method")
// 			},
// 			DeleteProjectFunc: func(projectName string) error {
// 				panic("mock out the DeleteProject method")
// 			},
// 			GetProjectFunc: func(projectName string) (*models.ExpandedProject, error) {
// 				panic("mock out the GetProject method")
// 			},
// 			GetProjectsFunc: func() ([]*models.ExpandedProject, error) {
// 				panic("mock out the GetProjects method")
// 			},
// 			UpdateUpstreamInfoFunc: func(projectName string, uri string, user string) error {
// 				panic("mock out the UpdateUpstreamInfo method")
// 			},
// 		}
//
// 		// use mockedProjectsDBOperations in code that requires db.ProjectsDBOperations
// 		// and then make assertions.
//
// 	}
type ProjectsDBOperationsMock struct {
	// CreateProjectFunc mocks the CreateProject method.
	CreateProjectFunc func(prj *models.ExpandedProject) error

	// DeleteProjectFunc mocks the DeleteProject method.
	DeleteProjectFunc func(projectName string) error

	// GetProjectFunc mocks the GetProject method.
	GetProjectFunc func(projectName string) (*models.ExpandedProject, error)

	// GetProjectsFunc mocks the GetProjects method.
	GetProjectsFunc func() ([]*models.ExpandedProject, error)

	// UpdateUpstreamInfoFunc mocks the UpdateUpstreamInfo method.
	UpdateUpstreamInfoFunc func(projectName string, uri string, user string) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateProject holds details about calls to the CreateProject method.
		CreateProject []struct {
			// Prj is the prj argument value.
			Prj *models.ExpandedProject
		}
		// DeleteProject holds details about calls to the DeleteProject method.
		DeleteProject []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
		}
		// GetProject holds details about calls to the GetProject method.
		GetProject []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
		}
		// GetProjects holds details about calls to the GetProjects method.
		GetProjects []struct {
		}
		// UpdateUpstreamInfo holds details about calls to the UpdateUpstreamInfo method.
		UpdateUpstreamInfo []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// URI is the uri argument value.
			URI string
			// User is the user argument value.
			User string
		}
	}
	lockCreateProject      sync.RWMutex
	lockDeleteProject      sync.RWMutex
	lockGetProject         sync.RWMutex
	lockGetProjects        sync.RWMutex
	lockUpdateUpstreamInfo sync.RWMutex
}

// CreateProject calls CreateProjectFunc.
func (mock *ProjectsDBOperationsMock) CreateProject(prj *models.ExpandedProject) error {
	if mock.CreateProjectFunc == nil {
		panic("ProjectsDBOperationsMock.CreateProjectFunc: method is nil but ProjectsDBOperations.CreateProject was just called")
	}
	callInfo := struct {
		Prj *models.ExpandedProject
	}{
		Prj: prj,
	}
	mock.lockCreateProject.Lock()
	mock.calls.CreateProject = append(mock.calls.CreateProject, callInfo)
	mock.lockCreateProject.Unlock()
	return mock.CreateProjectFunc(prj)
}

// CreateProjectCalls gets all the calls that were made to CreateProject.
// Check the length with:
//     len(mockedProjectsDBOperations.CreateProjectCalls())
func (mock *ProjectsDBOperationsMock) CreateProjectCalls() []struct {
	Prj *models.ExpandedProject
} {
	var calls []struct {
		Prj *models.ExpandedProject
	}
	mock.lockCreateProject.RLock()
	calls = mock.calls.CreateProject
	mock.lockCreateProject.RUnlock()
	return calls
}

// DeleteProject calls DeleteProjectFunc.
func (mock *ProjectsDBOperationsMock) DeleteProject(projectName string) error {
	if mock.DeleteProjectFunc == nil {
		panic("ProjectsDBOperationsMock.DeleteProjectFunc: method is nil but ProjectsDBOperations.DeleteProject was just called")
	}
	callInfo := struct {
		ProjectName string
	}{
		ProjectName: projectName,
	}
	mock.lockDeleteProject.Lock()
	mock.calls.DeleteProject = append(mock.calls.DeleteProject, callInfo)
	mock.lockDeleteProject.Unlock()
	return mock.DeleteProjectFunc(projectName)
}

// DeleteProjectCalls gets all the calls that were made to DeleteProject.
// Check the length with:
//     len(mockedProjectsDBOperations.DeleteProjectCalls())
func (mock *ProjectsDBOperationsMock) DeleteProjectCalls() []struct {
	ProjectName string
} {
	var calls []struct {
		ProjectName string
	}
	mock.lockDeleteProject.RLock()
	calls = mock.calls.DeleteProject
	mock.lockDeleteProject.RUnlock()
	return calls
}

// GetProject calls GetProjectFunc.
func (mock *ProjectsDBOperationsMock) GetProject(projectName string) (*models.ExpandedProject, error) {
	if mock.GetProjectFunc == nil {
		panic("ProjectsDBOperationsMock.GetProjectFunc: method is nil but ProjectsDBOperations.GetProject was just called")
	}
	callInfo := struct {
		ProjectName string
	}{
		ProjectName: projectName,
	}
	mock.lockGetProject.Lock()
	mock.calls.GetProject = append(mock.calls.GetProject, callInfo)
	mock.lockGetProject.Unlock()
	return mock.GetProjectFunc(projectName)
}

// GetProjectCalls gets all the calls that were made to GetProject.
// Check the length with:
//     len(mockedProjectsDBOperations.GetProjectCalls())
func (mock *ProjectsDBOperationsMock) GetProjectCalls() []struct {
	ProjectName string
} {
	var calls []struct {
		ProjectName string
	}
	mock.lockGetProject.RLock()
	calls = mock.calls.GetProject
	mock.lockGetProject.RUnlock()
	return calls
}

// GetProjects calls GetProjectsFunc.
func (mock *ProjectsDBOperationsMock) GetProjects() ([]*models.ExpandedProject, error) {
	if mock.GetProjectsFunc == nil {
		panic("ProjectsDBOperationsMock.GetProjectsFunc: method is nil but ProjectsDBOperations.GetProjects was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetProjects.Lock()
	mock.calls.GetProjects = append(mock.calls.GetProjects, callInfo)
	mock.lockGetProjects.Unlock()
	return mock.GetProjectsFunc()
}

// GetProjectsCalls gets all the calls that were made to GetProjects.
// Check the length with:
//     len(mockedProjectsDBOperations.GetProjectsCalls())
func (mock *ProjectsDBOperationsMock) GetProjectsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetProjects.RLock()
	calls = mock.calls.GetProjects
	mock.lockGetProjects.RUnlock()
	return calls
}

// UpdateUpstreamInfo calls UpdateUpstreamInfoFunc.
func (mock *ProjectsDBOperationsMock) UpdateUpstreamInfo(projectName string, uri string, user string) error {
	if mock.UpdateUpstreamInfoFunc == nil {
		panic("ProjectsDBOperationsMock.UpdateUpstreamInfoFunc: method is nil but ProjectsDBOperations.UpdateUpstreamInfo was just called")
	}
	callInfo := struct {
		ProjectName string
		URI         string
		User        string
	}{
		ProjectName: projectName,
		URI:         uri,
		User:        user,
	}
	mock.lockUpdateUpstreamInfo.Lock()
	mock.calls.UpdateUpstreamInfo = append(mock.calls.UpdateUpstreamInfo, callInfo)
	mock.lockUpdateUpstreamInfo.Unlock()
	return mock.UpdateUpstreamInfoFunc(projectName, uri, user)
}

// UpdateUpstreamInfoCalls gets all the calls that were made to UpdateUpstreamInfo.
// Check the length with:
//     len(mockedProjectsDBOperations.UpdateUpstreamInfoCalls())
func (mock *ProjectsDBOperationsMock) UpdateUpstreamInfoCalls() []struct {
	ProjectName string
	URI         string
	User        string
} {
	var calls []struct {
		ProjectName string
		URI         string
		User        string
	}
	mock.lockUpdateUpstreamInfo.RLock()
	calls = mock.calls.UpdateUpstreamInfo
	mock.lockUpdateUpstreamInfo.RUnlock()
	return calls
}
