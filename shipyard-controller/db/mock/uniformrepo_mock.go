// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package db_mock

import (
	"github.com/keptn/keptn/shipyard-controller/models"
	"sync"
)

// UniformRepoMock is a mock implementation of db.UniformRepo.
//
// 	func TestSomethingThatUsesUniformRepo(t *testing.T) {
//
// 		// make and configure a mocked db.UniformRepo
// 		mockedUniformRepo := &UniformRepoMock{
// 			CreateOrUpdateUniformIntegrationFunc: func(integration models.Integration) error {
// 				panic("mock out the CreateOrUpdateUniformIntegration method")
// 			},
// 			DeleteUniformIntegrationFunc: func(id string) error {
// 				panic("mock out the DeleteUniformIntegration method")
// 			},
// 			GetUniformIntegrationsFunc: func(filter models.GetUniformIntegrationParams) ([]models.Integration, error) {
// 				panic("mock out the GetUniformIntegrations method")
// 			},
// 		}
//
// 		// use mockedUniformRepo in code that requires db.UniformRepo
// 		// and then make assertions.
//
// 	}
type UniformRepoMock struct {
	// CreateOrUpdateUniformIntegrationFunc mocks the CreateOrUpdateUniformIntegration method.
	CreateOrUpdateUniformIntegrationFunc func(integration models.Integration) error

	// DeleteUniformIntegrationFunc mocks the DeleteUniformIntegration method.
	DeleteUniformIntegrationFunc func(id string) error

	// GetUniformIntegrationsFunc mocks the GetUniformIntegrations method.
	GetUniformIntegrationsFunc func(filter models.GetUniformIntegrationParams) ([]models.Integration, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateOrUpdateUniformIntegration holds details about calls to the CreateOrUpdateUniformIntegration method.
		CreateOrUpdateUniformIntegration []struct {
			// Integration is the integration argument value.
			Integration models.Integration
		}
		// DeleteUniformIntegration holds details about calls to the DeleteUniformIntegration method.
		DeleteUniformIntegration []struct {
			// ID is the id argument value.
			ID string
		}
		// GetUniformIntegrations holds details about calls to the GetUniformIntegrations method.
		GetUniformIntegrations []struct {
			// Filter is the filter argument value.
			Filter models.GetUniformIntegrationParams
		}
	}
	lockCreateOrUpdateUniformIntegration sync.RWMutex
	lockDeleteUniformIntegration         sync.RWMutex
	lockGetUniformIntegrations           sync.RWMutex
}

// CreateOrUpdateUniformIntegration calls CreateOrUpdateUniformIntegrationFunc.
func (mock *UniformRepoMock) CreateOrUpdateUniformIntegration(integration models.Integration) error {
	if mock.CreateOrUpdateUniformIntegrationFunc == nil {
		panic("UniformRepoMock.CreateOrUpdateUniformIntegrationFunc: method is nil but UniformRepo.CreateOrUpdateUniformIntegration was just called")
	}
	callInfo := struct {
		Integration models.Integration
	}{
		Integration: integration,
	}
	mock.lockCreateOrUpdateUniformIntegration.Lock()
	mock.calls.CreateOrUpdateUniformIntegration = append(mock.calls.CreateOrUpdateUniformIntegration, callInfo)
	mock.lockCreateOrUpdateUniformIntegration.Unlock()
	return mock.CreateOrUpdateUniformIntegrationFunc(integration)
}

// CreateOrUpdateUniformIntegrationCalls gets all the calls that were made to CreateOrUpdateUniformIntegration.
// Check the length with:
//     len(mockedUniformRepo.CreateOrUpdateUniformIntegrationCalls())
func (mock *UniformRepoMock) CreateOrUpdateUniformIntegrationCalls() []struct {
	Integration models.Integration
} {
	var calls []struct {
		Integration models.Integration
	}
	mock.lockCreateOrUpdateUniformIntegration.RLock()
	calls = mock.calls.CreateOrUpdateUniformIntegration
	mock.lockCreateOrUpdateUniformIntegration.RUnlock()
	return calls
}

// DeleteUniformIntegration calls DeleteUniformIntegrationFunc.
func (mock *UniformRepoMock) DeleteUniformIntegration(id string) error {
	if mock.DeleteUniformIntegrationFunc == nil {
		panic("UniformRepoMock.DeleteUniformIntegrationFunc: method is nil but UniformRepo.DeleteUniformIntegration was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockDeleteUniformIntegration.Lock()
	mock.calls.DeleteUniformIntegration = append(mock.calls.DeleteUniformIntegration, callInfo)
	mock.lockDeleteUniformIntegration.Unlock()
	return mock.DeleteUniformIntegrationFunc(id)
}

// DeleteUniformIntegrationCalls gets all the calls that were made to DeleteUniformIntegration.
// Check the length with:
//     len(mockedUniformRepo.DeleteUniformIntegrationCalls())
func (mock *UniformRepoMock) DeleteUniformIntegrationCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockDeleteUniformIntegration.RLock()
	calls = mock.calls.DeleteUniformIntegration
	mock.lockDeleteUniformIntegration.RUnlock()
	return calls
}

// GetUniformIntegrations calls GetUniformIntegrationsFunc.
func (mock *UniformRepoMock) GetUniformIntegrations(filter models.GetUniformIntegrationParams) ([]models.Integration, error) {
	if mock.GetUniformIntegrationsFunc == nil {
		panic("UniformRepoMock.GetUniformIntegrationsFunc: method is nil but UniformRepo.GetUniformIntegrations was just called")
	}
	callInfo := struct {
		Filter models.GetUniformIntegrationParams
	}{
		Filter: filter,
	}
	mock.lockGetUniformIntegrations.Lock()
	mock.calls.GetUniformIntegrations = append(mock.calls.GetUniformIntegrations, callInfo)
	mock.lockGetUniformIntegrations.Unlock()
	return mock.GetUniformIntegrationsFunc(filter)
}

// GetUniformIntegrationsCalls gets all the calls that were made to GetUniformIntegrations.
// Check the length with:
//     len(mockedUniformRepo.GetUniformIntegrationsCalls())
func (mock *UniformRepoMock) GetUniformIntegrationsCalls() []struct {
	Filter models.GetUniformIntegrationParams
} {
	var calls []struct {
		Filter models.GetUniformIntegrationParams
	}
	mock.lockGetUniformIntegrations.RLock()
	calls = mock.calls.GetUniformIntegrations
	mock.lockGetUniformIntegrations.RUnlock()
	return calls
}
