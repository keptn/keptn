// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package db_mock

import (
	"github.com/keptn/keptn/shipyard-controller/models"
	"sync"
)

// TaskSequenceRepoMock is a mock implementation of db.TaskSequenceRepo.
//
// 	func TestSomethingThatUsesTaskSequenceRepo(t *testing.T) {
//
// 		// make and configure a mocked db.TaskSequenceRepo
// 		mockedTaskSequenceRepo := &TaskSequenceRepoMock{
// 			CreateTaskExecutionFunc: func(project string, taskExecution models.TaskExecution) error {
// 				panic("mock out the CreateTaskExecution method")
// 			},
// 			DeleteRepoFunc: func(project string) error {
// 				panic("mock out the DeleteRepo method")
// 			},
// 			DeleteTaskExecutionFunc: func(keptnContext string, project string, stage string, taskSequenceName string) error {
// 				panic("mock out the DeleteTaskExecution method")
// 			},
// 			GetTaskExecutionsFunc: func(project string, filter models.TaskExecution) ([]models.TaskExecution, error) {
// 				panic("mock out the GetTaskExecutions method")
// 			},
// 		}
//
// 		// use mockedTaskSequenceRepo in code that requires db.TaskSequenceRepo
// 		// and then make assertions.
//
// 	}
type TaskSequenceRepoMock struct {
	// CreateTaskExecutionFunc mocks the CreateTaskExecution method.
	CreateTaskExecutionFunc func(project string, taskExecution models.TaskExecution) error

	// DeleteRepoFunc mocks the DeleteRepo method.
	DeleteRepoFunc func(project string) error

	// DeleteTaskExecutionFunc mocks the DeleteTaskExecution method.
	DeleteTaskExecutionFunc func(keptnContext string, project string, stage string, taskSequenceName string) error

	// GetTaskExecutionsFunc mocks the GetTaskExecutions method.
	GetTaskExecutionsFunc func(project string, filter models.TaskExecution) ([]models.TaskExecution, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateTaskExecution holds details about calls to the CreateTaskExecution method.
		CreateTaskExecution []struct {
			// Project is the project argument value.
			Project string
			// TaskExecution is the taskExecution argument value.
			TaskExecution models.TaskExecution
		}
		// DeleteRepo holds details about calls to the DeleteRepo method.
		DeleteRepo []struct {
			// Project is the project argument value.
			Project string
		}
		// DeleteTaskExecution holds details about calls to the DeleteTaskExecution method.
		DeleteTaskExecution []struct {
			// KeptnContext is the keptnContext argument value.
			KeptnContext string
			// Project is the project argument value.
			Project string
			// Stage is the stage argument value.
			Stage string
			// TaskSequenceName is the taskSequenceName argument value.
			TaskSequenceName string
		}
		// GetTaskExecutions holds details about calls to the GetTaskExecutions method.
		GetTaskExecutions []struct {
			// Project is the project argument value.
			Project string
			// Filter is the filter argument value.
			Filter models.TaskExecution
		}
	}
	lockCreateTaskExecution sync.RWMutex
	lockDeleteRepo          sync.RWMutex
	lockDeleteTaskExecution sync.RWMutex
	lockGetTaskExecutions   sync.RWMutex
}

// CreateTaskExecution calls CreateTaskExecutionFunc.
func (mock *TaskSequenceRepoMock) CreateTaskExecution(project string, taskExecution models.TaskExecution) error {
	if mock.CreateTaskExecutionFunc == nil {
		panic("TaskSequenceRepoMock.CreateTaskExecutionFunc: method is nil but TaskSequenceRepo.CreateTaskExecution was just called")
	}
	callInfo := struct {
		Project       string
		TaskExecution models.TaskExecution
	}{
		Project:       project,
		TaskExecution: taskExecution,
	}
	mock.lockCreateTaskExecution.Lock()
	mock.calls.CreateTaskExecution = append(mock.calls.CreateTaskExecution, callInfo)
	mock.lockCreateTaskExecution.Unlock()
	return mock.CreateTaskExecutionFunc(project, taskExecution)
}

// CreateTaskExecutionCalls gets all the calls that were made to CreateTaskExecution.
// Check the length with:
//     len(mockedTaskSequenceRepo.CreateTaskExecutionCalls())
func (mock *TaskSequenceRepoMock) CreateTaskExecutionCalls() []struct {
	Project       string
	TaskExecution models.TaskExecution
} {
	var calls []struct {
		Project       string
		TaskExecution models.TaskExecution
	}
	mock.lockCreateTaskExecution.RLock()
	calls = mock.calls.CreateTaskExecution
	mock.lockCreateTaskExecution.RUnlock()
	return calls
}

// DeleteRepo calls DeleteRepoFunc.
func (mock *TaskSequenceRepoMock) DeleteRepo(project string) error {
	if mock.DeleteRepoFunc == nil {
		panic("TaskSequenceRepoMock.DeleteRepoFunc: method is nil but TaskSequenceRepo.DeleteRepo was just called")
	}
	callInfo := struct {
		Project string
	}{
		Project: project,
	}
	mock.lockDeleteRepo.Lock()
	mock.calls.DeleteRepo = append(mock.calls.DeleteRepo, callInfo)
	mock.lockDeleteRepo.Unlock()
	return mock.DeleteRepoFunc(project)
}

// DeleteRepoCalls gets all the calls that were made to DeleteRepo.
// Check the length with:
//     len(mockedTaskSequenceRepo.DeleteRepoCalls())
func (mock *TaskSequenceRepoMock) DeleteRepoCalls() []struct {
	Project string
} {
	var calls []struct {
		Project string
	}
	mock.lockDeleteRepo.RLock()
	calls = mock.calls.DeleteRepo
	mock.lockDeleteRepo.RUnlock()
	return calls
}

// DeleteTaskExecution calls DeleteTaskExecutionFunc.
func (mock *TaskSequenceRepoMock) DeleteTaskExecution(keptnContext string, project string, stage string, taskSequenceName string) error {
	if mock.DeleteTaskExecutionFunc == nil {
		panic("TaskSequenceRepoMock.DeleteTaskExecutionFunc: method is nil but TaskSequenceRepo.DeleteTaskExecution was just called")
	}
	callInfo := struct {
		KeptnContext     string
		Project          string
		Stage            string
		TaskSequenceName string
	}{
		KeptnContext:     keptnContext,
		Project:          project,
		Stage:            stage,
		TaskSequenceName: taskSequenceName,
	}
	mock.lockDeleteTaskExecution.Lock()
	mock.calls.DeleteTaskExecution = append(mock.calls.DeleteTaskExecution, callInfo)
	mock.lockDeleteTaskExecution.Unlock()
	return mock.DeleteTaskExecutionFunc(keptnContext, project, stage, taskSequenceName)
}

// DeleteTaskExecutionCalls gets all the calls that were made to DeleteTaskExecution.
// Check the length with:
//     len(mockedTaskSequenceRepo.DeleteTaskExecutionCalls())
func (mock *TaskSequenceRepoMock) DeleteTaskExecutionCalls() []struct {
	KeptnContext     string
	Project          string
	Stage            string
	TaskSequenceName string
} {
	var calls []struct {
		KeptnContext     string
		Project          string
		Stage            string
		TaskSequenceName string
	}
	mock.lockDeleteTaskExecution.RLock()
	calls = mock.calls.DeleteTaskExecution
	mock.lockDeleteTaskExecution.RUnlock()
	return calls
}

// GetTaskExecutions calls GetTaskExecutionsFunc.
func (mock *TaskSequenceRepoMock) GetTaskExecutions(project string, filter models.TaskExecution) ([]models.TaskExecution, error) {
	if mock.GetTaskExecutionsFunc == nil {
		panic("TaskSequenceRepoMock.GetTaskExecutionsFunc: method is nil but TaskSequenceRepo.GetTaskExecutions was just called")
	}
	callInfo := struct {
		Project string
		Filter  models.TaskExecution
	}{
		Project: project,
		Filter:  filter,
	}
	mock.lockGetTaskExecutions.Lock()
	mock.calls.GetTaskExecutions = append(mock.calls.GetTaskExecutions, callInfo)
	mock.lockGetTaskExecutions.Unlock()
	return mock.GetTaskExecutionsFunc(project, filter)
}

// GetTaskExecutionsCalls gets all the calls that were made to GetTaskExecutions.
// Check the length with:
//     len(mockedTaskSequenceRepo.GetTaskExecutionsCalls())
func (mock *TaskSequenceRepoMock) GetTaskExecutionsCalls() []struct {
	Project string
	Filter  models.TaskExecution
} {
	var calls []struct {
		Project string
		Filter  models.TaskExecution
	}
	mock.lockGetTaskExecutions.RLock()
	calls = mock.calls.GetTaskExecutions
	mock.lockGetTaskExecutions.RUnlock()
	return calls
}
