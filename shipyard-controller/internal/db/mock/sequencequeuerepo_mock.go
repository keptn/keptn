// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package db_mock

import (
	"github.com/keptn/keptn/shipyard-controller/models"
	"sync"
)

// SequenceQueueRepoMock is a mock implementation of db.SequenceQueueRepo.
//
// 	func TestSomethingThatUsesSequenceQueueRepo(t *testing.T) {
//
// 		// make and configure a mocked db.SequenceQueueRepo
// 		mockedSequenceQueueRepo := &SequenceQueueRepoMock{
// 			DeleteQueuedSequencesFunc: func(itemFilter models.QueueItem) error {
// 				panic("mock out the DeleteQueuedSequences method")
// 			},
// 			GetQueuedSequencesFunc: func() ([]models.QueueItem, error) {
// 				panic("mock out the GetQueuedSequences method")
// 			},
// 			QueueSequenceFunc: func(item models.QueueItem) error {
// 				panic("mock out the QueueSequence method")
// 			},
// 		}
//
// 		// use mockedSequenceQueueRepo in code that requires db.SequenceQueueRepo
// 		// and then make assertions.
//
// 	}
type SequenceQueueRepoMock struct {
	// DeleteQueuedSequencesFunc mocks the DeleteQueuedSequences method.
	DeleteQueuedSequencesFunc func(itemFilter models.QueueItem) error

	// GetQueuedSequencesFunc mocks the GetQueuedSequences method.
	GetQueuedSequencesFunc func() ([]models.QueueItem, error)

	// QueueSequenceFunc mocks the QueueSequence method.
	QueueSequenceFunc func(item models.QueueItem) error

	// calls tracks calls to the methods.
	calls struct {
		// DeleteQueuedSequences holds details about calls to the DeleteQueuedSequences method.
		DeleteQueuedSequences []struct {
			// ItemFilter is the itemFilter argument value.
			ItemFilter models.QueueItem
		}
		// GetQueuedSequences holds details about calls to the GetQueuedSequences method.
		GetQueuedSequences []struct {
		}
		// QueueSequence holds details about calls to the QueueSequence method.
		QueueSequence []struct {
			// Item is the item argument value.
			Item models.QueueItem
		}
	}
	lockDeleteQueuedSequences sync.RWMutex
	lockGetQueuedSequences    sync.RWMutex
	lockQueueSequence         sync.RWMutex
}

// DeleteQueuedSequences calls DeleteQueuedSequencesFunc.
func (mock *SequenceQueueRepoMock) DeleteQueuedSequences(itemFilter models.QueueItem) error {
	if mock.DeleteQueuedSequencesFunc == nil {
		panic("SequenceQueueRepoMock.DeleteQueuedSequencesFunc: method is nil but SequenceQueueRepo.DeleteQueuedSequences was just called")
	}
	callInfo := struct {
		ItemFilter models.QueueItem
	}{
		ItemFilter: itemFilter,
	}
	mock.lockDeleteQueuedSequences.Lock()
	mock.calls.DeleteQueuedSequences = append(mock.calls.DeleteQueuedSequences, callInfo)
	mock.lockDeleteQueuedSequences.Unlock()
	return mock.DeleteQueuedSequencesFunc(itemFilter)
}

// DeleteQueuedSequencesCalls gets all the calls that were made to DeleteQueuedSequences.
// Check the length with:
//     len(mockedSequenceQueueRepo.DeleteQueuedSequencesCalls())
func (mock *SequenceQueueRepoMock) DeleteQueuedSequencesCalls() []struct {
	ItemFilter models.QueueItem
} {
	var calls []struct {
		ItemFilter models.QueueItem
	}
	mock.lockDeleteQueuedSequences.RLock()
	calls = mock.calls.DeleteQueuedSequences
	mock.lockDeleteQueuedSequences.RUnlock()
	return calls
}

// GetQueuedSequences calls GetQueuedSequencesFunc.
func (mock *SequenceQueueRepoMock) GetQueuedSequences() ([]models.QueueItem, error) {
	if mock.GetQueuedSequencesFunc == nil {
		panic("SequenceQueueRepoMock.GetQueuedSequencesFunc: method is nil but SequenceQueueRepo.GetQueuedSequences was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetQueuedSequences.Lock()
	mock.calls.GetQueuedSequences = append(mock.calls.GetQueuedSequences, callInfo)
	mock.lockGetQueuedSequences.Unlock()
	return mock.GetQueuedSequencesFunc()
}

// GetQueuedSequencesCalls gets all the calls that were made to GetQueuedSequences.
// Check the length with:
//     len(mockedSequenceQueueRepo.GetQueuedSequencesCalls())
func (mock *SequenceQueueRepoMock) GetQueuedSequencesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetQueuedSequences.RLock()
	calls = mock.calls.GetQueuedSequences
	mock.lockGetQueuedSequences.RUnlock()
	return calls
}

// QueueSequence calls QueueSequenceFunc.
func (mock *SequenceQueueRepoMock) QueueSequence(item models.QueueItem) error {
	if mock.QueueSequenceFunc == nil {
		panic("SequenceQueueRepoMock.QueueSequenceFunc: method is nil but SequenceQueueRepo.QueueSequence was just called")
	}
	callInfo := struct {
		Item models.QueueItem
	}{
		Item: item,
	}
	mock.lockQueueSequence.Lock()
	mock.calls.QueueSequence = append(mock.calls.QueueSequence, callInfo)
	mock.lockQueueSequence.Unlock()
	return mock.QueueSequenceFunc(item)
}

// QueueSequenceCalls gets all the calls that were made to QueueSequence.
// Check the length with:
//     len(mockedSequenceQueueRepo.QueueSequenceCalls())
func (mock *SequenceQueueRepoMock) QueueSequenceCalls() []struct {
	Item models.QueueItem
} {
	var calls []struct {
		Item models.QueueItem
	}
	mock.lockQueueSequence.RLock()
	calls = mock.calls.QueueSequence
	mock.lockQueueSequence.RUnlock()
	return calls
}
