// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	apimodels "github.com/keptn/go-utils/pkg/api/models"
	"sync"
)

// ISequenceFinishedHookMock is a mock implementation of controller.ISequenceFinishedHook.
//
// 	func TestSomethingThatUsesISequenceFinishedHook(t *testing.T) {
//
// 		// make and configure a mocked controller.ISequenceFinishedHook
// 		mockedISequenceFinishedHook := &ISequenceFinishedHookMock{
// 			OnSequenceFinishedFunc: func(event apimodels.KeptnContextExtendedCE)  {
// 				panic("mock out the OnSequenceFinished method")
// 			},
// 		}
//
// 		// use mockedISequenceFinishedHook in code that requires controller.ISequenceFinishedHook
// 		// and then make assertions.
//
// 	}
type ISequenceFinishedHookMock struct {
	// OnSequenceFinishedFunc mocks the OnSequenceFinished method.
	OnSequenceFinishedFunc func(event apimodels.KeptnContextExtendedCE)

	// calls tracks calls to the methods.
	calls struct {
		// OnSequenceFinished holds details about calls to the OnSequenceFinished method.
		OnSequenceFinished []struct {
			// Event is the event argument value.
			Event apimodels.KeptnContextExtendedCE
		}
	}
	lockOnSequenceFinished sync.RWMutex
}

// OnSequenceFinished calls OnSequenceFinishedFunc.
func (mock *ISequenceFinishedHookMock) OnSequenceFinished(event apimodels.KeptnContextExtendedCE) {
	if mock.OnSequenceFinishedFunc == nil {
		panic("ISequenceFinishedHookMock.OnSequenceFinishedFunc: method is nil but ISequenceFinishedHook.OnSequenceFinished was just called")
	}
	callInfo := struct {
		Event apimodels.KeptnContextExtendedCE
	}{
		Event: event,
	}
	mock.lockOnSequenceFinished.Lock()
	mock.calls.OnSequenceFinished = append(mock.calls.OnSequenceFinished, callInfo)
	mock.lockOnSequenceFinished.Unlock()
	mock.OnSequenceFinishedFunc(event)
}

// OnSequenceFinishedCalls gets all the calls that were made to OnSequenceFinished.
// Check the length with:
//     len(mockedISequenceFinishedHook.OnSequenceFinishedCalls())
func (mock *ISequenceFinishedHookMock) OnSequenceFinishedCalls() []struct {
	Event apimodels.KeptnContextExtendedCE
} {
	var calls []struct {
		Event apimodels.KeptnContextExtendedCE
	}
	mock.lockOnSequenceFinished.RLock()
	calls = mock.calls.OnSequenceFinished
	mock.lockOnSequenceFinished.RUnlock()
	return calls
}
