// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	scmodels "github.com/keptn/keptn/shipyard-controller/models"
	"sync"
)

// ISequenceAbortedHookMock is a mock implementation of controller.ISequenceAbortedHook.
//
// 	func TestSomethingThatUsesISequenceAbortedHook(t *testing.T) {
//
// 		// make and configure a mocked controller.ISequenceAbortedHook
// 		mockedISequenceAbortedHook := &ISequenceAbortedHookMock{
// 			OnSequenceAbortedFunc: func(event scmodels.EventScope)  {
// 				panic("mock out the OnSequenceAborted method")
// 			},
// 		}
//
// 		// use mockedISequenceAbortedHook in code that requires controller.ISequenceAbortedHook
// 		// and then make assertions.
//
// 	}
type ISequenceAbortedHookMock struct {
	// OnSequenceAbortedFunc mocks the OnSequenceAborted method.
	OnSequenceAbortedFunc func(event scmodels.EventScope)

	// calls tracks calls to the methods.
	calls struct {
		// OnSequenceAborted holds details about calls to the OnSequenceAborted method.
		OnSequenceAborted []struct {
			// Event is the event argument value.
			Event scmodels.EventScope
		}
	}
	lockOnSequenceAborted sync.RWMutex
}

// OnSequenceAborted calls OnSequenceAbortedFunc.
func (mock *ISequenceAbortedHookMock) OnSequenceAborted(event scmodels.EventScope) {
	if mock.OnSequenceAbortedFunc == nil {
		panic("ISequenceAbortedHookMock.OnSequenceAbortedFunc: method is nil but ISequenceAbortedHook.OnSequenceAborted was just called")
	}
	callInfo := struct {
		Event scmodels.EventScope
	}{
		Event: event,
	}
	mock.lockOnSequenceAborted.Lock()
	mock.calls.OnSequenceAborted = append(mock.calls.OnSequenceAborted, callInfo)
	mock.lockOnSequenceAborted.Unlock()
	mock.OnSequenceAbortedFunc(event)
}

// OnSequenceAbortedCalls gets all the calls that were made to OnSequenceAborted.
// Check the length with:
//     len(mockedISequenceAbortedHook.OnSequenceAbortedCalls())
func (mock *ISequenceAbortedHookMock) OnSequenceAbortedCalls() []struct {
	Event scmodels.EventScope
} {
	var calls []struct {
		Event scmodels.EventScope
	}
	mock.lockOnSequenceAborted.RLock()
	calls = mock.calls.OnSequenceAborted
	mock.lockOnSequenceAborted.RUnlock()
	return calls
}
