// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"github.com/keptn/keptn/shipyard-controller/models"
	"sync"
)

// ISequenceResumedHookMock is a mock implementation of sequencehooks.ISequenceResumedHook.
//
// 	func TestSomethingThatUsesISequenceResumedHook(t *testing.T) {
//
// 		// make and configure a mocked sequencehooks.ISequenceResumedHook
// 		mockedISequenceResumedHook := &ISequenceResumedHookMock{
// 			OnSequenceResumedFunc: func(resume models.EventScope)  {
// 				panic("mock out the OnSequenceResumed method")
// 			},
// 		}
//
// 		// use mockedISequenceResumedHook in code that requires sequencehooks.ISequenceResumedHook
// 		// and then make assertions.
//
// 	}
type ISequenceResumedHookMock struct {
	// OnSequenceResumedFunc mocks the OnSequenceResumed method.
	OnSequenceResumedFunc func(resume models.EventScope)

	// calls tracks calls to the methods.
	calls struct {
		// OnSequenceResumed holds details about calls to the OnSequenceResumed method.
		OnSequenceResumed []struct {
			// Resume is the resume argument value.
			Resume models.EventScope
		}
	}
	lockOnSequenceResumed sync.RWMutex
}

// OnSequenceResumed calls OnSequenceResumedFunc.
func (mock *ISequenceResumedHookMock) OnSequenceResumed(resume models.EventScope) {
	if mock.OnSequenceResumedFunc == nil {
		panic("ISequenceResumedHookMock.OnSequenceResumedFunc: method is nil but ISequenceResumedHook.OnSequenceResumed was just called")
	}
	callInfo := struct {
		Resume models.EventScope
	}{
		Resume: resume,
	}
	mock.lockOnSequenceResumed.Lock()
	mock.calls.OnSequenceResumed = append(mock.calls.OnSequenceResumed, callInfo)
	mock.lockOnSequenceResumed.Unlock()
	mock.OnSequenceResumedFunc(resume)
}

// OnSequenceResumedCalls gets all the calls that were made to OnSequenceResumed.
// Check the length with:
//     len(mockedISequenceResumedHook.OnSequenceResumedCalls())
func (mock *ISequenceResumedHookMock) OnSequenceResumedCalls() []struct {
	Resume models.EventScope
} {
	var calls []struct {
		Resume models.EventScope
	}
	mock.lockOnSequenceResumed.RLock()
	calls = mock.calls.OnSequenceResumed
	mock.lockOnSequenceResumed.RUnlock()
	return calls
}
