// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	apimodels "github.com/keptn/go-utils/pkg/api/models"
	"sync"
)

// ISequenceTaskEventHookMock is a mock implementation of controller.ISequenceTaskEventHook.
//
// 	func TestSomethingThatUsesISequenceTaskEventHook(t *testing.T) {
//
// 		// make and configure a mocked controller.ISequenceTaskEventHook
// 		mockedISequenceTaskEventHook := &ISequenceTaskEventHookMock{
// 			OnSequenceTaskEventFunc: func(keptnContextExtendedCE apimodels.KeptnContextExtendedCE)  {
// 				panic("mock out the OnSequenceTaskEvent method")
// 			},
// 		}
//
// 		// use mockedISequenceTaskEventHook in code that requires controller.ISequenceTaskEventHook
// 		// and then make assertions.
//
// 	}
type ISequenceTaskEventHookMock struct {
	// OnSequenceTaskEventFunc mocks the OnSequenceTaskEvent method.
	OnSequenceTaskEventFunc func(keptnContextExtendedCE apimodels.KeptnContextExtendedCE)

	// calls tracks calls to the methods.
	calls struct {
		// OnSequenceTaskEvent holds details about calls to the OnSequenceTaskEvent method.
		OnSequenceTaskEvent []struct {
			// KeptnContextExtendedCE is the keptnContextExtendedCE argument value.
			KeptnContextExtendedCE apimodels.KeptnContextExtendedCE
		}
	}
	lockOnSequenceTaskEvent sync.RWMutex
}

// OnSequenceTaskEvent calls OnSequenceTaskEventFunc.
func (mock *ISequenceTaskEventHookMock) OnSequenceTaskEvent(keptnContextExtendedCE apimodels.KeptnContextExtendedCE) {
	if mock.OnSequenceTaskEventFunc == nil {
		panic("ISequenceTaskEventHookMock.OnSequenceTaskEventFunc: method is nil but ISequenceTaskEventHook.OnSequenceTaskEvent was just called")
	}
	callInfo := struct {
		KeptnContextExtendedCE apimodels.KeptnContextExtendedCE
	}{
		KeptnContextExtendedCE: keptnContextExtendedCE,
	}
	mock.lockOnSequenceTaskEvent.Lock()
	mock.calls.OnSequenceTaskEvent = append(mock.calls.OnSequenceTaskEvent, callInfo)
	mock.lockOnSequenceTaskEvent.Unlock()
	mock.OnSequenceTaskEventFunc(keptnContextExtendedCE)
}

// OnSequenceTaskEventCalls gets all the calls that were made to OnSequenceTaskEvent.
// Check the length with:
//     len(mockedISequenceTaskEventHook.OnSequenceTaskEventCalls())
func (mock *ISequenceTaskEventHookMock) OnSequenceTaskEventCalls() []struct {
	KeptnContextExtendedCE apimodels.KeptnContextExtendedCE
} {
	var calls []struct {
		KeptnContextExtendedCE apimodels.KeptnContextExtendedCE
	}
	mock.lockOnSequenceTaskEvent.RLock()
	calls = mock.calls.OnSequenceTaskEvent
	mock.lockOnSequenceTaskEvent.RUnlock()
	return calls
}
