// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	scmodels "github.com/keptn/keptn/shipyard-controller/models"
	"sync"
)

// IRepositoryProvisionerMock is a mock implementation of handler.IRepositoryProvisioner.
//
// 	func TestSomethingThatUsesIRepositoryProvisioner(t *testing.T) {
//
// 		// make and configure a mocked handler.IRepositoryProvisioner
// 		mockedIRepositoryProvisioner := &IRepositoryProvisionerMock{
// 			DeleteRepositoryFunc: func(projectName string, namespace string) error {
// 				panic("mock out the DeleteRepository method")
// 			},
// 			ProvideRepositoryFunc: func(projectName string, namespace string) (*scmodels.ProvisioningData, error) {
// 				panic("mock out the ProvideRepository method")
// 			},
// 		}
//
// 		// use mockedIRepositoryProvisioner in code that requires handler.IRepositoryProvisioner
// 		// and then make assertions.
//
// 	}
type IRepositoryProvisionerMock struct {
	// DeleteRepositoryFunc mocks the DeleteRepository method.
	DeleteRepositoryFunc func(projectName string, namespace string) error

	// ProvideRepositoryFunc mocks the ProvideRepository method.
	ProvideRepositoryFunc func(projectName string, namespace string) (*scmodels.ProvisioningData, error)

	// calls tracks calls to the methods.
	calls struct {
		// DeleteRepository holds details about calls to the DeleteRepository method.
		DeleteRepository []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// Namespace is the namespace argument value.
			Namespace string
		}
		// ProvideRepository holds details about calls to the ProvideRepository method.
		ProvideRepository []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
	lockDeleteRepository  sync.RWMutex
	lockProvideRepository sync.RWMutex
}

// DeleteRepository calls DeleteRepositoryFunc.
func (mock *IRepositoryProvisionerMock) DeleteRepository(projectName string, namespace string) error {
	if mock.DeleteRepositoryFunc == nil {
		panic("IRepositoryProvisionerMock.DeleteRepositoryFunc: method is nil but IRepositoryProvisioner.DeleteRepository was just called")
	}
	callInfo := struct {
		ProjectName string
		Namespace   string
	}{
		ProjectName: projectName,
		Namespace:   namespace,
	}
	mock.lockDeleteRepository.Lock()
	mock.calls.DeleteRepository = append(mock.calls.DeleteRepository, callInfo)
	mock.lockDeleteRepository.Unlock()
	return mock.DeleteRepositoryFunc(projectName, namespace)
}

// DeleteRepositoryCalls gets all the calls that were made to DeleteRepository.
// Check the length with:
//     len(mockedIRepositoryProvisioner.DeleteRepositoryCalls())
func (mock *IRepositoryProvisionerMock) DeleteRepositoryCalls() []struct {
	ProjectName string
	Namespace   string
} {
	var calls []struct {
		ProjectName string
		Namespace   string
	}
	mock.lockDeleteRepository.RLock()
	calls = mock.calls.DeleteRepository
	mock.lockDeleteRepository.RUnlock()
	return calls
}

// ProvideRepository calls ProvideRepositoryFunc.
func (mock *IRepositoryProvisionerMock) ProvideRepository(projectName string, namespace string) (*scmodels.ProvisioningData, error) {
	if mock.ProvideRepositoryFunc == nil {
		panic("IRepositoryProvisionerMock.ProvideRepositoryFunc: method is nil but IRepositoryProvisioner.ProvideRepository was just called")
	}
	callInfo := struct {
		ProjectName string
		Namespace   string
	}{
		ProjectName: projectName,
		Namespace:   namespace,
	}
	mock.lockProvideRepository.Lock()
	mock.calls.ProvideRepository = append(mock.calls.ProvideRepository, callInfo)
	mock.lockProvideRepository.Unlock()
	return mock.ProvideRepositoryFunc(projectName, namespace)
}

// ProvideRepositoryCalls gets all the calls that were made to ProvideRepository.
// Check the length with:
//     len(mockedIRepositoryProvisioner.ProvideRepositoryCalls())
func (mock *IRepositoryProvisionerMock) ProvideRepositoryCalls() []struct {
	ProjectName string
	Namespace   string
} {
	var calls []struct {
		ProjectName string
		Namespace   string
	}
	mock.lockProvideRepository.RLock()
	calls = mock.calls.ProvideRepository
	mock.lockProvideRepository.RUnlock()
	return calls
}
