// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	apimodels "github.com/keptn/go-utils/pkg/api/models"
	"github.com/keptn/keptn/shipyard-controller/models"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"sync"
)

// Ensure, that IDebugManagerMock does implement handler.IDebugManager.
// If this is not the case, regenerate this file with moq.
//var _ handler.IDebugManager = &IDebugManagerMock{}

// IDebugManagerMock is a mock implementation of handler.IDebugManager.
//
// 	func TestSomethingThatUsesIDebugManager(t *testing.T) {
//
// 		// make and configure a mocked handler.IDebugManager
// 		mockedIDebugManager := &IDebugManagerMock{
// 			GetAllEventsFunc: func(projectName string, shkeptncontext string) ([]*apimodels.KeptnContextExtendedCE, error) {
// 				panic("mock out the GetAllEvents method")
// 			},
// 			GetAllProjectsFunc: func() ([]*apimodels.ExpandedProject, error) {
// 				panic("mock out the GetAllProjects method")
// 			},
// 			GetAllSequencesForProjectFunc: func(projectName string, paginationParams models.PaginationParams) ([]models.SequenceExecution, *models.PaginationResult, error) {
// 				panic("mock out the GetAllSequencesForProject method")
// 			},
// 			GetBlockingSequencesFunc: func(projectName string, shkeptncontext string, stage string) ([]models.SequenceExecution, error) {
// 				panic("mock out the GetBlockingSequences method")
// 			},
// 			GetDatabaseDumpFunc: func(collectionName string) ([]primitive.M, error) {
// 				panic("mock out the GetDatabaseDump method")
// 			},
// 			GetEventByIDFunc: func(projectName string, shkeptncontext string, eventId string) (*apimodels.KeptnContextExtendedCE, error) {
// 				panic("mock out the GetEventByID method")
// 			},
// 			GetSequenceByIDFunc: func(projectName string, shkeptncontext string) (*apimodels.SequenceState, error) {
// 				panic("mock out the GetSequenceByID method")
// 			},
// 			ListAllCollectionsFunc: func() ([]string, error) {
// 				panic("mock out the ListAllCollections method")
// 			},
// 		}
//
// 		// use mockedIDebugManager in code that requires handler.IDebugManager
// 		// and then make assertions.
//
// 	}
type IDebugManagerMock struct {
	// GetAllEventsFunc mocks the GetAllEvents method.
	GetAllEventsFunc func(projectName string, shkeptncontext string) ([]*apimodels.KeptnContextExtendedCE, error)

	// GetAllProjectsFunc mocks the GetAllProjects method.
	GetAllProjectsFunc func() ([]*apimodels.ExpandedProject, error)

	// GetAllSequencesForProjectFunc mocks the GetAllSequencesForProject method.
	GetAllSequencesForProjectFunc func(projectName string, paginationParams models.PaginationParams) ([]models.SequenceExecution, *models.PaginationResult, error)

	// GetBlockingSequencesFunc mocks the GetBlockingSequences method.
	GetBlockingSequencesFunc func(projectName string, shkeptncontext string, stage string) ([]models.SequenceExecution, error)

	// GetDatabaseDumpFunc mocks the GetDatabaseDump method.
	GetDatabaseDumpFunc func(collectionName string) ([]primitive.M, error)

	// GetEventByIDFunc mocks the GetEventByID method.
	GetEventByIDFunc func(projectName string, shkeptncontext string, eventId string) (*apimodels.KeptnContextExtendedCE, error)

	// GetSequenceByIDFunc mocks the GetSequenceByID method.
	GetSequenceByIDFunc func(projectName string, shkeptncontext string) (*apimodels.SequenceState, error)

	// ListAllCollectionsFunc mocks the ListAllCollections method.
	ListAllCollectionsFunc func() ([]string, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAllEvents holds details about calls to the GetAllEvents method.
		GetAllEvents []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// Shkeptncontext is the shkeptncontext argument value.
			Shkeptncontext string
		}
		// GetAllProjects holds details about calls to the GetAllProjects method.
		GetAllProjects []struct {
		}
		// GetAllSequencesForProject holds details about calls to the GetAllSequencesForProject method.
		GetAllSequencesForProject []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// PaginationParams is the paginationParams argument value.
			PaginationParams models.PaginationParams
		}
		// GetBlockingSequences holds details about calls to the GetBlockingSequences method.
		GetBlockingSequences []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// Shkeptncontext is the shkeptncontext argument value.
			Shkeptncontext string
			// Stage is the stage argument value.
			Stage string
		}
		// GetDatabaseDump holds details about calls to the GetDatabaseDump method.
		GetDatabaseDump []struct {
			// CollectionName is the collectionName argument value.
			CollectionName string
		}
		// GetEventByID holds details about calls to the GetEventByID method.
		GetEventByID []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// Shkeptncontext is the shkeptncontext argument value.
			Shkeptncontext string
			// EventId is the eventId argument value.
			EventId string
		}
		// GetSequenceByID holds details about calls to the GetSequenceByID method.
		GetSequenceByID []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// Shkeptncontext is the shkeptncontext argument value.
			Shkeptncontext string
		}
		// ListAllCollections holds details about calls to the ListAllCollections method.
		ListAllCollections []struct {
		}
	}
	lockGetAllEvents              sync.RWMutex
	lockGetAllProjects            sync.RWMutex
	lockGetAllSequencesForProject sync.RWMutex
	lockGetBlockingSequences      sync.RWMutex
	lockGetDatabaseDump           sync.RWMutex
	lockGetEventByID              sync.RWMutex
	lockGetSequenceByID           sync.RWMutex
	lockListAllCollections        sync.RWMutex
}

// GetAllEvents calls GetAllEventsFunc.
func (mock *IDebugManagerMock) GetAllEvents(projectName string, shkeptncontext string) ([]*apimodels.KeptnContextExtendedCE, error) {
	if mock.GetAllEventsFunc == nil {
		panic("IDebugManagerMock.GetAllEventsFunc: method is nil but IDebugManager.GetAllEvents was just called")
	}
	callInfo := struct {
		ProjectName    string
		Shkeptncontext string
	}{
		ProjectName:    projectName,
		Shkeptncontext: shkeptncontext,
	}
	mock.lockGetAllEvents.Lock()
	mock.calls.GetAllEvents = append(mock.calls.GetAllEvents, callInfo)
	mock.lockGetAllEvents.Unlock()
	return mock.GetAllEventsFunc(projectName, shkeptncontext)
}

// GetAllEventsCalls gets all the calls that were made to GetAllEvents.
// Check the length with:
//     len(mockedIDebugManager.GetAllEventsCalls())
func (mock *IDebugManagerMock) GetAllEventsCalls() []struct {
	ProjectName    string
	Shkeptncontext string
} {
	var calls []struct {
		ProjectName    string
		Shkeptncontext string
	}
	mock.lockGetAllEvents.RLock()
	calls = mock.calls.GetAllEvents
	mock.lockGetAllEvents.RUnlock()
	return calls
}

// GetAllProjects calls GetAllProjectsFunc.
func (mock *IDebugManagerMock) GetAllProjects() ([]*apimodels.ExpandedProject, error) {
	if mock.GetAllProjectsFunc == nil {
		panic("IDebugManagerMock.GetAllProjectsFunc: method is nil but IDebugManager.GetAllProjects was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetAllProjects.Lock()
	mock.calls.GetAllProjects = append(mock.calls.GetAllProjects, callInfo)
	mock.lockGetAllProjects.Unlock()
	return mock.GetAllProjectsFunc()
}

// GetAllProjectsCalls gets all the calls that were made to GetAllProjects.
// Check the length with:
//     len(mockedIDebugManager.GetAllProjectsCalls())
func (mock *IDebugManagerMock) GetAllProjectsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetAllProjects.RLock()
	calls = mock.calls.GetAllProjects
	mock.lockGetAllProjects.RUnlock()
	return calls
}

// GetAllSequencesForProject calls GetAllSequencesForProjectFunc.
func (mock *IDebugManagerMock) GetAllSequencesForProject(projectName string, paginationParams models.PaginationParams) ([]models.SequenceExecution, *models.PaginationResult, error) {
	if mock.GetAllSequencesForProjectFunc == nil {
		panic("IDebugManagerMock.GetAllSequencesForProjectFunc: method is nil but IDebugManager.GetAllSequencesForProject was just called")
	}
	callInfo := struct {
		ProjectName      string
		PaginationParams models.PaginationParams
	}{
		ProjectName:      projectName,
		PaginationParams: paginationParams,
	}
	mock.lockGetAllSequencesForProject.Lock()
	mock.calls.GetAllSequencesForProject = append(mock.calls.GetAllSequencesForProject, callInfo)
	mock.lockGetAllSequencesForProject.Unlock()
	return mock.GetAllSequencesForProjectFunc(projectName, paginationParams)
}

// GetAllSequencesForProjectCalls gets all the calls that were made to GetAllSequencesForProject.
// Check the length with:
//     len(mockedIDebugManager.GetAllSequencesForProjectCalls())
func (mock *IDebugManagerMock) GetAllSequencesForProjectCalls() []struct {
	ProjectName      string
	PaginationParams models.PaginationParams
} {
	var calls []struct {
		ProjectName      string
		PaginationParams models.PaginationParams
	}
	mock.lockGetAllSequencesForProject.RLock()
	calls = mock.calls.GetAllSequencesForProject
	mock.lockGetAllSequencesForProject.RUnlock()
	return calls
}

// GetBlockingSequences calls GetBlockingSequencesFunc.
func (mock *IDebugManagerMock) GetBlockingSequences(projectName string, shkeptncontext string, stage string) ([]models.SequenceExecution, error) {
	if mock.GetBlockingSequencesFunc == nil {
		panic("IDebugManagerMock.GetBlockingSequencesFunc: method is nil but IDebugManager.GetBlockingSequences was just called")
	}
	callInfo := struct {
		ProjectName    string
		Shkeptncontext string
		Stage          string
	}{
		ProjectName:    projectName,
		Shkeptncontext: shkeptncontext,
		Stage:          stage,
	}
	mock.lockGetBlockingSequences.Lock()
	mock.calls.GetBlockingSequences = append(mock.calls.GetBlockingSequences, callInfo)
	mock.lockGetBlockingSequences.Unlock()
	return mock.GetBlockingSequencesFunc(projectName, shkeptncontext, stage)
}

// GetBlockingSequencesCalls gets all the calls that were made to GetBlockingSequences.
// Check the length with:
//     len(mockedIDebugManager.GetBlockingSequencesCalls())
func (mock *IDebugManagerMock) GetBlockingSequencesCalls() []struct {
	ProjectName    string
	Shkeptncontext string
	Stage          string
} {
	var calls []struct {
		ProjectName    string
		Shkeptncontext string
		Stage          string
	}
	mock.lockGetBlockingSequences.RLock()
	calls = mock.calls.GetBlockingSequences
	mock.lockGetBlockingSequences.RUnlock()
	return calls
}

// GetDatabaseDump calls GetDatabaseDumpFunc.
func (mock *IDebugManagerMock) GetDatabaseDump(collectionName string) ([]primitive.M, error) {
	if mock.GetDatabaseDumpFunc == nil {
		panic("IDebugManagerMock.GetDatabaseDumpFunc: method is nil but IDebugManager.GetDatabaseDump was just called")
	}
	callInfo := struct {
		CollectionName string
	}{
		CollectionName: collectionName,
	}
	mock.lockGetDatabaseDump.Lock()
	mock.calls.GetDatabaseDump = append(mock.calls.GetDatabaseDump, callInfo)
	mock.lockGetDatabaseDump.Unlock()
	return mock.GetDatabaseDumpFunc(collectionName)
}

// GetDatabaseDumpCalls gets all the calls that were made to GetDatabaseDump.
// Check the length with:
//     len(mockedIDebugManager.GetDatabaseDumpCalls())
func (mock *IDebugManagerMock) GetDatabaseDumpCalls() []struct {
	CollectionName string
} {
	var calls []struct {
		CollectionName string
	}
	mock.lockGetDatabaseDump.RLock()
	calls = mock.calls.GetDatabaseDump
	mock.lockGetDatabaseDump.RUnlock()
	return calls
}

// GetEventByID calls GetEventByIDFunc.
func (mock *IDebugManagerMock) GetEventByID(projectName string, shkeptncontext string, eventId string) (*apimodels.KeptnContextExtendedCE, error) {
	if mock.GetEventByIDFunc == nil {
		panic("IDebugManagerMock.GetEventByIDFunc: method is nil but IDebugManager.GetEventByID was just called")
	}
	callInfo := struct {
		ProjectName    string
		Shkeptncontext string
		EventId        string
	}{
		ProjectName:    projectName,
		Shkeptncontext: shkeptncontext,
		EventId:        eventId,
	}
	mock.lockGetEventByID.Lock()
	mock.calls.GetEventByID = append(mock.calls.GetEventByID, callInfo)
	mock.lockGetEventByID.Unlock()
	return mock.GetEventByIDFunc(projectName, shkeptncontext, eventId)
}

// GetEventByIDCalls gets all the calls that were made to GetEventByID.
// Check the length with:
//     len(mockedIDebugManager.GetEventByIDCalls())
func (mock *IDebugManagerMock) GetEventByIDCalls() []struct {
	ProjectName    string
	Shkeptncontext string
	EventId        string
} {
	var calls []struct {
		ProjectName    string
		Shkeptncontext string
		EventId        string
	}
	mock.lockGetEventByID.RLock()
	calls = mock.calls.GetEventByID
	mock.lockGetEventByID.RUnlock()
	return calls
}

// GetSequenceByID calls GetSequenceByIDFunc.
func (mock *IDebugManagerMock) GetSequenceByID(projectName string, shkeptncontext string) (*apimodels.SequenceState, error) {
	if mock.GetSequenceByIDFunc == nil {
		panic("IDebugManagerMock.GetSequenceByIDFunc: method is nil but IDebugManager.GetSequenceByID was just called")
	}
	callInfo := struct {
		ProjectName    string
		Shkeptncontext string
	}{
		ProjectName:    projectName,
		Shkeptncontext: shkeptncontext,
	}
	mock.lockGetSequenceByID.Lock()
	mock.calls.GetSequenceByID = append(mock.calls.GetSequenceByID, callInfo)
	mock.lockGetSequenceByID.Unlock()
	return mock.GetSequenceByIDFunc(projectName, shkeptncontext)
}

// GetSequenceByIDCalls gets all the calls that were made to GetSequenceByID.
// Check the length with:
//     len(mockedIDebugManager.GetSequenceByIDCalls())
func (mock *IDebugManagerMock) GetSequenceByIDCalls() []struct {
	ProjectName    string
	Shkeptncontext string
} {
	var calls []struct {
		ProjectName    string
		Shkeptncontext string
	}
	mock.lockGetSequenceByID.RLock()
	calls = mock.calls.GetSequenceByID
	mock.lockGetSequenceByID.RUnlock()
	return calls
}

// ListAllCollections calls ListAllCollectionsFunc.
func (mock *IDebugManagerMock) ListAllCollections() ([]string, error) {
	if mock.ListAllCollectionsFunc == nil {
		panic("IDebugManagerMock.ListAllCollectionsFunc: method is nil but IDebugManager.ListAllCollections was just called")
	}
	callInfo := struct {
	}{}
	mock.lockListAllCollections.Lock()
	mock.calls.ListAllCollections = append(mock.calls.ListAllCollections, callInfo)
	mock.lockListAllCollections.Unlock()
	return mock.ListAllCollectionsFunc()
}

// ListAllCollectionsCalls gets all the calls that were made to ListAllCollections.
// Check the length with:
//     len(mockedIDebugManager.ListAllCollectionsCalls())
func (mock *IDebugManagerMock) ListAllCollectionsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockListAllCollections.RLock()
	calls = mock.calls.ListAllCollections
	mock.lockListAllCollections.RUnlock()
	return calls
}
