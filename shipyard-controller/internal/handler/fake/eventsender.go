// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"context"
	"github.com/cloudevents/sdk-go/v2/event"
	"sync"
)

// IEventSenderMock is a mock implementation of handler.IEventSender.
//
// 	func TestSomethingThatUsesIEventSender(t *testing.T) {
//
// 		// make and configure a mocked handler.IEventSender
// 		mockedIEventSender := &IEventSenderMock{
// 			SendFunc: func(ctx context.Context, eventMoqParam event.Event) error {
// 				panic("mock out the Send method")
// 			},
// 			SendEventFunc: func(eventMoqParam event.Event) error {
// 				panic("mock out the SendEvent method")
// 			},
// 		}
//
// 		// use mockedIEventSender in code that requires handler.IEventSender
// 		// and then make assertions.
//
// 	}
type IEventSenderMock struct {
	// SendFunc mocks the Send method.
	SendFunc func(ctx context.Context, eventMoqParam event.Event) error

	// SendEventFunc mocks the SendEvent method.
	SendEventFunc func(eventMoqParam event.Event) error

	// calls tracks calls to the methods.
	calls struct {
		// Send holds details about calls to the Send method.
		Send []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EventMoqParam is the eventMoqParam argument value.
			EventMoqParam event.Event
		}
		// SendEvent holds details about calls to the SendEvent method.
		SendEvent []struct {
			// EventMoqParam is the eventMoqParam argument value.
			EventMoqParam event.Event
		}
	}
	lockSend      sync.RWMutex
	lockSendEvent sync.RWMutex
}

// Send calls SendFunc.
func (mock *IEventSenderMock) Send(ctx context.Context, eventMoqParam event.Event) error {
	if mock.SendFunc == nil {
		panic("IEventSenderMock.SendFunc: method is nil but IEventSender.Send was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		EventMoqParam event.Event
	}{
		Ctx:           ctx,
		EventMoqParam: eventMoqParam,
	}
	mock.lockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	mock.lockSend.Unlock()
	return mock.SendFunc(ctx, eventMoqParam)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//     len(mockedIEventSender.SendCalls())
func (mock *IEventSenderMock) SendCalls() []struct {
	Ctx           context.Context
	EventMoqParam event.Event
} {
	var calls []struct {
		Ctx           context.Context
		EventMoqParam event.Event
	}
	mock.lockSend.RLock()
	calls = mock.calls.Send
	mock.lockSend.RUnlock()
	return calls
}

// SendEvent calls SendEventFunc.
func (mock *IEventSenderMock) SendEvent(eventMoqParam event.Event) error {
	if mock.SendEventFunc == nil {
		panic("IEventSenderMock.SendEventFunc: method is nil but IEventSender.SendEvent was just called")
	}
	callInfo := struct {
		EventMoqParam event.Event
	}{
		EventMoqParam: eventMoqParam,
	}
	mock.lockSendEvent.Lock()
	mock.calls.SendEvent = append(mock.calls.SendEvent, callInfo)
	mock.lockSendEvent.Unlock()
	return mock.SendEventFunc(eventMoqParam)
}

// SendEventCalls gets all the calls that were made to SendEvent.
// Check the length with:
//     len(mockedIEventSender.SendEventCalls())
func (mock *IEventSenderMock) SendEventCalls() []struct {
	EventMoqParam event.Event
} {
	var calls []struct {
		EventMoqParam event.Event
	}
	mock.lockSendEvent.RLock()
	calls = mock.calls.SendEvent
	mock.lockSendEvent.RUnlock()
	return calls
}
