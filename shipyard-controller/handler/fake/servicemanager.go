// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"github.com/keptn/keptn/shipyard-controller/models"
	"github.com/keptn/keptn/shipyard-controller/operations"
	"sync"
)

// IServiceManagerMock is a mock implementation of handler.IServiceManager.
//
// 	func TestSomethingThatUsesIServiceManager(t *testing.T) {
//
// 		// make and configure a mocked handler.IServiceManager
// 		mockedIServiceManager := &IServiceManagerMock{
// 			CreateServiceFunc: func(projectName string, params *operations.CreateServiceParams) error {
// 				panic("mock out the CreateService method")
// 			},
// 			DeleteServiceFunc: func(projectName string, serviceName string) error {
// 				panic("mock out the DeleteService method")
// 			},
// 			GetAllServicesFunc: func(projectName string, stageName string) ([]*models.ExpandedService, error) {
// 				panic("mock out the GetAllServices method")
// 			},
// 			GetServiceFunc: func(projectName string, stageName string, serviceName string) (*models.ExpandedService, error) {
// 				panic("mock out the GetService method")
// 			},
// 		}
//
// 		// use mockedIServiceManager in code that requires handler.IServiceManager
// 		// and then make assertions.
//
// 	}
type IServiceManagerMock struct {
	// CreateServiceFunc mocks the CreateService method.
	CreateServiceFunc func(projectName string, params *operations.CreateServiceParams) error

	// DeleteServiceFunc mocks the DeleteService method.
	DeleteServiceFunc func(projectName string, serviceName string) error

	// GetAllServicesFunc mocks the GetAllServices method.
	GetAllServicesFunc func(projectName string, stageName string) ([]*models.ExpandedService, error)

	// GetServiceFunc mocks the GetService method.
	GetServiceFunc func(projectName string, stageName string, serviceName string) (*models.ExpandedService, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateService holds details about calls to the CreateService method.
		CreateService []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// Params is the params argument value.
			Params *operations.CreateServiceParams
		}
		// DeleteService holds details about calls to the DeleteService method.
		DeleteService []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// ServiceName is the serviceName argument value.
			ServiceName string
		}
		// GetAllServices holds details about calls to the GetAllServices method.
		GetAllServices []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// StageName is the stageName argument value.
			StageName string
		}
		// GetService holds details about calls to the GetService method.
		GetService []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// StageName is the stageName argument value.
			StageName string
			// ServiceName is the serviceName argument value.
			ServiceName string
		}
	}
	lockCreateService  sync.RWMutex
	lockDeleteService  sync.RWMutex
	lockGetAllServices sync.RWMutex
	lockGetService     sync.RWMutex
}

// CreateService calls CreateServiceFunc.
func (mock *IServiceManagerMock) CreateService(projectName string, params *operations.CreateServiceParams) error {
	if mock.CreateServiceFunc == nil {
		panic("IServiceManagerMock.CreateServiceFunc: method is nil but IServiceManager.CreateService was just called")
	}
	callInfo := struct {
		ProjectName string
		Params      *operations.CreateServiceParams
	}{
		ProjectName: projectName,
		Params:      params,
	}
	mock.lockCreateService.Lock()
	mock.calls.CreateService = append(mock.calls.CreateService, callInfo)
	mock.lockCreateService.Unlock()
	return mock.CreateServiceFunc(projectName, params)
}

// CreateServiceCalls gets all the calls that were made to CreateService.
// Check the length with:
//     len(mockedIServiceManager.CreateServiceCalls())
func (mock *IServiceManagerMock) CreateServiceCalls() []struct {
	ProjectName string
	Params      *operations.CreateServiceParams
} {
	var calls []struct {
		ProjectName string
		Params      *operations.CreateServiceParams
	}
	mock.lockCreateService.RLock()
	calls = mock.calls.CreateService
	mock.lockCreateService.RUnlock()
	return calls
}

// DeleteService calls DeleteServiceFunc.
func (mock *IServiceManagerMock) DeleteService(projectName string, serviceName string) error {
	if mock.DeleteServiceFunc == nil {
		panic("IServiceManagerMock.DeleteServiceFunc: method is nil but IServiceManager.DeleteService was just called")
	}
	callInfo := struct {
		ProjectName string
		ServiceName string
	}{
		ProjectName: projectName,
		ServiceName: serviceName,
	}
	mock.lockDeleteService.Lock()
	mock.calls.DeleteService = append(mock.calls.DeleteService, callInfo)
	mock.lockDeleteService.Unlock()
	return mock.DeleteServiceFunc(projectName, serviceName)
}

// DeleteServiceCalls gets all the calls that were made to DeleteService.
// Check the length with:
//     len(mockedIServiceManager.DeleteServiceCalls())
func (mock *IServiceManagerMock) DeleteServiceCalls() []struct {
	ProjectName string
	ServiceName string
} {
	var calls []struct {
		ProjectName string
		ServiceName string
	}
	mock.lockDeleteService.RLock()
	calls = mock.calls.DeleteService
	mock.lockDeleteService.RUnlock()
	return calls
}

// GetAllServices calls GetAllServicesFunc.
func (mock *IServiceManagerMock) GetAllServices(projectName string, stageName string) ([]*models.ExpandedService, error) {
	if mock.GetAllServicesFunc == nil {
		panic("IServiceManagerMock.GetAllServicesFunc: method is nil but IServiceManager.GetAllServices was just called")
	}
	callInfo := struct {
		ProjectName string
		StageName   string
	}{
		ProjectName: projectName,
		StageName:   stageName,
	}
	mock.lockGetAllServices.Lock()
	mock.calls.GetAllServices = append(mock.calls.GetAllServices, callInfo)
	mock.lockGetAllServices.Unlock()
	return mock.GetAllServicesFunc(projectName, stageName)
}

// GetAllServicesCalls gets all the calls that were made to GetAllServices.
// Check the length with:
//     len(mockedIServiceManager.GetAllServicesCalls())
func (mock *IServiceManagerMock) GetAllServicesCalls() []struct {
	ProjectName string
	StageName   string
} {
	var calls []struct {
		ProjectName string
		StageName   string
	}
	mock.lockGetAllServices.RLock()
	calls = mock.calls.GetAllServices
	mock.lockGetAllServices.RUnlock()
	return calls
}

// GetService calls GetServiceFunc.
func (mock *IServiceManagerMock) GetService(projectName string, stageName string, serviceName string) (*models.ExpandedService, error) {
	if mock.GetServiceFunc == nil {
		panic("IServiceManagerMock.GetServiceFunc: method is nil but IServiceManager.GetService was just called")
	}
	callInfo := struct {
		ProjectName string
		StageName   string
		ServiceName string
	}{
		ProjectName: projectName,
		StageName:   stageName,
		ServiceName: serviceName,
	}
	mock.lockGetService.Lock()
	mock.calls.GetService = append(mock.calls.GetService, callInfo)
	mock.lockGetService.Unlock()
	return mock.GetServiceFunc(projectName, stageName, serviceName)
}

// GetServiceCalls gets all the calls that were made to GetService.
// Check the length with:
//     len(mockedIServiceManager.GetServiceCalls())
func (mock *IServiceManagerMock) GetServiceCalls() []struct {
	ProjectName string
	StageName   string
	ServiceName string
} {
	var calls []struct {
		ProjectName string
		StageName   string
		ServiceName string
	}
	mock.lockGetService.RLock()
	calls = mock.calls.GetService
	mock.lockGetService.RUnlock()
	return calls
}
