// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"github.com/keptn/keptn/shipyard-controller/models"
	"sync"
)

// IUniformIntegrationManagerMock is a mock implementation of handler.IUniformIntegrationManager.
//
// 	func TestSomethingThatUsesIUniformIntegrationManager(t *testing.T) {
//
// 		// make and configure a mocked handler.IUniformIntegrationManager
// 		mockedIUniformIntegrationManager := &IUniformIntegrationManagerMock{
// 			GetRegistrationsFunc: func(params models.GetUniformIntegrationParams) ([]models.Integration, error) {
// 				panic("mock out the GetRegistrations method")
// 			},
// 			RegisterFunc: func(integration models.Integration) error {
// 				panic("mock out the Register method")
// 			},
// 			UnregisterFunc: func(id string) error {
// 				panic("mock out the Unregister method")
// 			},
// 		}
//
// 		// use mockedIUniformIntegrationManager in code that requires handler.IUniformIntegrationManager
// 		// and then make assertions.
//
// 	}
type IUniformIntegrationManagerMock struct {
	// GetRegistrationsFunc mocks the GetRegistrations method.
	GetRegistrationsFunc func(params models.GetUniformIntegrationParams) ([]models.Integration, error)

	// RegisterFunc mocks the Register method.
	RegisterFunc func(integration models.Integration) error

	// UnregisterFunc mocks the Unregister method.
	UnregisterFunc func(id string) error

	// calls tracks calls to the methods.
	calls struct {
		// GetRegistrations holds details about calls to the GetRegistrations method.
		GetRegistrations []struct {
			// Params is the params argument value.
			Params models.GetUniformIntegrationParams
		}
		// Register holds details about calls to the Register method.
		Register []struct {
			// Integration is the integration argument value.
			Integration models.Integration
		}
		// Unregister holds details about calls to the Unregister method.
		Unregister []struct {
			// ID is the id argument value.
			ID string
		}
	}
	lockGetRegistrations sync.RWMutex
	lockRegister         sync.RWMutex
	lockUnregister       sync.RWMutex
}

// GetRegistrations calls GetRegistrationsFunc.
func (mock *IUniformIntegrationManagerMock) GetRegistrations(params models.GetUniformIntegrationParams) ([]models.Integration, error) {
	if mock.GetRegistrationsFunc == nil {
		panic("IUniformIntegrationManagerMock.GetRegistrationsFunc: method is nil but IUniformIntegrationManager.GetRegistrations was just called")
	}
	callInfo := struct {
		Params models.GetUniformIntegrationParams
	}{
		Params: params,
	}
	mock.lockGetRegistrations.Lock()
	mock.calls.GetRegistrations = append(mock.calls.GetRegistrations, callInfo)
	mock.lockGetRegistrations.Unlock()
	return mock.GetRegistrationsFunc(params)
}

// GetRegistrationsCalls gets all the calls that were made to GetRegistrations.
// Check the length with:
//     len(mockedIUniformIntegrationManager.GetRegistrationsCalls())
func (mock *IUniformIntegrationManagerMock) GetRegistrationsCalls() []struct {
	Params models.GetUniformIntegrationParams
} {
	var calls []struct {
		Params models.GetUniformIntegrationParams
	}
	mock.lockGetRegistrations.RLock()
	calls = mock.calls.GetRegistrations
	mock.lockGetRegistrations.RUnlock()
	return calls
}

// Register calls RegisterFunc.
func (mock *IUniformIntegrationManagerMock) Register(integration models.Integration) error {
	if mock.RegisterFunc == nil {
		panic("IUniformIntegrationManagerMock.RegisterFunc: method is nil but IUniformIntegrationManager.Register was just called")
	}
	callInfo := struct {
		Integration models.Integration
	}{
		Integration: integration,
	}
	mock.lockRegister.Lock()
	mock.calls.Register = append(mock.calls.Register, callInfo)
	mock.lockRegister.Unlock()
	return mock.RegisterFunc(integration)
}

// RegisterCalls gets all the calls that were made to Register.
// Check the length with:
//     len(mockedIUniformIntegrationManager.RegisterCalls())
func (mock *IUniformIntegrationManagerMock) RegisterCalls() []struct {
	Integration models.Integration
} {
	var calls []struct {
		Integration models.Integration
	}
	mock.lockRegister.RLock()
	calls = mock.calls.Register
	mock.lockRegister.RUnlock()
	return calls
}

// Unregister calls UnregisterFunc.
func (mock *IUniformIntegrationManagerMock) Unregister(id string) error {
	if mock.UnregisterFunc == nil {
		panic("IUniformIntegrationManagerMock.UnregisterFunc: method is nil but IUniformIntegrationManager.Unregister was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockUnregister.Lock()
	mock.calls.Unregister = append(mock.calls.Unregister, callInfo)
	mock.lockUnregister.Unlock()
	return mock.UnregisterFunc(id)
}

// UnregisterCalls gets all the calls that were made to Unregister.
// Check the length with:
//     len(mockedIUniformIntegrationManager.UnregisterCalls())
func (mock *IUniformIntegrationManagerMock) UnregisterCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockUnregister.RLock()
	calls = mock.calls.Unregister
	mock.lockUnregister.RUnlock()
	return calls
}
