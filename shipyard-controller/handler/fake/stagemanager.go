// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"github.com/keptn/keptn/shipyard-controller/models"
	"sync"
)

// IStageManagerMock is a mock implementation of handler.IStageManager.
//
// 	func TestSomethingThatUsesIStageManager(t *testing.T) {
//
// 		// make and configure a mocked handler.IStageManager
// 		mockedIStageManager := &IStageManagerMock{
// 			GetAllStagesFunc: func(projectName string) ([]*models.ExpandedStage, error) {
// 				panic("mock out the GetAllStages method")
// 			},
// 			GetStageFunc: func(projectName string, stageName string) (*models.ExpandedStage, error) {
// 				panic("mock out the GetStage method")
// 			},
// 		}
//
// 		// use mockedIStageManager in code that requires handler.IStageManager
// 		// and then make assertions.
//
// 	}
type IStageManagerMock struct {
	// GetAllStagesFunc mocks the GetAllStages method.
	GetAllStagesFunc func(projectName string) ([]*models.ExpandedStage, error)

	// GetStageFunc mocks the GetStage method.
	GetStageFunc func(projectName string, stageName string) (*models.ExpandedStage, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAllStages holds details about calls to the GetAllStages method.
		GetAllStages []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
		}
		// GetStage holds details about calls to the GetStage method.
		GetStage []struct {
			// ProjectName is the projectName argument value.
			ProjectName string
			// StageName is the stageName argument value.
			StageName string
		}
	}
	lockGetAllStages sync.RWMutex
	lockGetStage     sync.RWMutex
}

// GetAllStages calls GetAllStagesFunc.
func (mock *IStageManagerMock) GetAllStages(projectName string) ([]*models.ExpandedStage, error) {
	if mock.GetAllStagesFunc == nil {
		panic("IStageManagerMock.GetAllStagesFunc: method is nil but IStageManager.GetAllStages was just called")
	}
	callInfo := struct {
		ProjectName string
	}{
		ProjectName: projectName,
	}
	mock.lockGetAllStages.Lock()
	mock.calls.GetAllStages = append(mock.calls.GetAllStages, callInfo)
	mock.lockGetAllStages.Unlock()
	return mock.GetAllStagesFunc(projectName)
}

// GetAllStagesCalls gets all the calls that were made to GetAllStages.
// Check the length with:
//     len(mockedIStageManager.GetAllStagesCalls())
func (mock *IStageManagerMock) GetAllStagesCalls() []struct {
	ProjectName string
} {
	var calls []struct {
		ProjectName string
	}
	mock.lockGetAllStages.RLock()
	calls = mock.calls.GetAllStages
	mock.lockGetAllStages.RUnlock()
	return calls
}

// GetStage calls GetStageFunc.
func (mock *IStageManagerMock) GetStage(projectName string, stageName string) (*models.ExpandedStage, error) {
	if mock.GetStageFunc == nil {
		panic("IStageManagerMock.GetStageFunc: method is nil but IStageManager.GetStage was just called")
	}
	callInfo := struct {
		ProjectName string
		StageName   string
	}{
		ProjectName: projectName,
		StageName:   stageName,
	}
	mock.lockGetStage.Lock()
	mock.calls.GetStage = append(mock.calls.GetStage, callInfo)
	mock.lockGetStage.Unlock()
	return mock.GetStageFunc(projectName, stageName)
}

// GetStageCalls gets all the calls that were made to GetStage.
// Check the length with:
//     len(mockedIStageManager.GetStageCalls())
func (mock *IStageManagerMock) GetStageCalls() []struct {
	ProjectName string
	StageName   string
} {
	var calls []struct {
		ProjectName string
		StageName   string
	}
	mock.lockGetStage.RLock()
	calls = mock.calls.GetStage
	mock.lockGetStage.RUnlock()
	return calls
}
