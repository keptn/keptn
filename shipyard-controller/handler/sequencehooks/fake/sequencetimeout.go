// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	apimodels "github.com/keptn/go-utils/pkg/api/models"
	"sync"
)

// ISequenceTimeoutHookMock is a mock implementation of sequencehooks.ISequenceTimeoutHook.
//
// 	func TestSomethingThatUsesISequenceTimeoutHook(t *testing.T) {
//
// 		// make and configure a mocked sequencehooks.ISequenceTimeoutHook
// 		mockedISequenceTimeoutHook := &ISequenceTimeoutHookMock{
// 			OnSequenceTimeoutFunc: func(event apimodels.KeptnContextExtendedCE)  {
// 				panic("mock out the OnSequenceTimeout method")
// 			},
// 		}
//
// 		// use mockedISequenceTimeoutHook in code that requires sequencehooks.ISequenceTimeoutHook
// 		// and then make assertions.
//
// 	}
type ISequenceTimeoutHookMock struct {
	// OnSequenceTimeoutFunc mocks the OnSequenceTimeout method.
	OnSequenceTimeoutFunc func(event apimodels.KeptnContextExtendedCE)

	// calls tracks calls to the methods.
	calls struct {
		// OnSequenceTimeout holds details about calls to the OnSequenceTimeout method.
		OnSequenceTimeout []struct {
			// Event is the event argument value.
			Event apimodels.KeptnContextExtendedCE
		}
	}
	lockOnSequenceTimeout sync.RWMutex
}

// OnSequenceTimeout calls OnSequenceTimeoutFunc.
func (mock *ISequenceTimeoutHookMock) OnSequenceTimeout(event apimodels.KeptnContextExtendedCE) {
	if mock.OnSequenceTimeoutFunc == nil {
		panic("ISequenceTimeoutHookMock.OnSequenceTimeoutFunc: method is nil but ISequenceTimeoutHook.OnSequenceTimeout was just called")
	}
	callInfo := struct {
		Event apimodels.KeptnContextExtendedCE
	}{
		Event: event,
	}
	mock.lockOnSequenceTimeout.Lock()
	mock.calls.OnSequenceTimeout = append(mock.calls.OnSequenceTimeout, callInfo)
	mock.lockOnSequenceTimeout.Unlock()
	mock.OnSequenceTimeoutFunc(event)
}

// OnSequenceTimeoutCalls gets all the calls that were made to OnSequenceTimeout.
// Check the length with:
//     len(mockedISequenceTimeoutHook.OnSequenceTimeoutCalls())
func (mock *ISequenceTimeoutHookMock) OnSequenceTimeoutCalls() []struct {
	Event apimodels.KeptnContextExtendedCE
} {
	var calls []struct {
		Event apimodels.KeptnContextExtendedCE
	}
	mock.lockOnSequenceTimeout.RLock()
	calls = mock.calls.OnSequenceTimeout
	mock.lockOnSequenceTimeout.RUnlock()
	return calls
}
