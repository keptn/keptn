// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"github.com/keptn/keptn/shipyard-controller/models"
	"sync"
)

// ISequenceTaskTriggeredHookMock is a mock implementation of sequencehooks.ISequenceTaskTriggeredHook.
//
// 	func TestSomethingThatUsesISequenceTaskTriggeredHook(t *testing.T) {
//
// 		// make and configure a mocked sequencehooks.ISequenceTaskTriggeredHook
// 		mockedISequenceTaskTriggeredHook := &ISequenceTaskTriggeredHookMock{
// 			OnSequenceTaskTriggeredFunc: func(event models.Event)  {
// 				panic("mock out the OnSequenceTaskTriggered method")
// 			},
// 		}
//
// 		// use mockedISequenceTaskTriggeredHook in code that requires sequencehooks.ISequenceTaskTriggeredHook
// 		// and then make assertions.
//
// 	}
type ISequenceTaskTriggeredHookMock struct {
	// OnSequenceTaskTriggeredFunc mocks the OnSequenceTaskTriggered method.
	OnSequenceTaskTriggeredFunc func(event models.Event)

	// calls tracks calls to the methods.
	calls struct {
		// OnSequenceTaskTriggered holds details about calls to the OnSequenceTaskTriggered method.
		OnSequenceTaskTriggered []struct {
			// Event is the event argument value.
			Event models.Event
		}
	}
	lockOnSequenceTaskTriggered sync.RWMutex
}

// OnSequenceTaskTriggered calls OnSequenceTaskTriggeredFunc.
func (mock *ISequenceTaskTriggeredHookMock) OnSequenceTaskTriggered(event models.Event) {
	if mock.OnSequenceTaskTriggeredFunc == nil {
		panic("ISequenceTaskTriggeredHookMock.OnSequenceTaskTriggeredFunc: method is nil but ISequenceTaskTriggeredHook.OnSequenceTaskTriggered was just called")
	}
	callInfo := struct {
		Event models.Event
	}{
		Event: event,
	}
	mock.lockOnSequenceTaskTriggered.Lock()
	mock.calls.OnSequenceTaskTriggered = append(mock.calls.OnSequenceTaskTriggered, callInfo)
	mock.lockOnSequenceTaskTriggered.Unlock()
	mock.OnSequenceTaskTriggeredFunc(event)
}

// OnSequenceTaskTriggeredCalls gets all the calls that were made to OnSequenceTaskTriggered.
// Check the length with:
//     len(mockedISequenceTaskTriggeredHook.OnSequenceTaskTriggeredCalls())
func (mock *ISequenceTaskTriggeredHookMock) OnSequenceTaskTriggeredCalls() []struct {
	Event models.Event
} {
	var calls []struct {
		Event models.Event
	}
	mock.lockOnSequenceTaskTriggered.RLock()
	calls = mock.calls.OnSequenceTaskTriggered
	mock.lockOnSequenceTaskTriggered.RUnlock()
	return calls
}
