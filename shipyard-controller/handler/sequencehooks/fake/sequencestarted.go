// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	keptnmodels "github.com/keptn/go-utils/pkg/api/models"
	"sync"
)

// ISequenceStartedHookMock is a mock implementation of sequencehooks.ISequenceStartedHook.
//
// 	func TestSomethingThatUsesISequenceStartedHook(t *testing.T) {
//
// 		// make and configure a mocked sequencehooks.ISequenceStartedHook
// 		mockedISequenceStartedHook := &ISequenceStartedHookMock{
// 			OnSequenceStartedFunc: func(event keptnmodels.KeptnContextExtendedCE)  {
// 				panic("mock out the OnSequenceStarted method")
// 			},
// 		}
//
// 		// use mockedISequenceStartedHook in code that requires sequencehooks.ISequenceStartedHook
// 		// and then make assertions.
//
// 	}
type ISequenceStartedHookMock struct {
	// OnSequenceStartedFunc mocks the OnSequenceStarted method.
	OnSequenceStartedFunc func(event keptnmodels.KeptnContextExtendedCE)

	// calls tracks calls to the methods.
	calls struct {
		// OnSequenceStarted holds details about calls to the OnSequenceStarted method.
		OnSequenceStarted []struct {
			//models.KeptnContextExtendedCEis the event argument value.
			Event keptnmodels.KeptnContextExtendedCE
		}
	}
	lockOnSequenceStarted sync.RWMutex
}

// OnSequenceStarted calls OnSequenceStartedFunc.
func (mock *ISequenceStartedHookMock) OnSequenceStarted(event keptnmodels.KeptnContextExtendedCE) {
	if mock.OnSequenceStartedFunc == nil {
		panic("ISequenceStartedHookMock.OnSequenceStartedFunc: method is nil but ISequenceStartedHook.OnSequenceStarted was just called")
	}
	callInfo := struct {
		Event keptnmodels.KeptnContextExtendedCE
	}{
		Event: event,
	}
	mock.lockOnSequenceStarted.Lock()
	mock.calls.OnSequenceStarted = append(mock.calls.OnSequenceStarted, callInfo)
	mock.lockOnSequenceStarted.Unlock()
	mock.OnSequenceStartedFunc(event)
}

// OnSequenceStartedCalls gets all the calls that were made to OnSequenceStarted.
// Check the length with:
//     len(mockedISequenceStartedHook.OnSequenceStartedCalls())
func (mock *ISequenceStartedHookMock) OnSequenceStartedCalls() []struct {
	Event keptnmodels.KeptnContextExtendedCE
} {
	var calls []struct {
		Event keptnmodels.KeptnContextExtendedCE
	}
	mock.lockOnSequenceStarted.RLock()
	calls = mock.calls.OnSequenceStarted
	mock.lockOnSequenceStarted.RUnlock()
	return calls
}
