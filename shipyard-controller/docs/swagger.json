{
    "swagger": "2.0",
    "info": {
        "description": "This is the API documentation of the Shipyard Controller.",
        "title": "Control Plane API",
        "contact": {
            "name": "Keptn Team",
            "url": "http://www.keptn.sh"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "basePath": "/v1",
    "paths": {
        "/event": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Handle incoming cloud event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Handle event",
                "parameters": [
                    {
                        "description": "Event type",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Event"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/event/triggered/{eventType}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "get triggered events by their type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Get triggered events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event type",
                        "name": "eventType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "eventID",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Project",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Stage",
                        "name": "stage",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Service",
                        "name": "service",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/models.Events"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/project": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get the list of all projects",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Get all projects",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The number of items to return",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Pointer to the next set of items",
                        "name": "nextPageKey",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Disable sync of upstream repo before reading content",
                        "name": "disableUpstreamSync",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/models.ExpandedProjects"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Updates a project",
                "parameters": [
                    {
                        "description": "Project",
                        "name": "project",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/operations.UpdateProjectParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/operations.UpdateProjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Create a new project",
                "parameters": [
                    {
                        "description": "Project",
                        "name": "project",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/operations.CreateProjectParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/operations.CreateProjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/project/{project}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a project by its name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Get a project by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name of the project",
                        "name": "project",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/models.ExpandedProject"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Error)",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Delete a project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project name",
                        "name": "project",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/operations.DeleteProjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/project/{project}/service": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Create a new service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project",
                        "name": "project",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Project",
                        "name": "service",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/operations.CreateServiceParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/operations.CreateServiceResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/project/{project}/service/{service}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete a service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project",
                        "name": "project",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Service",
                        "name": "service",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/operations.DeleteServiceResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/project/{project}/stage": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get the list of stages of a project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stage"
                ],
                "summary": "Get all stages of a project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name of the project",
                        "name": "project",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The number of items to return",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Pointer to the next set of items",
                        "name": "nextPageKey",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Disable sync of upstream repo before reading content",
                        "name": "disableUpstreamSync",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/models.Stages"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/project/{project}/stage/{stage}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a stage of a project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Get a stage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name of the project",
                        "name": "project",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The name of the stage",
                        "name": "stage",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/models.ExpandedStage"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Error)",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/project/{project}/stage/{stage}/service": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Gets all services of a stage in a project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Gets all services of a stage in a project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project",
                        "name": "project",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Stage",
                        "name": "stage",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The number of items to return",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Pointer to the next set of items",
                        "name": "nextPageKey",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/models.ExpandedServices"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/project/{project}/stage/{stage}/service/{service}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Gets a service by its name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Gets a service by its name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project",
                        "name": "project",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Stage",
                        "name": "stage",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Service",
                        "name": "service",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/models.ExpandedService"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/project/{project}/stage/{stage}/service/{service}/evaluation": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Trigger a new evaluation for a service within a project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Evaluation"
                ],
                "summary": "Trigger a new evaluation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project",
                        "name": "project",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Stage",
                        "name": "stage",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Service",
                        "name": "service",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Evaluation",
                        "name": "evaluation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/operations.CreateEvaluationParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/operations.CreateEvaluationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Error code",
                    "type": "integer"
                },
                "message": {
                    "description": "Error message\nRequired: true",
                    "type": "string"
                }
            }
        },
        "models.Event": {
            "type": "object",
            "properties": {
                "contenttype": {
                    "description": "contenttype",
                    "type": "string"
                },
                "data": {
                    "description": "data\nRequired: true",
                    "type": "object"
                },
                "extensions": {
                    "description": "extensions",
                    "type": "object"
                },
                "id": {
                    "description": "id",
                    "type": "string"
                },
                "shkeptncontext": {
                    "description": "shkeptncontext",
                    "type": "string"
                },
                "source": {
                    "description": "source\nRequired: true",
                    "type": "string"
                },
                "specversion": {
                    "description": "specversion",
                    "type": "string"
                },
                "time": {
                    "description": "time",
                    "type": "string"
                },
                "triggeredid": {
                    "description": "triggeredid",
                    "type": "string"
                },
                "type": {
                    "description": "type\nRequired: true",
                    "type": "string"
                }
            }
        },
        "models.EventContext": {
            "type": "object",
            "properties": {
                "eventId": {
                    "description": "ID of the event",
                    "type": "string"
                },
                "keptnContext": {
                    "description": "Keptn Context ID of the event",
                    "type": "string"
                },
                "time": {
                    "description": "Time of the event",
                    "type": "string"
                }
            }
        },
        "models.Events": {
            "type": "object",
            "properties": {
                "events": {
                    "description": "events",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Event"
                    }
                },
                "nextPageKey": {
                    "description": "Pointer to next page, base64 encoded",
                    "type": "string"
                },
                "pageSize": {
                    "description": "Size of returned page",
                    "type": "number"
                },
                "totalCount": {
                    "description": "Total number of events",
                    "type": "number"
                }
            }
        },
        "models.ExpandedProject": {
            "type": "object",
            "properties": {
                "creationDate": {
                    "description": "Creation date of the project",
                    "type": "string"
                },
                "gitRemoteURI": {
                    "description": "Git remote URI",
                    "type": "string"
                },
                "gitUser": {
                    "description": "Git User",
                    "type": "string"
                },
                "lastEventContext": {
                    "description": "last event context",
                    "$ref": "#/definitions/models.EventContext"
                },
                "projectName": {
                    "description": "Project name",
                    "type": "string"
                },
                "shipyard": {
                    "description": "Shipyard file content",
                    "type": "string"
                },
                "shipyardVersion": {
                    "description": "Version of the shipyard file",
                    "type": "string"
                },
                "stages": {
                    "description": "stages",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExpandedStage"
                    }
                }
            }
        },
        "models.ExpandedProjects": {
            "type": "object",
            "properties": {
                "nextPageKey": {
                    "description": "Pointer to next page, base64 encoded",
                    "type": "string"
                },
                "pageSize": {
                    "description": "Size of returned page",
                    "type": "number"
                },
                "projects": {
                    "description": "projects",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExpandedProject"
                    }
                },
                "totalCount": {
                    "description": "Total number of projects",
                    "type": "number"
                }
            }
        },
        "models.ExpandedService": {
            "type": "object",
            "properties": {
                "creationDate": {
                    "description": "Creation date of the service",
                    "type": "string"
                },
                "deployedImage": {
                    "description": "Currently deployed image",
                    "type": "string"
                },
                "lastEventTypes": {
                    "description": "last event types",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.EventContext"
                    }
                },
                "openRemediations": {
                    "description": "open remediations",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Remediation"
                    }
                },
                "serviceName": {
                    "description": "Service name",
                    "type": "string"
                }
            }
        },
        "models.ExpandedServices": {
            "type": "object",
            "properties": {
                "nextPageKey": {
                    "description": "Pointer to next page, base64 encoded",
                    "type": "string"
                },
                "pageSize": {
                    "description": "Size of returned page",
                    "type": "number"
                },
                "services": {
                    "description": "projects",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExpandedService"
                    }
                },
                "totalCount": {
                    "description": "Total number of projects",
                    "type": "number"
                }
            }
        },
        "models.ExpandedStage": {
            "type": "object",
            "properties": {
                "lastEventContext": {
                    "description": "last event context",
                    "$ref": "#/definitions/models.EventContext"
                },
                "services": {
                    "description": "services",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExpandedService"
                    }
                },
                "stageName": {
                    "description": "Stage name",
                    "type": "string"
                }
            }
        },
        "models.Remediation": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "Executed action",
                    "type": "string"
                },
                "eventId": {
                    "description": "ID of the event",
                    "type": "string"
                },
                "keptnContext": {
                    "description": "Keptn Context ID of the event",
                    "type": "string"
                },
                "time": {
                    "description": "Time of the event",
                    "type": "string"
                },
                "type": {
                    "description": "Type of the event",
                    "type": "string"
                }
            }
        },
        "models.Stages": {
            "type": "object",
            "properties": {
                "nextPageKey": {
                    "description": "Pointer to next page, base64 encoded",
                    "type": "string"
                },
                "pageSize": {
                    "description": "Size of returned page",
                    "type": "number"
                },
                "stages": {
                    "description": "stages",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExpandedStage"
                    }
                },
                "totalCount": {
                    "description": "Total number of stages",
                    "type": "number"
                }
            }
        },
        "operations.CreateEvaluationParams": {
            "type": "object",
            "properties": {
                "end": {
                    "description": "end",
                    "type": "string",
                    "example": "2021-01-02T15:10:00"
                },
                "labels": {
                    "description": "labels",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "start": {
                    "description": "start",
                    "type": "string",
                    "example": "2021-01-02T15:00:00"
                },
                "timeframe": {
                    "description": "timeframe",
                    "type": "string",
                    "example": "5m"
                }
            }
        },
        "operations.CreateEvaluationResponse": {
            "type": "object",
            "properties": {
                "keptnContext": {
                    "description": "keptnContext",
                    "type": "string"
                }
            }
        },
        "operations.CreateProjectParams": {
            "type": "object",
            "properties": {
                "gitRemoteURL": {
                    "description": "git remote URL",
                    "type": "string"
                },
                "gitToken": {
                    "description": "git token",
                    "type": "string"
                },
                "gitUser": {
                    "description": "git user",
                    "type": "string"
                },
                "name": {
                    "description": "name",
                    "type": "string"
                },
                "shipyard": {
                    "description": "shipyard",
                    "type": "string"
                }
            }
        },
        "operations.CreateProjectResponse": {
            "type": "object"
        },
        "operations.CreateServiceParams": {
            "type": "object",
            "properties": {
                "serviceName": {
                    "description": "name",
                    "type": "string"
                }
            }
        },
        "operations.CreateServiceResponse": {
            "type": "object"
        },
        "operations.DeleteProjectResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "operations.DeleteServiceResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "operations.UpdateProjectParams": {
            "type": "object",
            "properties": {
                "gitRemoteURL": {
                    "description": "git remote URL",
                    "type": "string"
                },
                "gitToken": {
                    "description": "git token",
                    "type": "string"
                },
                "gitUser": {
                    "description": "git user",
                    "type": "string"
                },
                "name": {
                    "description": "name",
                    "type": "string"
                },
                "shipyard": {
                    "description": "shipyard",
                    "type": "string"
                }
            }
        },
        "operations.UpdateProjectResponse": {
            "type": "object"
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "x-token",
            "in": "header"
        }
    }
}