// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Keptn Team",
            "url": "http://www.keptn.sh"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/event/triggered/{eventType}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "get triggered events by their type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Get triggered events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event type",
                        "name": "eventType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "eventID",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Project",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Stage",
                        "name": "stage",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Service",
                        "name": "service",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/models.Events"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/log": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve logs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Log"
                ],
                "summary": "Retrieve logs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "integrationId",
                        "name": "integrationId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The from time stamp for fetching sequence states",
                        "name": "fromTime",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The before time stamp for fetching sequence states",
                        "name": "beforeTime",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The number of items to return",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Pointer to the next set of items",
                        "name": "nextPageKey",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/models.GetLogsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Persist a list of log entries",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Log"
                ],
                "summary": "Persist a list of log entries",
                "parameters": [
                    {
                        "description": "Logs",
                        "name": "integration",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateLogsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "INTERNAL Endpoint: Delete logs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Log"
                ],
                "summary": "Delete logs",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "description": "integrationId",
                        "name": "integrationId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The from time stamp for fetching sequence states",
                        "name": "fromTime",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The before time stamp for fetching sequence states",
                        "name": "beforeTime",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/models.DeleteLogResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/project": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get the list of all projects",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Get all projects",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The number of items to return",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Pointer to the next set of items",
                        "name": "nextPageKey",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Disable sync of upstream repo before reading content",
                        "name": "disableUpstreamSync",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/models.ExpandedProjects"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Updates a project",
                "parameters": [
                    {
                        "description": "Project",
                        "name": "project",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateProjectParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/models.UpdateProjectResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "424": {
                        "description": "Failed Dependency",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Create a new project",
                "parameters": [
                    {
                        "description": "Project",
                        "name": "project",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateProjectParams"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/models.CreateProjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/project/{project}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a project by its name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Get a project by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name of the project",
                        "name": "project",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/models.ExpandedProject"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Error)",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Delete a project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project name",
                        "name": "project",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/models.DeleteProjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/project/{project}/service": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Create a new service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project",
                        "name": "project",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Project",
                        "name": "service",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateServiceParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/models.CreateServiceResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/project/{project}/service/{service}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Delete a service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project",
                        "name": "project",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Service",
                        "name": "service",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/models.DeleteServiceResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/project/{project}/stage": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get the list of stages of a project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stage"
                ],
                "summary": "Get all stages of a project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name of the project",
                        "name": "project",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The number of items to return",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Pointer to the next set of items",
                        "name": "nextPageKey",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Disable sync of upstream repo before reading content",
                        "name": "disableUpstreamSync",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/models.Stages"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/project/{project}/stage/{stage}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a stage of a project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Get a stage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name of the project",
                        "name": "project",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The name of the stage",
                        "name": "stage",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/models.ExpandedStage"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Error)",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/project/{project}/stage/{stage}/service": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Gets all services of a stage in a project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Gets all services of a stage in a project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project",
                        "name": "project",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Stage",
                        "name": "stage",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The number of items to return",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Pointer to the next set of items",
                        "name": "nextPageKey",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/models.ExpandedServices"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/project/{project}/stage/{stage}/service/{service}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Gets a service by its name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Gets a service by its name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project",
                        "name": "project",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Stage",
                        "name": "stage",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Service",
                        "name": "service",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/models.ExpandedService"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/project/{project}/stage/{stage}/service/{service}/evaluation": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Trigger a new evaluation for a service within a project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Evaluation"
                ],
                "summary": "Trigger a new evaluation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project",
                        "name": "project",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Stage",
                        "name": "stage",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Service",
                        "name": "service",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Evaluation",
                        "name": "evaluation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateEvaluationParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/models.CreateEvaluationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/sequence/{project}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get task sequence execution states",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sequence"
                ],
                "summary": "Get task sequence execution states",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The project name",
                        "name": "project",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "The name of the sequence",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The state of the sequence (e.g., triggered, finished,...)",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The from time stamp for fetching sequence states (in ISO8601 time format, e.g.: 2021-05-10T09:51:00.000Z)",
                        "name": "fromTime",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The before time stamp for fetching sequence states (in ISO8601 time format, e.g.: 2021-05-10T09:51:00.000Z)",
                        "name": "beforeTime",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The number of items to return",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Pointer to the next set of items",
                        "name": "nextPageKey",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma separated list of keptnContext IDs",
                        "name": "keptnContext",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/models.SequenceStates"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/sequence/{project}/{keptnContext}/control": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Pause/Resume/Abort a task sequence, either for a specific stage, or for all stages involved in the sequence",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sequence"
                ],
                "summary": "Pause/Resume/Abort a task sequence",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The project name",
                        "name": "project",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The keptnContext ID of the sequence",
                        "name": "keptnContext",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Sequence Control Command",
                        "name": "sequenceControl",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SequenceControlCommand"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/models.SequenceControlResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/uniform/registration": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve uniform integrations matching the provided filter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Uniform"
                ],
                "summary": "BETA: Retrieve uniform integrations matching the provided filter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "project",
                        "name": "project",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "stage",
                        "name": "stage",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "service",
                        "name": "service",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Integration"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Register a uniform integration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Uniform"
                ],
                "summary": "BETA: Register a uniform integration",
                "parameters": [
                    {
                        "description": "Integration",
                        "name": "integration",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Integration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok: registration already exists",
                        "schema": {
                            "$ref": "#/definitions/models.RegisterResponse"
                        }
                    },
                    "201": {
                        "description": "ok: a new registration has been created",
                        "schema": {
                            "$ref": "#/definitions/models.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/uniform/registration/{integrationID}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Unregister a uniform integration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Uniform"
                ],
                "summary": "BETA: Unregister a uniform integration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "integrationID",
                        "name": "integrationID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/uniform/registration/{integrationID}/ping": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Endpoint for sending heartbeat messages sent from Keptn integrations to the control plane",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Uniform"
                ],
                "summary": "BETA: Endpoint for sending heartbeat messages sent from Keptn integrations to the control plane",
                "parameters": [
                    {
                        "type": "string",
                        "description": "integrationID",
                        "name": "integrationID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/models.Integration"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/uniform/registration/{integrationID}/subscription": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve all subscriptions of a uniform integration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Uniform"
                ],
                "summary": "BETA: Retrieve all subscriptions of a uniform integration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "integrationID",
                        "name": "integrationID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Subscription"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new subscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Uniform"
                ],
                "summary": "BETA: Create a new subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "integrationID",
                        "name": "integrationID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Subscription",
                        "name": "subscription",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Subscription"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/uniform/registration/{integrationID}/subscription/{subscriptionID}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve an already existing subscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Uniform"
                ],
                "summary": "BETA: Retrieve an already existing subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "integrationID",
                        "name": "integrationID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "subscriptionID",
                        "name": "subscriptionID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/models.Subscription"
                        }
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update or create a subscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Uniform"
                ],
                "summary": "BETA: Update or create a subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "integrationID",
                        "name": "integrationID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "subscriptionID",
                        "name": "subscriptionID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Subscription",
                        "name": "subscription",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Subscription"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a subscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Uniform"
                ],
                "summary": "BETA: Delete a subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "integrationID",
                        "name": "integrationID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "subscriptionID",
                        "name": "subscriptionID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid payload",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CreateEvaluationParams": {
            "type": "object",
            "properties": {
                "end": {
                    "description": "end",
                    "type": "string",
                    "example": "2021-01-02T15:10:00"
                },
                "labels": {
                    "description": "labels",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "start": {
                    "description": "start",
                    "type": "string",
                    "example": "2021-01-02T15:00:00"
                },
                "timeframe": {
                    "description": "timeframe",
                    "type": "string",
                    "example": "5m"
                }
            }
        },
        "models.CreateEvaluationResponse": {
            "type": "object",
            "properties": {
                "keptnContext": {
                    "description": "keptnContext",
                    "type": "string"
                }
            }
        },
        "models.CreateLogsRequest": {
            "type": "object",
            "properties": {
                "logs": {
                    "description": "logs",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.LogEntry"
                    }
                }
            }
        },
        "models.CreateProjectParams": {
            "type": "object",
            "properties": {
                "gitRemoteURL": {
                    "description": "git remote URL",
                    "type": "string"
                },
                "gitToken": {
                    "description": "git token",
                    "type": "string"
                },
                "gitUser": {
                    "description": "git user",
                    "type": "string"
                },
                "name": {
                    "description": "name",
                    "type": "string"
                },
                "shipyard": {
                    "description": "shipyard",
                    "type": "string"
                }
            }
        },
        "models.CreateProjectResponse": {
            "type": "object"
        },
        "models.CreateServiceParams": {
            "type": "object",
            "properties": {
                "serviceName": {
                    "description": "name",
                    "type": "string"
                }
            }
        },
        "models.CreateServiceResponse": {
            "type": "object"
        },
        "models.DeleteLogResponse": {
            "type": "object"
        },
        "models.DeleteProjectResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "models.DeleteServiceResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "models.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Error code",
                    "type": "integer"
                },
                "message": {
                    "description": "Error message\nRequired: true",
                    "type": "string"
                }
            }
        },
        "models.Event": {
            "type": "object",
            "properties": {
                "contenttype": {
                    "description": "contenttype",
                    "type": "string"
                },
                "data": {
                    "description": "data\nRequired: true",
                    "type": "object"
                },
                "extensions": {
                    "description": "extensions",
                    "type": "object"
                },
                "id": {
                    "description": "id",
                    "type": "string"
                },
                "shkeptncontext": {
                    "description": "shkeptncontext",
                    "type": "string"
                },
                "source": {
                    "description": "source\nRequired: true",
                    "type": "string"
                },
                "specversion": {
                    "description": "specversion",
                    "type": "string"
                },
                "time": {
                    "description": "time",
                    "type": "string"
                },
                "triggeredid": {
                    "description": "triggeredid",
                    "type": "string"
                },
                "type": {
                    "description": "type\nRequired: true",
                    "type": "string"
                }
            }
        },
        "models.EventContext": {
            "type": "object",
            "properties": {
                "keptnContext": {
                    "description": "keptn context\nRequired: true",
                    "type": "string"
                }
            }
        },
        "models.EventSubscription": {
            "type": "object",
            "properties": {
                "event": {
                    "type": "string"
                },
                "filter": {
                    "$ref": "#/definitions/models.EventSubscriptionFilter"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "models.EventSubscriptionFilter": {
            "type": "object",
            "properties": {
                "projects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "stages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.Events": {
            "type": "object",
            "properties": {
                "events": {
                    "description": "events",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Event"
                    }
                },
                "nextPageKey": {
                    "description": "Pointer to next page, base64 encoded",
                    "type": "string"
                },
                "pageSize": {
                    "description": "Size of returned page",
                    "type": "number"
                },
                "totalCount": {
                    "description": "Total number of events",
                    "type": "number"
                }
            }
        },
        "models.ExpandedProject": {
            "type": "object",
            "properties": {
                "creationDate": {
                    "description": "Creation date of the project",
                    "type": "string"
                },
                "gitRemoteURI": {
                    "description": "Git remote URI",
                    "type": "string"
                },
                "gitUser": {
                    "description": "Git User",
                    "type": "string"
                },
                "lastEventContext": {
                    "description": "last event context",
                    "$ref": "#/definitions/models.EventContext"
                },
                "projectName": {
                    "description": "Project name",
                    "type": "string"
                },
                "shipyard": {
                    "description": "Shipyard file content",
                    "type": "string"
                },
                "shipyardVersion": {
                    "description": "Version of the shipyard file",
                    "type": "string"
                },
                "stages": {
                    "description": "stages",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExpandedStage"
                    }
                }
            }
        },
        "models.ExpandedProjects": {
            "type": "object",
            "properties": {
                "nextPageKey": {
                    "description": "Pointer to next page, base64 encoded",
                    "type": "string"
                },
                "pageSize": {
                    "description": "Size of returned page",
                    "type": "number"
                },
                "projects": {
                    "description": "projects",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExpandedProject"
                    }
                },
                "totalCount": {
                    "description": "Total number of projects",
                    "type": "number"
                }
            }
        },
        "models.ExpandedService": {
            "type": "object",
            "properties": {
                "creationDate": {
                    "description": "Creation date of the service",
                    "type": "string"
                },
                "deployedImage": {
                    "description": "Currently deployed image",
                    "type": "string"
                },
                "lastEventTypes": {
                    "description": "last event types",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.EventContext"
                    }
                },
                "openRemediations": {
                    "description": "open remediations",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Remediation"
                    }
                },
                "serviceName": {
                    "description": "Service name",
                    "type": "string"
                }
            }
        },
        "models.ExpandedServices": {
            "type": "object",
            "properties": {
                "nextPageKey": {
                    "description": "Pointer to next page, base64 encoded",
                    "type": "string"
                },
                "pageSize": {
                    "description": "Size of returned page",
                    "type": "number"
                },
                "services": {
                    "description": "projects",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExpandedService"
                    }
                },
                "totalCount": {
                    "description": "Total number of projects",
                    "type": "number"
                }
            }
        },
        "models.ExpandedStage": {
            "type": "object",
            "properties": {
                "lastEventContext": {
                    "description": "last event context",
                    "$ref": "#/definitions/models.EventContext"
                },
                "parentStages": {
                    "description": "Parent Stages",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "services": {
                    "description": "services",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExpandedService"
                    }
                },
                "stageName": {
                    "description": "Stage name",
                    "type": "string"
                }
            }
        },
        "models.GetLogsResponse": {
            "type": "object",
            "properties": {
                "logs": {
                    "description": "logs",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.LogEntry"
                    }
                },
                "nextPageKey": {
                    "description": "Pointer to next page",
                    "type": "integer"
                },
                "pageSize": {
                    "description": "Size of returned page",
                    "type": "integer"
                },
                "totalCount": {
                    "description": "Total number of logs",
                    "type": "integer"
                }
            }
        },
        "models.Integration": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/models.MetaData"
                },
                "name": {
                    "type": "string"
                },
                "subscription": {
                    "description": "Deprecated: for backwards compatibility Subscription is populated\nbut new code shall use Subscriptions",
                    "$ref": "#/definitions/models.Subscription"
                },
                "subscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.EventSubscription"
                    }
                }
            }
        },
        "models.KubernetesMetaData": {
            "type": "object",
            "properties": {
                "deploymentname": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "podname": {
                    "type": "string"
                }
            }
        },
        "models.LogEntry": {
            "type": "object",
            "properties": {
                "integrationid": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "shkeptncontext": {
                    "type": "string"
                },
                "task": {
                    "type": "string"
                },
                "time": {
                    "type": "string"
                },
                "triggeredid": {
                    "type": "string"
                }
            }
        },
        "models.MetaData": {
            "type": "object",
            "properties": {
                "distributorversion": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "integrationversion": {
                    "type": "string"
                },
                "kubernetesmetadata": {
                    "$ref": "#/definitions/models.KubernetesMetaData"
                },
                "lastseen": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                }
            }
        },
        "models.RegisterResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "models.Remediation": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "Executed action",
                    "type": "string"
                },
                "eventId": {
                    "description": "ID of the event",
                    "type": "string"
                },
                "keptnContext": {
                    "description": "Keptn Context ID of the event",
                    "type": "string"
                },
                "time": {
                    "description": "Time of the event",
                    "type": "string"
                },
                "type": {
                    "description": "Type of the event",
                    "type": "string"
                }
            }
        },
        "models.SequenceControlCommand": {
            "type": "object",
            "required": [
                "state"
            ],
            "properties": {
                "stage": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            }
        },
        "models.SequenceControlResponse": {
            "type": "object"
        },
        "models.SequenceState": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "problemTitle": {
                    "type": "string"
                },
                "project": {
                    "type": "string"
                },
                "service": {
                    "type": "string"
                },
                "shkeptncontext": {
                    "type": "string"
                },
                "stages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SequenceStateStage"
                    }
                },
                "state": {
                    "type": "string"
                },
                "time": {
                    "type": "string"
                }
            }
        },
        "models.SequenceStateEvaluation": {
            "type": "object",
            "properties": {
                "result": {
                    "type": "string"
                },
                "score": {
                    "type": "number"
                }
            }
        },
        "models.SequenceStateEvent": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "time": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "models.SequenceStateStage": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "string"
                },
                "latestEvaluation": {
                    "$ref": "#/definitions/models.SequenceStateEvaluation"
                },
                "latestEvent": {
                    "$ref": "#/definitions/models.SequenceStateEvent"
                },
                "latestFailedEvent": {
                    "$ref": "#/definitions/models.SequenceStateEvent"
                },
                "name": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            }
        },
        "models.SequenceStates": {
            "type": "object",
            "properties": {
                "nextPageKey": {
                    "description": "Pointer to next page",
                    "type": "integer"
                },
                "pageSize": {
                    "description": "Size of returned page",
                    "type": "integer"
                },
                "states": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SequenceState"
                    }
                },
                "totalCount": {
                    "description": "Total number of events",
                    "type": "integer"
                }
            }
        },
        "models.Stages": {
            "type": "object",
            "properties": {
                "nextPageKey": {
                    "description": "Pointer to next page, base64 encoded",
                    "type": "string"
                },
                "pageSize": {
                    "description": "Size of returned page",
                    "type": "number"
                },
                "stages": {
                    "description": "stages",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExpandedStage"
                    }
                },
                "totalCount": {
                    "description": "Total number of stages",
                    "type": "number"
                }
            }
        },
        "models.Subscription": {
            "type": "object",
            "properties": {
                "filter": {
                    "$ref": "#/definitions/models.SubscriptionFilter"
                },
                "status": {
                    "type": "string"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.SubscriptionFilter": {
            "type": "object",
            "properties": {
                "project": {
                    "type": "string"
                },
                "service": {
                    "type": "string"
                },
                "stage": {
                    "type": "string"
                }
            }
        },
        "models.UpdateProjectParams": {
            "type": "object",
            "properties": {
                "gitRemoteURL": {
                    "description": "git remote URL",
                    "type": "string"
                },
                "gitToken": {
                    "description": "git token",
                    "type": "string"
                },
                "gitUser": {
                    "description": "git user",
                    "type": "string"
                },
                "name": {
                    "description": "name",
                    "type": "string"
                },
                "shipyard": {
                    "description": "shipyard",
                    "type": "string"
                }
            }
        },
        "models.UpdateProjectResponse": {
            "type": "object"
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "x-token",
            "in": "header"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "develop",
	Host:        "",
	BasePath:    "/v1",
	Schemes:     []string{},
	Title:       "Control Plane API",
	Description: "This is the API documentation of the Shipyard Controller.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
