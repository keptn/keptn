basePath: /v1
definitions:
  models.CreateEvaluationParams:
    properties:
      end:
        description: end
        example: 2021-01-02T15:10:00
        type: string
      labels:
        additionalProperties:
          type: string
        description: labels
        type: object
      start:
        description: start
        example: 2021-01-02T15:00:00
        type: string
      timeframe:
        description: timeframe
        example: 5m
        type: string
    type: object
  models.CreateEvaluationResponse:
    properties:
      keptnContext:
        description: keptnContext
        type: string
    type: object
  models.CreateLogsRequest:
    properties:
      logs:
        description: logs
        items:
          $ref: '#/definitions/models.LogEntry'
        type: array
    type: object
  models.CreateProjectParams:
    properties:
      gitRemoteURL:
        description: git remote URL
        type: string
      gitToken:
        description: git token
        type: string
      gitUser:
        description: git user
        type: string
      name:
        description: name
        type: string
      shipyard:
        description: shipyard
        type: string
    type: object
  models.CreateProjectResponse:
    type: object
  models.CreateServiceParams:
    properties:
      serviceName:
        description: name
        type: string
    type: object
  models.CreateServiceResponse:
    type: object
  models.DeleteLogResponse:
    type: object
  models.DeleteProjectResponse:
    properties:
      message:
        type: string
    type: object
  models.DeleteServiceResponse:
    properties:
      message:
        type: string
    type: object
  models.Error:
    properties:
      code:
        description: Error code
        type: integer
      message:
        description: |-
          Error message
          Required: true
        type: string
    type: object
  models.Event:
    properties:
      contenttype:
        description: contenttype
        type: string
      data:
        description: |-
          data
          Required: true
        type: object
      extensions:
        description: extensions
        type: object
      id:
        description: id
        type: string
      shkeptncontext:
        description: shkeptncontext
        type: string
      source:
        description: |-
          source
          Required: true
        type: string
      specversion:
        description: specversion
        type: string
      time:
        description: time
        type: string
      triggeredid:
        description: triggeredid
        type: string
      type:
        description: |-
          type
          Required: true
        type: string
    type: object
  models.EventContext:
    properties:
      keptnContext:
        description: |-
          keptn context
          Required: true
        type: string
    type: object
  models.EventSubscription:
    properties:
      event:
        type: string
      filter:
        $ref: '#/definitions/models.EventSubscriptionFilter'
      id:
        type: string
    type: object
  models.EventSubscriptionFilter:
    properties:
      projects:
        items:
          type: string
        type: array
      services:
        items:
          type: string
        type: array
      stages:
        items:
          type: string
        type: array
    type: object
  models.Events:
    properties:
      events:
        description: events
        items:
          $ref: '#/definitions/models.Event'
        type: array
      nextPageKey:
        description: Pointer to next page, base64 encoded
        type: string
      pageSize:
        description: Size of returned page
        type: number
      totalCount:
        description: Total number of events
        type: number
    type: object
  models.ExpandedProject:
    properties:
      creationDate:
        description: Creation date of the project
        type: string
      gitRemoteURI:
        description: Git remote URI
        type: string
      gitUser:
        description: Git User
        type: string
      lastEventContext:
        $ref: '#/definitions/models.EventContext'
        description: last event context
      projectName:
        description: Project name
        type: string
      shipyard:
        description: Shipyard file content
        type: string
      shipyardVersion:
        description: Version of the shipyard file
        type: string
      stages:
        description: stages
        items:
          $ref: '#/definitions/models.ExpandedStage'
        type: array
    type: object
  models.ExpandedProjects:
    properties:
      nextPageKey:
        description: Pointer to next page, base64 encoded
        type: string
      pageSize:
        description: Size of returned page
        type: number
      projects:
        description: projects
        items:
          $ref: '#/definitions/models.ExpandedProject'
        type: array
      totalCount:
        description: Total number of projects
        type: number
    type: object
  models.ExpandedService:
    properties:
      creationDate:
        description: Creation date of the service
        type: string
      deployedImage:
        description: Currently deployed image
        type: string
      lastEventTypes:
        additionalProperties:
          $ref: '#/definitions/models.EventContext'
        description: last event types
        type: object
      openRemediations:
        description: open remediations
        items:
          $ref: '#/definitions/models.Remediation'
        type: array
      serviceName:
        description: Service name
        type: string
    type: object
  models.ExpandedServices:
    properties:
      nextPageKey:
        description: Pointer to next page, base64 encoded
        type: string
      pageSize:
        description: Size of returned page
        type: number
      services:
        description: projects
        items:
          $ref: '#/definitions/models.ExpandedService'
        type: array
      totalCount:
        description: Total number of projects
        type: number
    type: object
  models.ExpandedStage:
    properties:
      lastEventContext:
        $ref: '#/definitions/models.EventContext'
        description: last event context
      parentStages:
        description: Parent Stages
        items:
          type: string
        type: array
      services:
        description: services
        items:
          $ref: '#/definitions/models.ExpandedService'
        type: array
      stageName:
        description: Stage name
        type: string
    type: object
  models.GetLogsResponse:
    properties:
      logs:
        description: logs
        items:
          $ref: '#/definitions/models.LogEntry'
        type: array
      nextPageKey:
        description: Pointer to next page
        type: integer
      pageSize:
        description: Size of returned page
        type: integer
      totalCount:
        description: Total number of logs
        type: integer
    type: object
  models.Integration:
    properties:
      id:
        type: string
      metadata:
        $ref: '#/definitions/models.MetaData'
      name:
        type: string
      subscription:
        $ref: '#/definitions/models.Subscription'
        description: |-
          Deprecated: for backwards compatibility Subscription is populated
          but new code shall use Subscriptions
      subscriptions:
        items:
          $ref: '#/definitions/models.EventSubscription'
        type: array
    type: object
  models.KubernetesMetaData:
    properties:
      deploymentname:
        type: string
      namespace:
        type: string
      podname:
        type: string
    type: object
  models.LogEntry:
    properties:
      integrationid:
        type: string
      message:
        type: string
      shkeptncontext:
        type: string
      task:
        type: string
      time:
        type: string
      triggeredid:
        type: string
    type: object
  models.MetaData:
    properties:
      distributorversion:
        type: string
      hostname:
        type: string
      integrationversion:
        type: string
      kubernetesmetadata:
        $ref: '#/definitions/models.KubernetesMetaData'
      lastseen:
        type: string
      location:
        type: string
    type: object
  models.RegisterResponse:
    properties:
      id:
        type: string
    type: object
  models.Remediation:
    properties:
      action:
        description: Executed action
        type: string
      eventId:
        description: ID of the event
        type: string
      keptnContext:
        description: Keptn Context ID of the event
        type: string
      time:
        description: Time of the event
        type: string
      type:
        description: Type of the event
        type: string
    type: object
  models.SequenceControlCommand:
    properties:
      stage:
        type: string
      state:
        type: string
    required:
    - state
    type: object
  models.SequenceControlResponse:
    type: object
  models.SequenceState:
    properties:
      name:
        type: string
      problemTitle:
        type: string
      project:
        type: string
      service:
        type: string
      shkeptncontext:
        type: string
      stages:
        items:
          $ref: '#/definitions/models.SequenceStateStage'
        type: array
      state:
        type: string
      time:
        type: string
    type: object
  models.SequenceStateEvaluation:
    properties:
      result:
        type: string
      score:
        type: number
    type: object
  models.SequenceStateEvent:
    properties:
      id:
        type: string
      time:
        type: string
      type:
        type: string
    type: object
  models.SequenceStateStage:
    properties:
      image:
        type: string
      latestEvaluation:
        $ref: '#/definitions/models.SequenceStateEvaluation'
      latestEvent:
        $ref: '#/definitions/models.SequenceStateEvent'
      latestFailedEvent:
        $ref: '#/definitions/models.SequenceStateEvent'
      name:
        type: string
      state:
        type: string
    type: object
  models.SequenceStates:
    properties:
      nextPageKey:
        description: Pointer to next page
        type: integer
      pageSize:
        description: Size of returned page
        type: integer
      states:
        items:
          $ref: '#/definitions/models.SequenceState'
        type: array
      totalCount:
        description: Total number of events
        type: integer
    type: object
  models.Stages:
    properties:
      nextPageKey:
        description: Pointer to next page, base64 encoded
        type: string
      pageSize:
        description: Size of returned page
        type: number
      stages:
        description: stages
        items:
          $ref: '#/definitions/models.ExpandedStage'
        type: array
      totalCount:
        description: Total number of stages
        type: number
    type: object
  models.Subscription:
    properties:
      filter:
        $ref: '#/definitions/models.SubscriptionFilter'
      status:
        type: string
      topics:
        items:
          type: string
        type: array
    type: object
  models.SubscriptionFilter:
    properties:
      project:
        type: string
      service:
        type: string
      stage:
        type: string
    type: object
  models.UpdateProjectParams:
    properties:
      gitRemoteURL:
        description: git remote URL
        type: string
      gitToken:
        description: git token
        type: string
      gitUser:
        description: git user
        type: string
      name:
        description: name
        type: string
      shipyard:
        description: shipyard
        type: string
    type: object
  models.UpdateProjectResponse:
    type: object
info:
  contact:
    name: Keptn Team
    url: http://www.keptn.sh
  description: This is the API documentation of the Shipyard Controller.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Control Plane API
  version: develop
paths:
  /event/triggered/{eventType}:
    get:
      consumes:
      - application/json
      description: get triggered events by their type
      parameters:
      - description: Event type
        in: path
        name: eventType
        required: true
        type: string
      - description: Event ID
        in: query
        name: eventID
        type: string
      - description: Project
        in: query
        name: project
        type: string
      - description: Stage
        in: query
        name: stage
        type: string
      - description: Service
        in: query
        name: service
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.Events'
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Get triggered events
      tags:
      - Events
  /log:
    delete:
      consumes:
      - application/json
      deprecated: true
      description: 'INTERNAL Endpoint: Delete logs'
      parameters:
      - description: integrationId
        in: query
        name: integrationId
        type: string
      - description: The from time stamp for fetching sequence states
        in: query
        name: fromTime
        type: string
      - description: The before time stamp for fetching sequence states
        in: query
        name: beforeTime
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.DeleteLogResponse'
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete logs
      tags:
      - Log
    get:
      consumes:
      - application/json
      description: Retrieve logs
      parameters:
      - description: integrationId
        in: query
        name: integrationId
        type: string
      - description: The from time stamp for fetching sequence states
        in: query
        name: fromTime
        type: string
      - description: The before time stamp for fetching sequence states
        in: query
        name: beforeTime
        type: string
      - description: The number of items to return
        in: query
        name: pageSize
        type: integer
      - description: Pointer to the next set of items
        in: query
        name: nextPageKey
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.GetLogsResponse'
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Retrieve logs
      tags:
      - Log
    post:
      consumes:
      - application/json
      description: Persist a list of log entries
      parameters:
      - description: Logs
        in: body
        name: integration
        required: true
        schema:
          $ref: '#/definitions/models.CreateLogsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Persist a list of log entries
      tags:
      - Log
  /project:
    get:
      consumes:
      - application/json
      description: Get the list of all projects
      parameters:
      - description: The number of items to return
        in: query
        name: pageSize
        type: integer
      - description: Pointer to the next set of items
        in: query
        name: nextPageKey
        type: string
      - description: Disable sync of upstream repo before reading content
        in: query
        name: disableUpstreamSync
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.ExpandedProjects'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Get all projects
      tags:
      - Projects
    post:
      consumes:
      - application/json
      description: Create a new project
      parameters:
      - description: Project
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/models.CreateProjectParams'
      produces:
      - application/json
      responses:
        "201":
          description: ok
          schema:
            $ref: '#/definitions/models.CreateProjectResponse'
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Create a new project
      tags:
      - Projects
    put:
      consumes:
      - application/json
      description: Updates project
      parameters:
      - description: Project
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProjectParams'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.UpdateProjectResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "424":
          description: Failed Dependency
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Updates a project
      tags:
      - Projects
  /project/{project}:
    delete:
      consumes:
      - application/json
      description: Delete a project
      parameters:
      - description: Project name
        in: path
        name: project
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.DeleteProjectResponse'
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete a project
      tags:
      - Projects
    get:
      consumes:
      - application/json
      description: Get a project by its name
      parameters:
      - description: The name of the project
        in: path
        name: project
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.ExpandedProject'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Error)
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Get a project by name
      tags:
      - Projects
  /project/{project}/service:
    post:
      consumes:
      - application/json
      description: Create a new service
      parameters:
      - description: Project
        in: path
        name: project
        required: true
        type: string
      - description: Project
        in: body
        name: service
        required: true
        schema:
          $ref: '#/definitions/models.CreateServiceParams'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.CreateServiceResponse'
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Create a new service
      tags:
      - Services
  /project/{project}/service/{service}:
    delete:
      consumes:
      - application/json
      description: Delete a service
      parameters:
      - description: Project
        in: path
        name: project
        required: true
        type: string
      - description: Service
        in: path
        name: service
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.DeleteServiceResponse'
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete a service
      tags:
      - Services
  /project/{project}/stage:
    get:
      consumes:
      - application/json
      description: Get the list of stages of a project
      parameters:
      - description: The name of the project
        in: path
        name: project
        required: true
        type: string
      - description: The number of items to return
        in: query
        name: pageSize
        type: integer
      - description: Pointer to the next set of items
        in: query
        name: nextPageKey
        type: string
      - description: Disable sync of upstream repo before reading content
        in: query
        name: disableUpstreamSync
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.Stages'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Get all stages of a project
      tags:
      - Stage
  /project/{project}/stage/{stage}:
    get:
      consumes:
      - application/json
      description: Get a stage of a project
      parameters:
      - description: The name of the project
        in: path
        name: project
        required: true
        type: string
      - description: The name of the stage
        in: path
        name: stage
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.ExpandedStage'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Error)
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Get a stage
      tags:
      - Projects
  /project/{project}/stage/{stage}/service:
    get:
      consumes:
      - application/json
      description: Gets all services of a stage in a project
      parameters:
      - description: Project
        in: path
        name: project
        required: true
        type: string
      - description: Stage
        in: path
        name: stage
        required: true
        type: string
      - description: The number of items to return
        in: query
        name: pageSize
        type: integer
      - description: Pointer to the next set of items
        in: query
        name: nextPageKey
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.ExpandedServices'
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Gets all services of a stage in a project
      tags:
      - Services
  /project/{project}/stage/{stage}/service/{service}:
    get:
      consumes:
      - application/json
      description: Gets a service by its name
      parameters:
      - description: Project
        in: path
        name: project
        required: true
        type: string
      - description: Stage
        in: path
        name: stage
        required: true
        type: string
      - description: Service
        in: path
        name: service
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.ExpandedService'
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Gets a service by its name
      tags:
      - Services
  /project/{project}/stage/{stage}/service/{service}/evaluation:
    post:
      consumes:
      - application/json
      description: Trigger a new evaluation for a service within a project
      parameters:
      - description: Project
        in: path
        name: project
        required: true
        type: string
      - description: Stage
        in: path
        name: stage
        required: true
        type: string
      - description: Service
        in: path
        name: service
        required: true
        type: string
      - description: Evaluation
        in: body
        name: evaluation
        required: true
        schema:
          $ref: '#/definitions/models.CreateEvaluationParams'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.CreateEvaluationResponse'
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Trigger a new evaluation
      tags:
      - Evaluation
  /sequence/{project}:
    get:
      consumes:
      - application/json
      description: Get task sequence execution states
      parameters:
      - description: The project name
        in: path
        name: project
        type: string
      - description: The name of the sequence
        in: query
        name: name
        type: string
      - description: The state of the sequence (e.g., triggered, finished,...)
        in: query
        name: state
        type: string
      - description: 'The from time stamp for fetching sequence states (in ISO8601
          time format, e.g.: 2021-05-10T09:51:00.000Z)'
        in: query
        name: fromTime
        type: string
      - description: 'The before time stamp for fetching sequence states (in ISO8601
          time format, e.g.: 2021-05-10T09:51:00.000Z)'
        in: query
        name: beforeTime
        type: string
      - description: The number of items to return
        in: query
        name: pageSize
        type: integer
      - description: Pointer to the next set of items
        in: query
        name: nextPageKey
        type: string
      - description: Comma separated list of keptnContext IDs
        in: query
        name: keptnContext
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.SequenceStates'
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Get task sequence execution states
      tags:
      - Sequence
  /sequence/{project}/{keptnContext}/control:
    post:
      consumes:
      - application/json
      description: Pause/Resume/Abort a task sequence, either for a specific stage,
        or for all stages involved in the sequence
      parameters:
      - description: The project name
        in: path
        name: project
        required: true
        type: string
      - description: The keptnContext ID of the sequence
        in: path
        name: keptnContext
        required: true
        type: string
      - description: Sequence Control Command
        in: body
        name: sequenceControl
        required: true
        schema:
          $ref: '#/definitions/models.SequenceControlCommand'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.SequenceControlResponse'
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: Pause/Resume/Abort a task sequence
      tags:
      - Sequence
  /uniform/registration:
    get:
      consumes:
      - application/json
      description: Retrieve uniform integrations matching the provided filter
      parameters:
      - description: id
        in: query
        name: id
        type: string
      - description: name
        in: query
        name: name
        type: string
      - description: project
        in: query
        name: project
        type: string
      - description: stage
        in: query
        name: stage
        type: string
      - description: service
        in: query
        name: service
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            items:
              $ref: '#/definitions/models.Integration'
            type: array
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: 'BETA: Retrieve uniform integrations matching the provided filter'
      tags:
      - Uniform
    post:
      consumes:
      - application/json
      description: Register a uniform integration
      parameters:
      - description: Integration
        in: body
        name: integration
        required: true
        schema:
          $ref: '#/definitions/models.Integration'
      produces:
      - application/json
      responses:
        "200":
          description: 'ok: registration already exists'
          schema:
            $ref: '#/definitions/models.RegisterResponse'
        "201":
          description: 'ok: a new registration has been created'
          schema:
            $ref: '#/definitions/models.RegisterResponse'
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: 'BETA: Register a uniform integration'
      tags:
      - Uniform
  /uniform/registration/{integrationID}:
    delete:
      consumes:
      - application/json
      description: Unregister a uniform integration
      parameters:
      - description: integrationID
        in: path
        name: integrationID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: 'BETA: Unregister a uniform integration'
      tags:
      - Uniform
  /uniform/registration/{integrationID}/ping:
    put:
      consumes:
      - application/json
      description: Endpoint for sending heartbeat messages sent from Keptn integrations
        to the control plane
      parameters:
      - description: integrationID
        in: path
        name: integrationID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.Integration'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: 'BETA: Endpoint for sending heartbeat messages sent from Keptn integrations
        to the control plane'
      tags:
      - Uniform
  /uniform/registration/{integrationID}/subscription:
    get:
      consumes:
      - application/json
      description: Retrieve all subscriptions of a uniform integration
      parameters:
      - description: integrationID
        in: path
        name: integrationID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            items:
              $ref: '#/definitions/models.Subscription'
            type: array
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: 'BETA: Retrieve all subscriptions of a uniform integration'
      tags:
      - Uniform
    post:
      consumes:
      - application/json
      description: Create a new subscription
      parameters:
      - description: integrationID
        in: path
        name: integrationID
        required: true
        type: string
      - description: Subscription
        in: body
        name: subscription
        required: true
        schema:
          $ref: '#/definitions/models.Subscription'
      produces:
      - application/json
      responses:
        "201":
          description: ""
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: 'BETA: Create a new subscription'
      tags:
      - Uniform
  /uniform/registration/{integrationID}/subscription/{subscriptionID}:
    delete:
      consumes:
      - application/json
      description: Delete a subscription
      parameters:
      - description: integrationID
        in: path
        name: integrationID
        required: true
        type: string
      - description: subscriptionID
        in: path
        name: subscriptionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: 'BETA: Delete a subscription'
      tags:
      - Uniform
    get:
      consumes:
      - application/json
      description: Retrieve an already existing subscription
      parameters:
      - description: integrationID
        in: path
        name: integrationID
        required: true
        type: string
      - description: subscriptionID
        in: path
        name: subscriptionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.Subscription'
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: 'BETA: Retrieve an already existing subscription'
      tags:
      - Uniform
    put:
      consumes:
      - application/json
      description: Update or create a subscription
      parameters:
      - description: integrationID
        in: path
        name: integrationID
        required: true
        type: string
      - description: subscriptionID
        in: path
        name: subscriptionID
        required: true
        type: string
      - description: Subscription
        in: body
        name: subscription
        required: true
        schema:
          $ref: '#/definitions/models.Subscription'
      produces:
      - application/json
      responses:
        "201":
          description: ""
        "400":
          description: Invalid payload
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - ApiKeyAuth: []
      summary: 'BETA: Update or create a subscription'
      tags:
      - Uniform
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: x-token
    type: apiKey
swagger: "2.0"
