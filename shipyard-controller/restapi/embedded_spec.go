// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/cloudevents+json",
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Chipyard Controller API",
    "version": "0.1.0"
  },
  "basePath": "/v1",
  "paths": {
    "/event": {
      "post": {
        "summary": "Handles an incoming event",
        "operationId": "handle event",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/event/triggered/{eventType}": {
      "get": {
        "summary": "Get list of triggered events",
        "operationId": "get triggered events",
        "parameters": [
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/nextPageKey"
          },
          {
            "$ref": "#/parameters/project"
          },
          {
            "$ref": "#/parameters/stage"
          },
          {
            "$ref": "#/parameters/service"
          },
          {
            "$ref": "#/parameters/eventID"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Events"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/eventType"
        }
      ]
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "description": "Error code",
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "description": "Error message",
          "type": "string"
        }
      }
    },
    "Event": {
      "type": "object",
      "required": [
        "data",
        "source",
        "type"
      ],
      "properties": {
        "contenttype": {
          "type": "string"
        },
        "data": {
          "type": [
            "object",
            "string"
          ]
        },
        "extensions": {
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "shkeptncontext": {
          "type": "string"
        },
        "source": {
          "type": "string",
          "format": "uri-reference"
        },
        "specversion": {
          "type": "string"
        },
        "time": {
          "type": "string"
        },
        "triggeredid": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "Events": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          }
        },
        "nextPageKey": {
          "description": "Pointer to next page, base64 encoded",
          "type": "string"
        },
        "pageSize": {
          "description": "Size of returned page",
          "type": "number"
        },
        "totalCount": {
          "description": "Total number of events",
          "type": "number"
        }
      }
    }
  },
  "parameters": {
    "eventID": {
      "type": "string",
      "description": "Stage name",
      "name": "eventID",
      "in": "query"
    },
    "eventType": {
      "type": "string",
      "description": "Event type",
      "name": "eventType",
      "in": "path",
      "required": true
    },
    "nextPageKey": {
      "type": "string",
      "description": "Pointer to the next set of items",
      "name": "nextPageKey",
      "in": "query"
    },
    "pageSize": {
      "maximum": 50,
      "minimum": 1,
      "type": "integer",
      "default": 20,
      "description": "The number of items to return",
      "name": "pageSize",
      "in": "query"
    },
    "project": {
      "type": "string",
      "description": "Project name",
      "name": "project",
      "in": "query"
    },
    "service": {
      "type": "string",
      "description": "Service name",
      "name": "service",
      "in": "query"
    },
    "stage": {
      "type": "string",
      "description": "Stage name",
      "name": "stage",
      "in": "query"
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/cloudevents+json",
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Chipyard Controller API",
    "version": "0.1.0"
  },
  "basePath": "/v1",
  "paths": {
    "/event": {
      "post": {
        "summary": "Handles an incoming event",
        "operationId": "handle event",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/event/triggered/{eventType}": {
      "get": {
        "summary": "Get list of triggered events",
        "operationId": "get triggered events",
        "parameters": [
          {
            "maximum": 50,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "description": "The number of items to return",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Pointer to the next set of items",
            "name": "nextPageKey",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Project name",
            "name": "project",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Stage name",
            "name": "stage",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Service name",
            "name": "service",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Stage name",
            "name": "eventID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Events"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Event type",
          "name": "eventType",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "description": "Error code",
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "description": "Error message",
          "type": "string"
        }
      }
    },
    "Event": {
      "type": "object",
      "required": [
        "data",
        "source",
        "type"
      ],
      "properties": {
        "contenttype": {
          "type": "string"
        },
        "data": {
          "type": [
            "object",
            "string"
          ]
        },
        "extensions": {
          "type": "object"
        },
        "id": {
          "type": "string"
        },
        "shkeptncontext": {
          "type": "string"
        },
        "source": {
          "type": "string",
          "format": "uri-reference"
        },
        "specversion": {
          "type": "string"
        },
        "time": {
          "type": "string"
        },
        "triggeredid": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "Events": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          }
        },
        "nextPageKey": {
          "description": "Pointer to next page, base64 encoded",
          "type": "string"
        },
        "pageSize": {
          "description": "Size of returned page",
          "type": "number"
        },
        "totalCount": {
          "description": "Total number of events",
          "type": "number"
        }
      }
    }
  },
  "parameters": {
    "eventID": {
      "type": "string",
      "description": "Stage name",
      "name": "eventID",
      "in": "query"
    },
    "eventType": {
      "type": "string",
      "description": "Event type",
      "name": "eventType",
      "in": "path",
      "required": true
    },
    "nextPageKey": {
      "type": "string",
      "description": "Pointer to the next set of items",
      "name": "nextPageKey",
      "in": "query"
    },
    "pageSize": {
      "maximum": 50,
      "minimum": 1,
      "type": "integer",
      "default": 20,
      "description": "The number of items to return",
      "name": "pageSize",
      "in": "query"
    },
    "project": {
      "type": "string",
      "description": "Project name",
      "name": "project",
      "in": "query"
    },
    "service": {
      "type": "string",
      "description": "Service name",
      "name": "service",
      "in": "query"
    },
    "stage": {
      "type": "string",
      "description": "Stage name",
      "name": "stage",
      "in": "query"
    }
  }
}`))
}
