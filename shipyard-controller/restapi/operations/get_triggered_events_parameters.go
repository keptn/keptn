// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetTriggeredEventsParams creates a new GetTriggeredEventsParams object
// with the default values initialized.
func NewGetTriggeredEventsParams() GetTriggeredEventsParams {

	var (
		// initialize parameters with default values

		pageSizeDefault = int64(20)
	)

	return GetTriggeredEventsParams{
		PageSize: &pageSizeDefault,
	}
}

// GetTriggeredEventsParams contains all the bound params for the get triggered events operation
// typically these are obtained from a http.Request
//
// swagger:parameters get triggered events
type GetTriggeredEventsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Stage name
	  In: query
	*/
	EventID *string
	/*Event type
	  Required: true
	  In: path
	*/
	EventType string
	/*Pointer to the next set of items
	  In: query
	*/
	NextPageKey *string
	/*The number of items to return
	  Maximum: 50
	  Minimum: 1
	  In: query
	  Default: 20
	*/
	PageSize *int64
	/*Project name
	  In: query
	*/
	Project *string
	/*Service name
	  In: query
	*/
	Service *string
	/*Stage name
	  In: query
	*/
	Stage *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetTriggeredEventsParams() beforehand.
func (o *GetTriggeredEventsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qEventID, qhkEventID, _ := qs.GetOK("eventID")
	if err := o.bindEventID(qEventID, qhkEventID, route.Formats); err != nil {
		res = append(res, err)
	}

	rEventType, rhkEventType, _ := route.Params.GetOK("eventType")
	if err := o.bindEventType(rEventType, rhkEventType, route.Formats); err != nil {
		res = append(res, err)
	}

	qNextPageKey, qhkNextPageKey, _ := qs.GetOK("nextPageKey")
	if err := o.bindNextPageKey(qNextPageKey, qhkNextPageKey, route.Formats); err != nil {
		res = append(res, err)
	}

	qPageSize, qhkPageSize, _ := qs.GetOK("pageSize")
	if err := o.bindPageSize(qPageSize, qhkPageSize, route.Formats); err != nil {
		res = append(res, err)
	}

	qProject, qhkProject, _ := qs.GetOK("project")
	if err := o.bindProject(qProject, qhkProject, route.Formats); err != nil {
		res = append(res, err)
	}

	qService, qhkService, _ := qs.GetOK("service")
	if err := o.bindService(qService, qhkService, route.Formats); err != nil {
		res = append(res, err)
	}

	qStage, qhkStage, _ := qs.GetOK("stage")
	if err := o.bindStage(qStage, qhkStage, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindEventID binds and validates parameter EventID from query.
func (o *GetTriggeredEventsParams) bindEventID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.EventID = &raw

	return nil
}

// bindEventType binds and validates parameter EventType from path.
func (o *GetTriggeredEventsParams) bindEventType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.EventType = raw

	return nil
}

// bindNextPageKey binds and validates parameter NextPageKey from query.
func (o *GetTriggeredEventsParams) bindNextPageKey(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.NextPageKey = &raw

	return nil
}

// bindPageSize binds and validates parameter PageSize from query.
func (o *GetTriggeredEventsParams) bindPageSize(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetTriggeredEventsParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("pageSize", "query", "int64", raw)
	}
	o.PageSize = &value

	if err := o.validatePageSize(formats); err != nil {
		return err
	}

	return nil
}

// validatePageSize carries on validations for parameter PageSize
func (o *GetTriggeredEventsParams) validatePageSize(formats strfmt.Registry) error {

	if err := validate.MinimumInt("pageSize", "query", int64(*o.PageSize), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("pageSize", "query", int64(*o.PageSize), 50, false); err != nil {
		return err
	}

	return nil
}

// bindProject binds and validates parameter Project from query.
func (o *GetTriggeredEventsParams) bindProject(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Project = &raw

	return nil
}

// bindService binds and validates parameter Service from query.
func (o *GetTriggeredEventsParams) bindService(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Service = &raw

	return nil
}

// bindStage binds and validates parameter Stage from query.
func (o *GetTriggeredEventsParams) bindStage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Stage = &raw

	return nil
}
