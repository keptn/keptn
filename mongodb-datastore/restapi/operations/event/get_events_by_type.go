// Code generated by go-swagger; DO NOT EDIT.

package event

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/keptn/keptn/mongodb-datastore/models"
)

// GetEventsByTypeHandlerFunc turns a function with the right signature into a get events by type handler
type GetEventsByTypeHandlerFunc func(GetEventsByTypeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetEventsByTypeHandlerFunc) Handle(params GetEventsByTypeParams) middleware.Responder {
	return fn(params)
}

// GetEventsByTypeHandler interface for that can handle valid get events by type params
type GetEventsByTypeHandler interface {
	Handle(GetEventsByTypeParams) middleware.Responder
}

// NewGetEventsByType creates a new http.Handler for the get events by type operation
func NewGetEventsByType(ctx *middleware.Context, handler GetEventsByTypeHandler) *GetEventsByType {
	return &GetEventsByType{Context: ctx, Handler: handler}
}

/*GetEventsByType swagger:route GET /event/type/{eventType} event getEventsByType

Gets events by their type from the mongodb

*/
type GetEventsByType struct {
	Context *middleware.Context
	Handler GetEventsByTypeHandler
}

func (o *GetEventsByType) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetEventsByTypeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetEventsByTypeOKBody get events by type o k body
//
// swagger:model GetEventsByTypeOKBody
type GetEventsByTypeOKBody struct {

	// events
	Events []*models.KeptnContextExtendedCE `json:"events"`
}

// Validate validates this get events by type o k body
func (o *GetEventsByTypeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetEventsByTypeOKBody) validateEvents(formats strfmt.Registry) error {

	if swag.IsZero(o.Events) { // not required
		return nil
	}

	for i := 0; i < len(o.Events); i++ {
		if swag.IsZero(o.Events[i]) { // not required
			continue
		}

		if o.Events[i] != nil {
			if err := o.Events[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getEventsByTypeOK" + "." + "events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetEventsByTypeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetEventsByTypeOKBody) UnmarshalBinary(b []byte) error {
	var res GetEventsByTypeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
