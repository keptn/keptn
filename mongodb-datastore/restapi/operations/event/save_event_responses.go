// Code generated by go-swagger; DO NOT EDIT.

package event

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/keptn/keptn/mongodb-datastore/models"
)

// SaveEventCreatedCode is the HTTP code returned for type SaveEventCreated
const SaveEventCreatedCode int = 201

/*SaveEventCreated created

swagger:response saveEventCreated
*/
type SaveEventCreated struct {
}

// NewSaveEventCreated creates SaveEventCreated with default headers values
func NewSaveEventCreated() *SaveEventCreated {

	return &SaveEventCreated{}
}

// WriteResponse to the client
func (o *SaveEventCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

/*SaveEventDefault error

swagger:response saveEventDefault
*/
type SaveEventDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewSaveEventDefault creates SaveEventDefault with default headers values
func NewSaveEventDefault(code int) *SaveEventDefault {
	if code <= 0 {
		code = 500
	}

	return &SaveEventDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the save event default response
func (o *SaveEventDefault) WithStatusCode(code int) *SaveEventDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the save event default response
func (o *SaveEventDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the save event default response
func (o *SaveEventDefault) WithPayload(payload *models.Error) *SaveEventDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the save event default response
func (o *SaveEventDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SaveEventDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
