// Code generated by go-swagger; DO NOT EDIT.

package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// SaveLogCreatedCode is the HTTP code returned for type SaveLogCreated
const SaveLogCreatedCode int = 201

/*SaveLogCreated created

swagger:response saveLogCreated
*/
type SaveLogCreated struct {
}

// NewSaveLogCreated creates SaveLogCreated with default headers values
func NewSaveLogCreated() *SaveLogCreated {

	return &SaveLogCreated{}
}

// WriteResponse to the client
func (o *SaveLogCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

/*SaveLogDefault error

swagger:response saveLogDefault
*/
type SaveLogDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *SaveLogDefaultBody `json:"body,omitempty"`
}

// NewSaveLogDefault creates SaveLogDefault with default headers values
func NewSaveLogDefault(code int) *SaveLogDefault {
	if code <= 0 {
		code = 500
	}

	return &SaveLogDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the save log default response
func (o *SaveLogDefault) WithStatusCode(code int) *SaveLogDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the save log default response
func (o *SaveLogDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the save log default response
func (o *SaveLogDefault) WithPayload(payload *SaveLogDefaultBody) *SaveLogDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the save log default response
func (o *SaveLogDefault) SetPayload(payload *SaveLogDefaultBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SaveLogDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
