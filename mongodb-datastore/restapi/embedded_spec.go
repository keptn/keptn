// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/cloudevents+json",
    "application/json"
  ],
  "produces": [
    "application/cloudevents+json",
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "mongodb-datastore",
    "version": "0.1.0"
  },
  "basePath": "/",
  "paths": {
    "/event": {
      "get": {
        "tags": [
          "event"
        ],
        "summary": "Gets events from the data store",
        "operationId": "getEvents",
        "parameters": [
          {
            "type": "string",
            "description": "keptnContext of the events to get",
            "name": "keptnContext",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Type of the keptn cloud event",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "From time to fetch keptn cloud events",
            "name": "fromTime",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Set to load only root events",
            "name": "root",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Name of the project",
            "name": "project",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Name of the stage",
            "name": "stage",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Name of the service",
            "name": "service",
            "in": "query"
          },
          {
            "type": "string",
            "description": "EventID",
            "name": "eventID",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Name of the event source",
            "name": "source",
            "in": "query"
          },
          {
            "$ref": "#/parameters/pagesizeParam"
          },
          {
            "$ref": "#/parameters/pageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "object",
              "properties": {
                "events": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/KeptnContextExtendedCE"
                  }
                },
                "nextPageKey": {
                  "description": "Pointer to the next page",
                  "type": "string"
                },
                "pageSize": {
                  "description": "Size of the returned page",
                  "type": "integer"
                },
                "totalCount": {
                  "description": "Total number of events",
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "event"
        ],
        "summary": "Saves an event to the datastore",
        "operationId": "saveEvent",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/KeptnContextExtendedCE"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "KeptnContextExtendedCE": {
      "allOf": [
        {
          "$ref": "https://raw.githubusercontent.com/cloudevents/spec/v0.2/spec.json#/definitions/event"
        },
        {
          "type": "object",
          "properties": {
            "shkeptncontext": {
              "type": "string"
            }
          }
        }
      ]
    },
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "fields": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "principal": {
      "type": "string"
    }
  },
  "parameters": {
    "pageParam": {
      "type": "string",
      "description": "Key of the page to be returned",
      "name": "nextPageKey",
      "in": "query"
    },
    "pagesizeParam": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer",
      "default": 20,
      "description": "Page size to be returned",
      "name": "pageSize",
      "in": "query"
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/cloudevents+json",
    "application/json"
  ],
  "produces": [
    "application/cloudevents+json",
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "mongodb-datastore",
    "version": "0.1.0"
  },
  "basePath": "/",
  "paths": {
    "/event": {
      "get": {
        "tags": [
          "event"
        ],
        "summary": "Gets events from the data store",
        "operationId": "getEvents",
        "parameters": [
          {
            "type": "string",
            "description": "keptnContext of the events to get",
            "name": "keptnContext",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Type of the keptn cloud event",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "From time to fetch keptn cloud events",
            "name": "fromTime",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Set to load only root events",
            "name": "root",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Name of the project",
            "name": "project",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Name of the stage",
            "name": "stage",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Name of the service",
            "name": "service",
            "in": "query"
          },
          {
            "type": "string",
            "description": "EventID",
            "name": "eventID",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Name of the event source",
            "name": "source",
            "in": "query"
          },
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "description": "Page size to be returned",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Key of the page to be returned",
            "name": "nextPageKey",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "object",
              "properties": {
                "events": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/KeptnContextExtendedCE"
                  }
                },
                "nextPageKey": {
                  "description": "Pointer to the next page",
                  "type": "string"
                },
                "pageSize": {
                  "description": "Size of the returned page",
                  "type": "integer"
                },
                "totalCount": {
                  "description": "Total number of events",
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "event"
        ],
        "summary": "Saves an event to the datastore",
        "operationId": "saveEvent",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/KeptnContextExtendedCE"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "KeptnContextExtendedCE": {
      "allOf": [
        {
          "$ref": "#/definitions/event"
        },
        {
          "type": "object",
          "properties": {
            "shkeptncontext": {
              "type": "string"
            }
          }
        }
      ]
    },
    "contenttype": {
      "type": "string"
    },
    "data": {
      "type": [
        "object",
        "string"
      ]
    },
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "fields": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "event": {
      "type": "object",
      "required": [
        "specversion",
        "id",
        "type",
        "source"
      ],
      "properties": {
        "contenttype": {
          "$ref": "#/definitions/contenttype"
        },
        "data": {
          "$ref": "#/definitions/data"
        },
        "extensions": {
          "$ref": "#/definitions/extensions"
        },
        "id": {
          "$ref": "#/definitions/id"
        },
        "source": {
          "$ref": "#/definitions/source"
        },
        "specversion": {
          "$ref": "#/definitions/specversion"
        },
        "time": {
          "$ref": "#/definitions/time"
        },
        "type": {
          "$ref": "#/definitions/type"
        }
      }
    },
    "extensions": {
      "type": "object"
    },
    "id": {
      "type": "string"
    },
    "principal": {
      "type": "string"
    },
    "source": {
      "type": "string",
      "format": "uri-reference"
    },
    "specversion": {
      "type": "string"
    },
    "time": {
      "type": "string",
      "format": "date-time"
    },
    "type": {
      "type": "string"
    }
  },
  "parameters": {
    "pageParam": {
      "type": "string",
      "description": "Key of the page to be returned",
      "name": "nextPageKey",
      "in": "query"
    },
    "pagesizeParam": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer",
      "default": 20,
      "description": "Page size to be returned",
      "name": "pageSize",
      "in": "query"
    }
  }
}`))
}
