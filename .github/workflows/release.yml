name: Release
on:
  workflow_dispatch:
    inputs:
      semver-type:
        description: 'Can be one of [major,minor,patch]. CAUTION: This will enforce a new release with the specified semantic version type bumped.'
        required: false
env:
  NODE_VERSION: 16
  KEPTN_BOT_NAME: "Keptn Bot"
  KEPTN_BOT_EMAIL: "keptn-bot <86361500+keptn-bot@users.noreply.github.com>"
  RELEASE_NOTES_FILE: "RELEASE-BODY.md"
  BUILD_EVERYTHING: 'true'

  BRIDGE_ARTIFACT_PREFIX: "BRIDGE"
  API_ARTIFACT_PREFIX: "API"
  APPROVAL_SVC_ARTIFACT_PREFIX: "APPROVAL_SVC"
  DISTRIBUTOR_ARTIFACT_PREFIX: "DISTRIBUTOR"
  SHIPYARD_CONTROLLER_ARTIFACT_PREFIX: "SHIPYARD_CONTROLLER"
  SECRET_SVC_ARTIFACT_PREFIX: "SECRET_SVC"
  RESOURCE_SVC_ARTIFACT_PREFIX: "RESOURCE_SVC"
  REMEDIATION_SVC_ARTIFACT_PREFIX: "REMEDIATION_SVC"
  LIGHTHOUSE_SVC_ARTIFACT_PREFIX: "LIGHTHOUSE_SVC"
  MONGODB_DS_ARTIFACT_PREFIX: "MONGODB_DS"
  STATISTICS_SVC_ARTIFACT_PREFIX: "STATISTICS_SVC"
  WEBHOOK_SVC_ARTIFACT_PREFIX: "WEBHOOK_SVC"

  BRIDGE_ARTIFACT: "bridge2"
  BRIDGE_FOLDER: "bridge/"
  BRIDGE_DOCKER_TEST_TARGET: "builder-test-unit"

  API_ARTIFACT: "api"
  API_FOLDER: "api/"
  API_DOCKER_TEST_TARGET: "builder-test"

  APPROVAL_SVC_ARTIFACT: "approval-service"
  APPROVAL_SVC_FOLDER: "approval-service/"
  APPROVAL_SVC_DOCKER_TEST_TARGET: "builder-test"

  DISTRIBUTOR_ARTIFACT: "distributor"
  DISTRIBUTOR_FOLDER: "distributor/"
  DISTRIBUTOR_DOCKER_TEST_TARGET: "builder-test"

  SHIPYARD_CONTROLLER_ARTIFACT: "shipyard-controller"
  SHIPYARD_CONTROLLER_FOLDER: "shipyard-controller/"
  SHIPYARD_CONTROLLER_DOCKER_TEST_TARGET: "builder-test"

  SECRET_SVC_ARTIFACT: "secret-service"
  SECRET_SVC_FOLDER: "secret-service/"
  SECRET_SVC_DOCKER_TEST_TARGET: "builder-test"

  RESOURCE_SVC_ARTIFACT: "resource-service"
  RESOURCE_SVC_FOLDER: "resource-service/"
  RESOURCE_SVC_DOCKER_TEST_TARGET: "builder-test"

  REMEDIATION_SVC_ARTIFACT: "remediation-service"
  REMEDIATION_SVC_FOLDER: "remediation-service/"
  REMEDIATION_SVC_DOCKER_TEST_TARGET: "builder-test"

  LIGHTHOUSE_SVC_ARTIFACT: "lighthouse-service"
  LIGHTHOUSE_SVC_FOLDER: "lighthouse-service/"
  LIGHTHOUSE_SVC_DOCKER_TEST_TARGET: "builder-test"

  MONGODB_DS_ARTIFACT: "mongodb-datastore"
  MONGODB_DS_FOLDER: "mongodb-datastore/"
  MONGODB_DS_DOCKER_TEST_TARGET: "builder-test"

  STATISTICS_SVC_ARTIFACT: "statistics-service"
  STATISTICS_SVC_FOLDER: "statistics-service/"
  STATISTICS_SVC_DOCKER_TEST_TARGET: "builder-test"

  WEBHOOK_SVC_ARTIFACT: "webhook-service"
  WEBHOOK_SVC_FOLDER: "webhook-service/"
  WEBHOOK_SVC_DOCKER_TEST_TARGET: "builder-test"


defaults:
  run:
    shell: bash
jobs:
  prepare:
    name: Prepare release run
    runs-on: ubuntu-20.04
    outputs:
      next-version: ${{ steps.version_number.outputs.next-version }}
      branch: ${{ steps.current_branch.outputs.branch }}
      keptn-spec-version: ${{ steps.keptn_spec_version.outputs.keptn-spec-version }}
      datetime: ${{ steps.get_datetime.outputs.DATETIME }}
      git_sha: ${{ steps.extract_branch.outputs.GIT_SHA }}
      BUILD_EVERYTHING: ${{ steps.build_everything.outputs.BUILD_EVERYTHING }}
      BUILD_INSTALLER: ${{ steps.check_modified_files.outputs.BUILD_INSTALLER }}
      BUILD_CLI: ${{ steps.check_modified_files.outputs.BUILD_CLI }}
      BUILD_MATRIX: ${{ steps.check_modified_files.outputs.BUILD_MATRIX }}
      BUILD_MATRIX_EMPTY: ${{ steps.check_modified_files.outputs.BUILD_MATRIX_EMPTY }}
    steps:
      - name: Check SemVer input
        env:
          SEMVER_TYPE: ${{ github.event.inputs.semver-type }}
        run: |
          if [[ ! -z "$SEMVER_TYPE" ]]; then
            echo "SemVer Type is defined. Checking for valid SemVer type..."
            if [[ "$SEMVER_TYPE" == "major" ]] || [[ "$SEMVER_TYPE" == "minor" ]] || [[ "$SEMVER_TYPE" == "patch" ]]; then
              echo "::notice::SemVer Type is correctly set to $SEMVER_TYPE! Continuing with this version bump..."
            else
              echo "::error::ERROR: Enforced SemVer does not match any of [major,minor,patch]!"
              echo "Exiting..."
              exit 1
            fi
          else
            echo "::notice::No SemVer type defined, continuing with auto generated version number..."
          fi

      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.KEPTN_BOT_TOKEN }}

      - name: Extract branch name
        id: extract_branch
        # see https://github.com/keptn/gh-action-extract-branch-name for details
        uses: keptn/gh-action-extract-branch-name@main

      - name: Get current date and time
        id: get_datetime
        run: |
          echo "::set-output name=DATE::$(date +'%Y%m%d')"
          echo "::set-output name=TIME::$(date +'%H%M')"
          echo "::set-output name=DATETIME::$(date +'%Y%m%d')$(date +'%H%M')"

      - name: Find next version number
        id: version_number
        env:
          SEMVER_TYPE: ${{ github.event.inputs.semver-type }}
        run: |
          if [[ ! -z "$SEMVER_TYPE" ]]; then
            npx standard-version@^9.3.1 \
              --skip.commit \
              --skip.tag \
              --skip.changelog \
              --release-as "$SEMVER_TYPE"
          else
            npx standard-version@^9.3.1 \
              --skip.commit \
              --skip.tag \
              --skip.changelog
          fi

          NEXT_VERSION=$(cat VERSION.txt)
          echo "::set-output name=next-version::${NEXT_VERSION}"
          git checkout HEAD -- VERSION.txt

      - name: Find current branch
        id: current_branch
        run: |
          branch=${GITHUB_REF#refs/heads/}
          echo "::set-output name=branch::${branch}"

      - name: Get keptn spec version
        id: keptn_spec_version
        run: |
          git submodule update --init
          cd specification
          KEPTN_SPEC_VERSION=$(git describe --tags)
          echo "::set-output name=keptn-spec-version::${KEPTN_SPEC_VERSION}"

      - name: Prepare artifact build matrix
        id: check_modified_files
        env:
          BUILD_EVERYTHING: true
          RELEASE_BUILD: true
        run: |
          ./gh-actions-scripts/prepare_changed_artifacts.sh ""

  ############################################################################
  # Build Docker Images
  ############################################################################
  docker_build:
    needs: prepare
    name: Docker Build
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.BUILD_MATRIX) }}
    env:
      BRANCH: ${{ needs.prepare.outputs.branch }}
      VERSION: ${{ needs.prepare.outputs.next-version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: "ghcr.io"
          username: "keptn-bot"
          password: ${{ secrets.KEPTN_BOT_TOKEN }}

      - name: Login to Quay.io
        uses: docker/login-action@v2
        with:
          registry: "quay.io"
          username: ${{ secrets.QUAY_USER }}
          password: ${{ secrets.QUAY_TOKEN }}

      - id: docker_build_image
        name: "Docker Build keptn/${{ matrix.config.artifact }}"
        uses: docker/build-push-action@v3
        with:
          context: ${{ matrix.config.working-dir }}
          tags: |
            keptn/${{ matrix.config.artifact }}:${{ env.VERSION }}
            quay.io/keptn/${{ matrix.config.artifact }}:${{ env.VERSION }}
            ghcr.io/keptn/${{ matrix.config.artifact }}:${{ env.VERSION }}
          build-args: |
            version=${{ env.VERSION }}
            buildTime=${{ needs.prepare.outputs.datetime }}
            gitSha=${{ needs.prepare.outputs.git_sha }}
          push: ${{ matrix.config.should-push-image }}
          pull: true

      - name: Write docker image digest to file
        if: matrix.config.should-push-image
        env:
          IMAGE_DIGEST: ${{ steps.docker_build_image.outputs.digest }}
          IMAGE_DIGEST_FILENAME: "./digest-${{ matrix.config.artifact }}.txt"
        run: |
          echo "${{ matrix.config.artifact }},$IMAGE_DIGEST" > "$IMAGE_DIGEST_FILENAME"

      - name: Upload Digest file as artifact
        if: matrix.config.should-push-image
        uses: actions/upload-artifact@v3
        env:
          IMAGE_DIGEST_FILENAME: "./digest-${{ matrix.config.artifact }}.txt"
        with:
          name: image-digests
          path: ${{ env.IMAGE_DIGEST_FILENAME }}

  ############################################################################
  # Build Helm Charts (only relevant for build_everything)
  ############################################################################
  build-helm-charts:
    needs: prepare
    name: Build Helm Charts
    uses: ./.github/workflows/build-helm-charts.yml
    with:
      branch: ${{ needs.prepare.outputs.branch }}
      version: ${{ needs.prepare.outputs.next-version }}
      keptn-spec-version: ${{ needs.prepare.outputs.keptn-spec-version }}
      release: true
    secrets:
      HELM_SIGNING_PRIVATE_KEY: ${{ secrets.HELM_SIGNING_PRIVATE_KEY }}
      HELM_SIGNING_PRIVATE_KEY_NAME: ${{ secrets.HELM_SIGNING_PRIVATE_KEY_NAME }}
      HELM_SIGNING_PRIVATE_KEY_PASSPHRASE: ${{ secrets.HELM_SIGNING_PRIVATE_KEY_PASSPHRASE }}

  ############################################################################
  # Build CLI
  ############################################################################
  build-cli:
    needs: prepare
    uses: ./.github/workflows/build-cli.yml
    with:
      branch: ${{ needs.prepare.outputs.branch }}
      version: ${{ needs.prepare.outputs.next-version }}
      release: true

  ############################################################################
  # Release
  ############################################################################
  release:
    name: "Release"
    runs-on: ubuntu-20.04
    needs: [prepare, docker_build, build-helm-charts, build-cli]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          path: keptn
          token: ${{ secrets.KEPTN_BOT_TOKEN }}

      - name: Checkout helm-charts repo
        uses: actions/checkout@v3
        with:
          repository: keptn/helm-charts
          path: helm-charts
          ref: gh-pages
          token: ${{ secrets.KEPTN_BOT_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v3.4.1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure Git
        env:
          KEPTN_BOT_NAME: ${{ env.KEPTN_BOT_NAME }}
          KEPTN_BOT_EMAIL: ${{ env.KEPTN_BOT_EMAIL }}
        run: |
          git config --global user.name "$KEPTN_BOT_NAME"
          git config --global user.email "$KEPTN_BOT_EMAIL"

      - name: Download Release Artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./dist

      - name: Prepare GitHub Release Notes
        working-directory: keptn
        env:
          SEMVER_TYPE: ${{ github.event.inputs.semver-type }}
        run: |
          # Delete pre-release tags to be able to generate a changelog from last 'real' release
          # This is a workaround for a known limitation of standard-version
          # Reference: https://github.com/conventional-changelog/standard-version/issues/203#issuecomment-872415140
          git tag -l | grep -vE '^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)$' | xargs git tag -d

          if [[ ! -z "$SEMVER_TYPE" ]]; then
            npx standard-version@^9.3.1 \
              -i "${{ env.RELEASE_NOTES_FILE }}" \
              --skip.commit \
              --skip.tag \
              --header "" \
              --release-as "$SEMVER_TYPE"
          else
            npx standard-version@^9.3.1 \
              -i "${{ env.RELEASE_NOTES_FILE }}" \
              --skip.commit \
              --skip.tag \
              --header ""
          fi

      - name: Temporarily disable "include administrators" branch protection
        uses: benjefferies/branch-protection-bot@b6a1ef57a47860aa483bf6048c1e888018a15f9c
        with:
          access_token: ${{ secrets.KEPTN_BOT_TOKEN }}
          branch: ${{ needs.prepare.outputs.branch }}
          enforce_admins: false

      - name: Create release package
        id: create-release-package
        working-directory: keptn
        env:
          SEMVER_TYPE: ${{ github.event.inputs.semver-type }}
          GITHUB_TOKEN: ${{ secrets.KEPTN_BOT_TOKEN }}
        run: |
          echo "🚀 Creating release package now..."

          if [[ ! -z "$SEMVER_TYPE" ]]; then
            npx standard-version@^9.3.1 \
              --release-as "$SEMVER_TYPE"
          else
            npx standard-version@^9.3.1
          fi

          echo "::set-output name=tag-name::$(git describe --tags --abbrev=0)"

          echo "Fetching previously deleted old tags..."
          git fetch origin --tags -f
          echo "⚡️ Pushing changes to remote repository..."
          git push --follow-tags

      - name: Enable "include administrators" branch protection
        uses: benjefferies/branch-protection-bot@b6a1ef57a47860aa483bf6048c1e888018a15f9c
        if: always() # Force to always run this step to ensure "include administrators" is always turned back on
        with:
          access_token: ${{ secrets.KEPTN_BOT_TOKEN }}
          branch: ${{ needs.prepare.outputs.branch }}
          enforce_admins: true

      - name: Get k8s resource stats
        working-directory: keptn
        env:
          HELM_TEMPLATE: template.yml
          RESOURCE_JSON: resources.json
          RESOURCE_MARKDOWN: resources.md
          RELEASE_NOTES_FILE: ${{ env.RELEASE_NOTES_FILE }}
        run: ./gh-actions-scripts/generate-k8s-resource-stats.sh

      - name: Create GitHub Release
        working-directory: keptn
        env:
          GITHUB_TOKEN: ${{ secrets.KEPTN_BOT_TOKEN }}
          RELEASE_TAG: ${{ steps.create-release-package.outputs.tag-name }}
        run: |
          gh release create "$RELEASE_TAG" --draft --notes-file "${{ env.RELEASE_NOTES_FILE }}" --title "$RELEASE_TAG"
          sleep 10

      - name: Upload Release Assets
        working-directory: keptn
        env:
          GITHUB_TOKEN: ${{ secrets.KEPTN_BOT_TOKEN }}
          RELEASE_TAG: ${{ steps.create-release-package.outputs.tag-name }}
        run: |
          gh release upload "$RELEASE_TAG" ../dist/keptn-installer/*.tgz
          gh release upload "$RELEASE_TAG" ../dist/keptn-cli/*.tar.gz

      - name: Upload helm charts
        env:
          GITHUB_TOKEN: ${{ secrets.KEPTN_BOT_TOKEN }}
          RELEASE_TAG: ${{ steps.create-release-package.outputs.tag-name }}
        run: |
          mv ./dist/keptn-installer/*.tgz ./helm-charts/packages
          cd ./helm-charts
          helm repo index ./ --url https://charts.keptn.sh/ --merge ./index.yaml
          git add *.tgz
          git add index.yaml
          git commit --signoff -m "Keptn Release $RELEASE_TAG"
          git push

      - name: Attach docker image digests to release
        working-directory: keptn
        env:
          GITHUB_TOKEN: ${{ secrets.KEPTN_BOT_TOKEN }}
          DIGEST_FILE: "digests.csv"
          RELEASE_TAG: ${{ steps.create-release-package.outputs.tag-name }}
        run: |
          cat ../dist/image-digests/digest-*.txt >> $DIGEST_FILE

          gh release upload "$RELEASE_TAG" "$DIGEST_FILE"
