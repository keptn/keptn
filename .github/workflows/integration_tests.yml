name: Integration Tests
on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: '0 3 * * 1-5' # run integration tests at 3 AM, monday to friday (1-5)

  workflow_dispatch: # run integration tests only when triggered manually
    inputs:
      branch:
        description: 'Take CI build artifacts from branch (e.g., master, release-x.y.z)'
        required: true
        default: 'master'
      examples_branch:
        description: 'Branch of Keptn examples to use for integration tests (e.g., master, release-x.y.z)'
        required: true
        default: 'master'
env:
  META_KEPTN_VERSION: 0.8.7
  META_KEPTN_KEPTN_PROJECT: keptn
defaults:
  run:
    shell: bash
jobs:
  integration-test:
    name: "Tests"
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - CLOUD_PROVIDER: "minishift-on-GHA"
            PLATFORM: "openshift"
            PLATFORM_VERSION: "3.11"
            KEPTN_SERVICE_TYPE: "ClusterIP"
            RUN_QUALITY_GATES_TEST: "false"
            RUN_CONTINUOUS_DELIVERY_TEST: "false"
            COLLECT_RESOURCE_LIMITS: "true"
#          - CLOUD_PROVIDER: "k3s-on-GHA"
#            PLATFORM_VERSION: "v1.16.15+k3s1" # see https://github.com/rancher/k3s/releases
#            KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
#            PLATFORM: "kubernetes"
#            KEPTN_SERVICE_TYPE: "NodePort"
#            RUN_QUALITY_GATES_TEST: "true"
#            RUN_CONTINUOUS_DELIVERY_TEST: "false"
#            COLLECT_RESOURCE_LIMITS: "false"
#          - CLOUD_PROVIDER: "k3s-on-GHA"
#            PLATFORM_VERSION: "v1.21.1+k3s1" # see https://github.com/rancher/k3s/releases
#            KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
#            PLATFORM: "kubernetes"
#            KEPTN_SERVICE_TYPE: "NodePort"
#            RUN_QUALITY_GATES_TEST: "true"
#            RUN_CONTINUOUS_DELIVERY_TEST: "false"
#            COLLECT_RESOURCE_LIMITS: "false"
#          - CLOUD_PROVIDER: "k3d-on-GHA"
#            PLATFORM_VERSION: "v4.4.6" # see https://github.com/rancher/k3d/releases
#            KUBECONFIG: ""
#            PLATFORM: "kubernetes"
#            KEPTN_SERVICE_TYPE: "NodePort"
#            RUN_AIRGAPPED_TEST: "true"
#            RUN_QUALITY_GATES_TEST: "false"
#            RUN_CONTINUOUS_DELIVERY_TEST: "false"
#            COLLECT_RESOURCE_LIMITS: "false"
#          - CLOUD_PROVIDER: "GKE"
#            PLATFORM_VERSION: "1.18"
#            KUBECONFIG: ""
#            PLATFORM: "kubernetes"
#            KEPTN_SERVICE_TYPE: "LoadBalancer"
#            RUN_QUALITY_GATES_TEST: "true"
#            RUN_CONTINUOUS_DELIVERY_TEST: "true"
#            REMOTE_EXECUTION_PLANE: "true"
#            COLLECT_RESOURCE_LIMITS: "false"
#          - CLOUD_PROVIDER: "GKE"
#            PLATFORM_VERSION: "1.19"
#            KUBECONFIG: ""
#            PLATFORM: "kubernetes"
#            KEPTN_SERVICE_TYPE: "LoadBalancer"
#            RUN_QUALITY_GATES_TEST: "true"
#            RUN_CONTINUOUS_DELIVERY_TEST: "true"
#            REMOTE_EXECUTION_PLANE: "false"
#            COLLECT_RESOURCE_LIMITS: "true"
    env:
      CLOUD_PROVIDER: ${{ matrix.CLOUD_PROVIDER }}
      PLATFORM: ${{ matrix.PLATFORM }}
      PLATFORM_VERSION: ${{ matrix.PLATFORM_VERSION }}
      KUBECONFIG: ${{ matrix.KUBECONFIG }}
      KEPTN_NAMESPACE: "keptn-test"
      KEPTN_SERVICE_TYPE: ${{ matrix.KEPTN_SERVICE_TYPE }}
      RUN_CONTINUOUS_DELIVERY_TEST: ${{ matrix.RUN_CONTINUOUS_DELIVERY_TEST }}
      RUN_AIRGAPPED_TEST: ${{ matrix.RUN_AIRGAPPED_TEST }}
      REMOTE_EXECUTION_PLANE: ${{ matrix.REMOTE_EXECUTION_PLANE }}
      RUN_QUALITY_GATES_TEST: ${{ matrix.RUN_QUALITY_GATES_TEST }}
      KEPTN_EXAMPLES_BRANCH: ${{ github.event.inputs.examples_branch }}
      COLLECT_RESOURCE_LIMITS: ${{ matrix.COLLECT_RESOURCE_LIMITS }}
      GO_VERSION: ^1.16
    outputs:
      BRANCH: ${{ steps.determine_branch.outputs.BRANCH }}
      ARTIFACT_RUN_ID: ${{ steps.last_run_id.outputs.RUN_ID }}
    steps:

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Check out code.
        uses: actions/checkout@v2.3.4

      - name: Create downloads folder
        run: mkdir ~/downloads

      - name: Cache downloads paths
        uses: actions/cache@v2.1.6
        with:
          path: |
            ~/downloads
          key: ${{ runner.os }}-${{ matrix.CLOUD_PROVIDER }}-downloads

      # This step is supposed to determine the target branch where to download the build-artifacts from
      - name: Determine Target Branch for Integration Tests
        id: determine_branch
        run: |
          if [[ "${{ github.event.inputs.branch }}" != "" ]]; then
            # branch was manually set by user -> probably a workflow_dispatch action
            BRANCH=${{ github.event.inputs.branch }}
            echo "Using $BRANCH as target branch for integration tests"
          else
            echo "Determining branch based on what triggered this workflow"

            if [[ "${GITHUB_REF}" == "refs/heads"* ]]; then
              echo "This is a push to a local branch -> using branch name"
              BRANCH=${GITHUB_REF#refs/heads/}
              echo "Branch Name: $BRANCH"
            else
              if [[ "${GITHUB_REF}" == "refs/pull/"* ]]; then
                # usually the format for PRs is: refs/pull/1234/merge
                echo "::error::This is a Pull Request, and PRs are not supported yet"
                exit 1
              else
                echo "::error This is neither a push, nor a PR, probably something else... Exiting"
                exit 1
              fi
            fi
          fi

          echo "##[set-output name=BRANCH;]$(echo ${BRANCH})"

      - name: Find latest successful run ID
        id: last_run_id
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_SLUG: "keptn/keptn"
          BRANCH: ${{ steps.determine_branch.outputs.BRANCH }}
        run: |
          RUN_ID=$(curl -sLH 'Accept: application/vnd.github.v3+json' -H "Authorization: token $GITHUB_TOKEN" "api.github.com/repos/$REPO_SLUG/actions/workflows/CI.yml/runs" | jq --arg branch "$BRANCH" -c '[.workflow_runs[] | select( .conclusion == "success" and .head_branch == $branch)][0] | .id')
          echo "::set-output name=RUN_ID::$RUN_ID"

      # download artifacts from the specified branch with event type push (e.g., push to master/release branch)
      - name: Download all artifacts from last successful build of specified branch
        uses: dawidd6/action-download-artifact@v2.14.0
        id: download_artifacts_push
        with:
          # Download last successful artifact from a CI build
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: CI.yml
          run_id: ${{ steps.last_run_id.outputs.RUN_ID }}
          # directory where to extract artifacts to
          path: ./dist

  #######################################################################
  # This job publishes a draft release based on the previous steps      #
  #######################################################################
  publish-draft-release:
    name: Publish Draft release
    needs: integration-test
    if: always() # always run, regardless of the outcome of the last job
    runs-on: ubuntu-20.04
    env:
      BRANCH: ${{ needs.integration-test.outputs.BRANCH }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2.3.4

      - name: Debug - Output Branch
        run: echo $BRANCH

      - name: Download test reports
        uses: actions/download-artifact@v2
        with:
          name: test-report

      - name: Print Test Report
        id: print_test_report
        run: |
          echo "Integration Tests have finished." > final-test-report.txt
          echo "" >> final-test-report.txt
          # please check with output in write_test_report task roughly 50 lines above
          echo "| Target Platform        |  Keptn Install    |  Keptn Auth  | Airgapped Images | Linking Stages   | Uniform Registration   | Log Ingestion   | Log Forwarding   | Sequence States   | Sequence Timeout   | Sequence Queue   | Sequence Loop |  QG Standalone  |  QG Backwards Compat. | Self Healing  |  Del-Assist  |  User-Man. Depl.  | Cont Deliv | Cont Deliv (Remote Exec) | Manage secrets | Bridge E2E |" >> final-test-report.txt
          echo "| ---------------------- | ----------------- | ------------ | ---------------- | ---------------- | ---------------------- | --------------- | ---------------- | ----------------- | ------------------ | ---------------- | ------------- | --------------- | ----------------------|-------------- | ------------ | ----------------- |----------- | ------------------------ | -------------- | ---------- |" >> final-test-report.txt
          cat test-report*.txt >> final-test-report.txt

          # print test report
          REPORT=$(cat final-test-report.txt)
          echo $REPORT

      - name: Upload final test report as an artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-report
          path: final-test-report.txt

      - name: Summarize Resource Usage
        id: print_resource_usage
        run: |
          echo "**Resource Limits**" > final-resource-limits.txt
          ls -la test-resource-limits*.txt
          cat test-resource-limits*.txt >> final-resource-limits.txt || echo "No resource reports found" >> final-resource-limits.txt
          # Todo: some calculations should be done...

      - name: Download all artifacts from last successful build of specified branch
        uses: dawidd6/action-download-artifact@v2.14.0
        with:
          # Download last successful artifact from a CI build
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: CI.yml
          run_id: ${{ needs.integration-test.outputs.ARTIFACT_RUN_ID }}
          # directory where to extract artifacts to
          path: ./dist

      - name: Load Build-Config Environment from ./dist/build-config/build-config.env
        id: load_build_env
        uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: ./dist/build-config/build-config.env

      - name: Overwrite VERSION String for nightly builds
        if: env.BRANCH == 'master'
        run: |
          # use VERSION.DATETIME for the cli version (e.g., nightly build)
          VERSION=${VERSION}.${DATETIME}
          # overwrite VERSION
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: DEBUG Build-Config
        run: |
          echo VERSION=${VERSION}
          echo BRANCH=${BRANCH}

      - name: Formulate bug issue on errors
        id: formulate_bug_issue
        run: |
          REPORT=$(cat final-test-report.txt)

          if [[ "$REPORT" == *"failure"* ]]; then
            echo "INTEGRATION TESTS FAILED! - Creating GH issue description now..."

            # create a markdown file that contains details about the error
            echo "---" > integration-tests-failed.md
            echo "title: Integration tests failed" >> integration-tests-failed.md
            echo "labels: type:critical" >> integration-tests-failed.md
            echo "---" >> integration-tests-failed.md
            echo "" >> integration-tests-failed.md
            echo "* Link to run: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> integration-tests-failed.md

            if [[ $GITHUB_EVENT_NAME == 'schedule' ]]; then
              echo "* Triggered by: Scheduled build" >> integration-tests-failed.md
            else
              echo "* Triggered by: @$GITHUB_ACTOR" >> integration-tests-failed.md
            fi

            echo "* Branch: $BRANCH" >> integration-tests-failed.md
            echo "* Version: $VERSION" >> integration-tests-failed.md
            echo "* Datetime: $DATETIME" >> integration-tests-failed.md
            echo "* Commit: $GIT_SHA" >> integration-tests-failed.md
            echo "" >> integration-tests-failed.md

            # print report but make failures bold
            echo "${REPORT//failure/:x: **failure**}" >> integration-tests-failed.md

            echo "" >> integration-tests-failed.md
            echo "Note: This issue was auto-generated from [integration_tests.yml](.github/workflows/integration_tests.yml)" >> integration-tests-failed.md

            echo "##[set-output name=INTEGRATION_TESTS_FAILED;]true"
          else
            echo "Integration tests passed, moving on..."
          fi

      - name: Create issue if tests failed
        if: always() && github.event_name == 'schedule' && steps.formulate_bug_issue.outputs.INTEGRATION_TESTS_FAILED == 'true'
        uses: JasonEtco/create-an-issue@v2.5.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          filename: integration-tests-failed.md

      - name: Find PR number for current build
        id: find_pr_for_build
        if: always()
        uses: jwalton/gh-find-current-pr@v1.1.0

      - name: Create PR comment if tests failed
        # Only run if not on master branch and we have a PR number
        # Also, only run in original repo and not on forks since the github token secret is not accessible in that case
        if: always() && github.event.inputs.branch != 'master' && steps.find_pr_for_build.outputs.number && steps.formulate_bug_issue.outputs.INTEGRATION_TESTS_FAILED == 'true' && github.event.pull_request.head.repo.full_name == github.repository
        uses: marocchino/sticky-pull-request-comment@v2.1.0
        with:
          path: integration-tests-failed.md
          recreate: true
          number: ${{ steps.find_pr_for_build.outputs.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      # Part of this job is to check if a releasenotes file exists and to use it as the release message
      - name: Try getting release notes
        id: get_releasenotes
        run: |
          filename="releasenotes/releasenotes_V${VERSION}.md"
          if [[ -f "$filename" ]]; then
            echo "Found releasenotes in $filename"
          else
            echo "::warning Could not find release notes $filename, using releasenotes_develop"
            filename="releasenotes/releasenotes_develop.md"
          fi

          echo "##[set-output name=RELEASENOTES_FILENAME;]$(echo ${filename})"

      # Create release message by concatenating releasenotes with the test/build report
      - name: Create a Release message
        env:
          RELEASENOTES_FILENAME: ${{ steps.get_releasenotes.outputs.RELEASENOTES_FILENAME }}
          RESOURCE_LIMITS_FILENAME: "final-resource-limits.txt"
        run: |
          # print release notes
          cat $RELEASENOTES_FILENAME > release-notes.txt
          # print CI information
          echo ""  >> release-notes.txt
          echo "<details><summary>CI Information</summary>"  >> release-notes.txt
          echo "<p>" >> release-notes.txt
          echo "" >> release-notes.txt
          echo "* **BUILD ${VERSION} ON ${BRANCH}**" >> release-notes.txt
          echo "* **DATETIME**: $DATETIME" >> release-notes.txt
          echo "* **GIT_SHA**: $GIT_SHA" >> release-notes.txt
          echo "* **ACTION RUN**: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> release-notes.txt
          echo "" >> release-notes.txt
          echo "**Integration Tests**" >> release-notes.txt
          cat final-test-report.txt >> release-notes.txt
          echo "" >> release-notes.txt
          echo "</p>" >> release-notes.txt
          echo "</details>" >> release-notes.txt
          echo "" >> release-notes.txt
          # print final-resource-limits.txt
          echo "<details><summary>Kubernetes Resource Data</summary>" >> release-notes.txt
          echo "<p>" >> release-notes.txt
          echo ""  >> release-notes.txt
          cat $RESOURCE_LIMITS_FILENAME >> release-notes.txt
          echo "</p>" >> release-notes.txt
          echo "</details>" >> release-notes.txt

      - name: Abort if (published) release already exists
        uses: actions/github-script@v4.0.2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            let tag = "${{ env.VERSION }}";
            console.log(`Trying to fetch release by tag '${tag}'...`);

            try {
              release = await github.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag
              });
              console.log("::error Release already exists... Aborting!");
              core.setFailed("Release already exists... Aborting!");

              return 1; // failure
            } catch (error) {
              // release not found -> okay
              console.log("No release found -> okay");
              return 0;
            }

      - name: Delete draft release if it already exists
        uses: actions/github-script@v4.0.2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            let tag = "${{ env.VERSION }}";
            console.log(`Trying to fetch DRAFT release by tag '${tag}'...`);

            try {
              // get all releases (including drafts)
              let releases = await github.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              // find a draft release
              let release = releases.data.find(release => release.tag_name === tag);
              if (release) {
                // found a release with specified tag; check if it is a draft release
                if (release.draft) {
                  // found a draft release
                  console.log(`🥳 Found a draft release with id ${release.id}, deleting it`);
                  console.log(`Release Tag Name: ${release.tag_name}`);
                  console.log(`Release Draft: ${release.draft}`);
                  console.log(`Release URL: ${release.html_url}`);

                  console.log(`::error::Draft release found, please delete it manually!`);

                  return 1;
                  // ToDo: Commented out as there seems to be a problem with deleting releases

                  /*github.repos.deleteRelease({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: release.id
                  });*/

                  console.log("Deleted! -> okay");
                } else {
                  console.log("::error Release with tag found, but it's not a draft release");
                  core.setFailed("Release with tag found, but it's not a draft release");
                }
              } else {
                console.log("No draft release found -> okay");
              }

              return 0;
            } catch (error) {
              // error happened
              console.log("An error happened while trying to fetch all releases:");
              console.log(error);
              throw error;
            }

      - name: Draft Release with Releasenotes
        id: create_draft_release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.VERSION }}
          tag_name: ${{ env.VERSION }}
          draft: true       # we only want to publish draft releases here - a human should review it and push the button eventually
          prerelease: true  # mark as pre-release for now, a human can always change it to a non-prerelease afterwards
          body_path: release-notes.txt
          files: |
            dist/keptn-cli/keptn-*.tar.gz
            dist/keptn-installer/*.tgz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Helm Charts to Google Cloud
        id: upload_helm_charts
        env:
          GCLOUD_SERVICE_KEY: ${{ secrets.GCLOUD_SERVICE_KEY }}
          GCLOUD_PROJECT_NAME: ${{ secrets.GCLOUD_PROJECT_NAME }}
          CLOUDSDK_COMPUTE_ZONE: "us-east1-b"
          CLOUDSDK_REGION: "us-east1"
        run: |
          if [[ "$BRANCH" == "release-"* ]]; then
            echo "Installing gcloud CLI"
            export OS_TYPE="linux"
            mkdir ~/downloads
            ./test/utils/download_and_install_gcloud.sh
            echo ${GCLOUD_SERVICE_KEY} | base64 --decode > ~/gcloud-service-key.json
            gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
            gh-actions-scripts/upload_helm_chart_to_google_cloud.sh dist/keptn-installer/
          fi

  #######################################################################
  # This job deploys Keptn with Keptn                                   #
  #######################################################################
  deploy_keptn_with_keptn:
    name: Deploy Keptn with Keptn
    needs: integration-test
#    if: github.event_name == 'schedule'
    runs-on: ubuntu-20.04
    env:
      BRANCH: ${{ needs.integration-test.outputs.BRANCH }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0 # need to checkout "all commits" for certain features to work (e.g., get all changed files)
          submodules: 'true'

      - name: Download all artifacts from last successful build of specified branch
        uses: dawidd6/action-download-artifact@v2.14.0
        with:
          # Download last successful artifact from a CI build
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: CI.yml
          run_id: ${{ needs.integration-test.outputs.ARTIFACT_RUN_ID }}
          # directory where to extract artifacts to
          path: ./dist

      - name: Install Keptn CLI for META_KEPTN
        id: install_keptn_cli
        run: |
          curl -sL https://get.keptn.sh | KEPTN_VERSION=${{ env.META_KEPTN_VERSION }} bash

      - name: Authenticate Keptn CLI
        id: authenticate_keptn_cli
        run: |
          keptn set config KubeContextCheck false
          keptn auth --endpoint=${{ secrets.META_KEPTN_API_URL }} --api-token=${{ secrets.META_KEPTN_API_TOKEN }}

      - name: Deploy Keptn with Keptn
        id: deploy_keptn_with_keptn
        run: |
          KEPTN_HELM_CHART_FILENAME=$(ls dist/keptn-installer/keptn*.tgz | head -1)
          KEPTN_INGRESS_TEMPLATE_FILENAME=test/assets/keptn-on-keptn/ingress.yaml
          ENDPOINTS_TEMPLATE_BASE_PATH=test/assets/keptn-on-keptn
          HELM_SERVICE_HELM_CHART_FILENAME=$(ls dist/keptn-installer/helm-service*.tgz | head -1)
          JMETER_SERVICE_HELM_CHART_FILENAME=$(ls dist/keptn-installer/jmeter-service*.tgz | head -1)

          echo "Adding resources to meta keptn..."

          keptn add-resource --project=${{ env.META_KEPTN_KEPTN_PROJECT }} --service=keptn --all-stages --resource=${KEPTN_HELM_CHART_FILENAME} --resourceUri=helm/keptn.tgz
          keptn add-resource --project=${{ env.META_KEPTN_KEPTN_PROJECT }} --service=helm-service --all-stages --resource=${HELM_SERVICE_HELM_CHART_FILENAME} --resourceUri=helm/helm-service.tgz
          keptn add-resource --project=${{ env.META_KEPTN_KEPTN_PROJECT }} --service=jmeter-service --all-stages --resource=${JMETER_SERVICE_HELM_CHART_FILENAME} --resourceUri=helm/jmeter-service.tgz

          echo "Adding ingresses and endpoints to all keptn-on-keptn stages..."

          stages=('dev' 'hardening' 'production')
          services=('keptn' 'helm-service' 'jmeter-service')
          for SERVICE in "${services[@]}"; do
            for STAGE in "${stages[@]}"; do
              export SERVICE
              export STAGE
              envsubst < ${ENDPOINTS_TEMPLATE_BASE_PATH}/endpoints-${SERVICE}.yaml > ${ENDPOINTS_TEMPLATE_BASE_PATH}/endpoints-${SERVICE}-${STAGE}.yaml
              keptn add-resource \
                --project=${{ env.META_KEPTN_KEPTN_PROJECT }} \
                --service=${SERVICE} \
                --stage=${STAGE} \
                --resource=${ENDPOINTS_TEMPLATE_BASE_PATH}/endpoints-${SERVICE}-${STAGE}.yaml \
                --resourceUri=helm/endpoints.yaml
            done
          done

          for STAGE in "${stages[@]}"; do
            export STAGE
            envsubst < ${KEPTN_INGRESS_TEMPLATE_FILENAME} > ${ENDPOINTS_TEMPLATE_BASE_PATH}/ingress-${STAGE}.yaml
            keptn add-resource \
              --project=${{ env.META_KEPTN_KEPTN_PROJECT }} \
              --service=keptn \
              --stage=${STAGE} \
              --resource=${ENDPOINTS_TEMPLATE_BASE_PATH}/ingress-${STAGE}.yaml \
              --resourceUri=helm/keptn/templates/ingress.yaml
          done

  #######################################################################
  # This job triggers service deliveries and wait for them to pass      #
  #######################################################################
  trigger_keptn_delivery:
    name: Trigger Service Delivery
    needs: deploy_keptn_with_keptn
#    if: github.event_name == 'schedule'
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - SERVICE_NAME: keptn
          - SERVICE_NAME: jmeter-service
          - SERVICE_NAME: helm-service
    env:
      SERVICE_NAME: ${{ matrix.SERVICE_NAME }}
      KEPTN_ARCHIVE_PATH: ~/downloads/keptn-archive.tar.gz
    steps:
      - name: Create downloads folder
        run: mkdir ~/downloads

      - name: Cache Keptn CLI
        id: keptn-cli-cache
        uses: actions/cache@v2
        with:
          path: ~/downloads
          key: ${{ env.META_KEPTN_VERSION }}-cli

      - name: Download Keptn CLI for META_KEPTN
        id: download_keptn_cli
        if: steps.keptn-cli-cache.outputs.cache-hit != 'true'
        run: curl -sL https://github.com/keptn/keptn/releases/download/${META_KEPTN_VERSION}/keptn-${META_KEPTN_VERSION}-linux-amd64.tar.gz -o ${{ env.KEPTN_ARCHIVE_PATH }}

      - name: Install Keptn CLI for META_KEPTN
        id: install_keptn_cli
        run: |
          tar -xvf ${{ env.KEPTN_ARCHIVE_PATH }}
          chmod +x ./keptn-${META_KEPTN_VERSION}-linux-amd64
          sudo mv ./keptn-${META_KEPTN_VERSION}-linux-amd64 /usr/local/bin/keptn

      - name: Authenticate Keptn CLI
        id: authenticate_keptn_cli
        run: |
          keptn set config KubeContextCheck false
          keptn auth --endpoint=${{ secrets.META_KEPTN_API_URL }} --api-token=${{ secrets.META_KEPTN_API_TOKEN }}

      - name: Trigger Service Delivery
        id: trigger-service-delivery
        uses: keptn/gh-action-send-event@main
        with:
          keptnApiUrl: ${{ secrets.META_KEPTN_API_URL }}/v1/event
          keptnApiToken: ${{ secrets.META_KEPTN_API_TOKEN }}
          event: |
            {
              "data": {
                "message": "",
                "project": "${{ env.META_KEPTN_KEPTN_PROJECT }}",
                "result": "",
                "service": "${{ env.SERVICE_NAME }}",
                "stage": "dev",
                "status": "",
                "labels": {
                  "github-action-run": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "artifact-version": "${{ env.VERSION }}"
                }
              },
              "source": "gh",
              "specversion": "1.0",
              "type": "sh.keptn.event.dev.delivery.triggered",
              "shkeptnspecversion": "0.2.1"
            }

      - name: Check if keptn on keptn delivery passed
        id: check-service-delivery
        timeout-minutes: 5
        env:
          KEPTN_CONTEXT: ${{ steps.trigger-service-delivery.outputs.keptnContext }}
        run: |
          while [[ $(keptn get event sh.keptn.event.dev.delivery.finished --keptn-context "$KEPTN_CONTEXT" --project keptn | jq -r '.data.result') != pass ]];
          do
            sleep 10;
          done
