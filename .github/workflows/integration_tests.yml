name: Integration Tests
on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: '0 3 * * 1-5' # run integration tests at 3 AM, monday to friday (1-5)

  workflow_dispatch: # run integration tests only when triggered manually
    inputs:
      branch:
        description: 'Take CI build artifacts from branch (e.g., master, release-x.y.z)'
        required: true
        default: 'master'
      artifacts_ci_event_type:
        description: 'Event Type for CI artifacts (e.g., push, pull_request, workflow_dispatch)'
        required: true
        default: 'push'
      examples_branch:
        description: 'Branch of Keptn examples to use for integration tests (e.g., master, release-x.y.z)'
        required: true
        default: 'master'
env:
  META_KEPTN_VERSION: 0.8.4
  META_KEPTN_KEPTN_PROJECT: keptn
defaults:
  run:
    shell: bash
jobs:
  integration-test:
    name: "Tests"
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - CLOUD_PROVIDER: "minishift-on-GHA"
            PLATFORM: "openshift"
            VERSION: "3.11"
            KEPTN_SERVICE_TYPE: "ClusterIP"
            RUN_QUALITY_GATES_TEST: "false"
            RUN_CONTINUOUS_DELIVERY_TEST: "false"
            COLLECT_RESOURCE_LIMITS: "true"
          - CLOUD_PROVIDER: "k3s-on-GHA"
            VERSION: "v1.16.15+k3s1" # see https://github.com/rancher/k3s/releases
            KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
            PLATFORM: "kubernetes"
            KEPTN_SERVICE_TYPE: "NodePort"
            RUN_QUALITY_GATES_TEST: "true"
            RUN_CONTINUOUS_DELIVERY_TEST: "false"
            COLLECT_RESOURCE_LIMITS: "false"
          - CLOUD_PROVIDER: "k3s-on-GHA"
            VERSION: "v1.21.1+k3s1" # see https://github.com/rancher/k3s/releases
            KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
            PLATFORM: "kubernetes"
            KEPTN_SERVICE_TYPE: "NodePort"
            RUN_QUALITY_GATES_TEST: "true"
            RUN_CONTINUOUS_DELIVERY_TEST: "false"
            COLLECT_RESOURCE_LIMITS: "false"
          - CLOUD_PROVIDER: "GKE"
            VERSION: "1.17"
            KUBECONFIG: ""
            PLATFORM: "kubernetes"
            KEPTN_SERVICE_TYPE: "LoadBalancer"
            RUN_QUALITY_GATES_TEST: "true"
            RUN_CONTINUOUS_DELIVERY_TEST: "true"
            REMOTE_EXECUTION_PLANE: "true"
            COLLECT_RESOURCE_LIMITS: "false"
          - CLOUD_PROVIDER: "GKE"
            VERSION: "1.19"
            KUBECONFIG: ""
            PLATFORM: "kubernetes"
            KEPTN_SERVICE_TYPE: "LoadBalancer"
            RUN_QUALITY_GATES_TEST: "true"
            RUN_CONTINUOUS_DELIVERY_TEST: "true"
            REMOTE_EXECUTION_PLANE: "false"
            COLLECT_RESOURCE_LIMITS: "true"
    env:
      CLOUD_PROVIDER: ${{ matrix.CLOUD_PROVIDER }}
      PLATFORM: ${{ matrix.PLATFORM }}
      VERSION: ${{ matrix.VERSION }}
      KUBECONFIG: ${{ matrix.KUBECONFIG }}
      KEPTN_NAMESPACE: "keptn-test"
      KEPTN_SERVICE_TYPE: ${{ matrix.KEPTN_SERVICE_TYPE }}
      RUN_CONTINUOUS_DELIVERY_TEST: ${{ matrix.RUN_CONTINUOUS_DELIVERY_TEST }}
      REMOTE_EXECUTION_PLANE: ${{ matrix.REMOTE_EXECUTION_PLANE }}
      RUN_QUALITY_GATES_TEST: ${{ matrix.RUN_QUALITY_GATES_TEST }}
      KEPTN_EXAMPLES_BRANCH: ${{ github.event.inputs.examples_branch }}
      COLLECT_RESOURCE_LIMITS: ${{ matrix.COLLECT_RESOURCE_LIMITS }}
    outputs:
      BRANCH: ${{ steps.determine_branch.outputs.BRANCH }}
      ARTIFACTS_CI_EVENT_TYPE: ${{ github.event.inputs.artifacts_ci_event_type }}
    steps:
      - name: Check out code.
        uses: actions/checkout@v2.3.4

      - name: Create downloads folder
        run: mkdir ~/downloads

      - name: Cache downloads paths
        uses: actions/cache@v2.1.6
        with:
          path: |
            ~/downloads
          key: ${{ runner.os }}-${{ matrix.CLOUD_PROVIDER }}-downloads

      # This step is supposed to determine the target branch where to download the build-artifacts from
      - name: Determine Target Branch for Integration Tests
        id: determine_branch
        run: |
          if [[ "${{ github.event.inputs.branch }}" != "" ]]; then
            # branch was manually set by user -> probably a workflow_dispatch action
            BRANCH=${{ github.event.inputs.branch }}
            echo "Using $BRANCH as target branch for integration tests"
          else
            echo "Determining branch based on what triggered this workflow"

            if [[ "${GITHUB_REF}" == "refs/heads"* ]]; then
              echo "This is a push to a local branch -> using branch name"
              BRANCH=${GITHUB_REF#refs/heads/}
              echo "Branch Name: $BRANCH"
            else
              if [[ "${GITHUB_REF}" == "refs/pull/"* ]]; then
                # usually the format for PRs is: refs/pull/1234/merge
                echo "::error::This is a Pull Request, and PRs are not supported yet"
                exit 1
              else
                echo "::error This is neither a push, nor a PR, probably something else... Exiting"
                exit 1
              fi
            fi
          fi

          echo "##[set-output name=BRANCH;]$(echo ${BRANCH})"

  #######################################################################
  # This job deploys Keptn with Keptn                                   #
  #######################################################################
  deploy_keptn_with_keptn:
    name: Deploy Keptn with Keptn
    needs: integration-test
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-20.04
    env:
      BRANCH: ${{ needs.integration-test.outputs.BRANCH }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0 # need to checkout "all commits" for certain features to work (e.g., get all changed files)
          submodules: 'true'

      - name: Load CI Environment from .ci_env
        id: load_ci_env
        uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: .ci_env
      - name: Download all artifacts from last successful build of specified branch
        uses: dawidd6/action-download-artifact@v2.14.0
        with:
          # Download last successful artifact from a CI build
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: CI.yml
          event: ${{ github.event.inputs.artifacts_ci_event_type }} # e.g., push, pull_request
          workflow_conclusion: success
          # use the following branch
          branch: ${{ env.BRANCH}}
          # directory where to extract artifacts to
          path: ./dist

      - name: Install Keptn CLI for META_KEPTN
        id: install_keptn_cli
        run: |
          curl -sL https://get.keptn.sh | KEPTN_VERSION=${{ env.META_KEPTN_VERSION }} bash

      - name: Authenticate Keptn CLI
        id: authenticate_keptn_cli
        run: |
          keptn auth --endpoint=${{ secrets.META_KEPTN_API_URL }} --api-token=${{ secrets.META_KEPTN_API_TOKEN }}

      - name: Deploy Keptn with Keptn
        id: deploy_keptn_with_keptn
        run: |
          KEPTN_HELM_CHART_FILENAME=$(ls dist/keptn-installer/keptn*.tgz | head -1)
          KEPTN_INGRESS_TEMPLATE_FILENAME=test/assets/keptn-on-keptn/ingress.yaml
          ENDPOINTS_TEMPLATE_BASE_PATH=test/assets/keptn-on-keptn
          HELM_SERVICE_HELM_CHART_FILENAME=$(ls dist/keptn-installer/helm-service*.tgz | head -1)
          JMETER_SERVICE_HELM_CHART_FILENAME=$(ls dist/keptn-installer/jmeter-service*.tgz | head -1)

          keptn add-resource --project=${{ env.META_KEPTN_KEPTN_PROJECT }} --service=keptn --all-stages --resource=${KEPTN_HELM_CHART_FILENAME} --resourceUri=helm/keptn.tgz
          keptn add-resource --project=${{ env.META_KEPTN_KEPTN_PROJECT }} --service=helm-service --all-stages --resource=${HELM_SERVICE_HELM_CHART_FILENAME} --resourceUri=helm/helm-service.tgz
          keptn add-resource --project=${{ env.META_KEPTN_KEPTN_PROJECT }} --service=jmeter-service --all-stages --resource=${JMETER_SERVICE_HELM_CHART_FILENAME} --resourceUri=helm/jmeter-service.tgz

          stages=('dev' 'hardening' 'production')
          services=('keptn' 'helm-service' 'jmeter-service')
          for SERVICE in "${services[@]}"
          do
            for STAGE in "${stages[@]}"
            do
              export SERVICE
              export STAGE
              envsubst < ${ENDPOINTS_TEMPLATE_BASE_PATH}/endpoints-${SERVICE}.yaml > ${ENDPOINTS_TEMPLATE_BASE_PATH}/endpoints-${SERVICE}-${STAGE}.yaml
              keptn add-resource \
                --project=${{ env.META_KEPTN_KEPTN_PROJECT }} \
                --service=${SERVICE} \
                --stage=${STAGE} \
                --resource=${ENDPOINTS_TEMPLATE_BASE_PATH}/endpoints-${SERVICE}-${STAGE}.yaml \
                --resourceUri=helm/endpoints.yaml
            done
          done

          for STAGE in "${stages[@]}"
          do
            export STAGE
            envsubst < ${KEPTN_INGRESS_TEMPLATE_FILENAME} > ${ENDPOINTS_TEMPLATE_BASE_PATH}/ingress-${STAGE}.yaml
            keptn add-resource \
              --project=${{ env.META_KEPTN_KEPTN_PROJECT }} \
              --service=keptn \
              --stage=${STAGE} \
              --resource=${ENDPOINTS_TEMPLATE_BASE_PATH}/ingress-${STAGE}.yaml \
              --resourceUri=helm/keptn/templates/ingress.yaml
          done

  #######################################################################
  # This job triggers service deliveries and wait for them to pass      #
  #######################################################################
  trigger_keptn_delivery:
    name: Trigger Service Delivery
    needs: deploy_keptn_with_keptn
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - SERVICE_NAME: keptn
          - SERVICE_NAME: jmeter-service
          - SERVICE_NAME: helm-service
    env:
      SERVICE_NAME: ${{ matrix.SERVICE_NAME }}
      KEPTN_ARCHIVE_PATH: ~/downloads/keptn-archive.tar.gz
    steps:
      - name: Create downloads folder
        run: mkdir ~/downloads

      - name: Cache Keptn CLI
        id: keptn-cli-cache
        uses: actions/cache@v2
        with:
          path: ~/downloads
          key: ${{ env.META_KEPTN_VERSION }}

      - name: Download Keptn CLI for META_KEPTN
        id: download_keptn_cli
        if: steps.keptn-cli-cache.outputs.cache-hit != 'true'
        run: |
          curl -sL https://github.com/keptn/keptn/releases/download/${META_KEPTN_VERSION}/keptn-${META_KEPTN_VERSION}-linux-amd64.tar.gz -o ${{ env.KEPTN_ARCHIVE_PATH }}
          tar -xvf ${{ env.KEPTN_ARCHIVE_PATH }}
          mv ./keptn-${META_KEPTN_VERSION}-linux-amd64 keptn
          chmod +x keptn
          mv ./keptn /usr/local/bin/keptn

      - name: Install Keptn CLI for META_KEPTN
        id: install_keptn_cli
        run: KEPTN_VERSION=${{ env.META_KEPTN_VERSION }} bash ${{ env.KEPTN_INSTALLER_PATH }}

      - name: Authenticate Keptn CLI
        id: authenticate_keptn_cli
        run: |
          keptn auth --endpoint=${{ secrets.META_KEPTN_API_URL }} --api-token=${{ secrets.META_KEPTN_API_TOKEN }}
      - name: Trigger Service Delivery
        id: trigger-service-delivery
        uses: keptn/gh-action-send-event@main
        with:
          keptnApiUrl: ${{ secrets.META_KEPTN_API_URL }}/v1/event
          keptnApiToken: ${{ secrets.META_KEPTN_API_TOKEN }}
          event: |
            {
              "data": {
                "message": "",
                "project": "${{ env.META_KEPTN_KEPTN_PROJECT }}",
                "result": "",
                "service": "${{ env.SERVICE_NAME }}",
                "stage": "dev",
                "status": "",
                "labels": {
                  "github-action-run": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                }
              },
              "source": "gh",
              "specversion": "1.0",
              "type": "sh.keptn.event.dev.delivery.triggered",
              "shkeptnspecversion": "0.2.1"
            }

      - name: Check if keptn on keptn delivery passed
        id: check-service-delivery
        timeout-minutes: 5
        run: |
          while [[ $(keptn get event sh.keptn.event.dev.delivery.finished --keptn-context $KEPTN_CONTEXT --project keptn | jq -r '.data.result' 2>/dev/null) != pass ]];
          do
            sleep 10;
          done
        env:
          KEPTN_CONTEXT: ${{ steps.trigger-service-delivery.outputs.keptnContext }}
