name: Integration Tests
on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 3 * * 1-5' # run integration tests at 3 AM, monday to friday (1-5)

  workflow_dispatch: # run integration tests only when triggered manually
    inputs:
      branch:
        description: 'Branch for integration tests (e.g., master, release-x.y.z)'
        required: true
        default: 'master'
      examples_branch:
        description: 'Branch of Keptn examples to use for integration tests (e.g., master, release-x.y.z)'
        required: true
        default: 'master'
defaults:
  run:
    shell: bash
jobs:
  integration-test:
    name: "Tests"
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - CLOUD_PROVIDER: "minishift-on-GHA"
            PLATFORM: "openshift"
            VERSION: "3.11"
            KEPTN_SERVICE_TYPE: "ClusterIP"
            RUN_CONTINUOUS_DELIVERY_TEST: "false"
          - CLOUD_PROVIDER: "k3s-on-GHA"
            VERSION: "v1.16.15+k3s1" # see https://github.com/rancher/k3s/releases
            KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
            PLATFORM: "kubernetes"
            KEPTN_SERVICE_TYPE: "NodePort"
            RUN_CONTINUOUS_DELIVERY_TEST: "false"
          - CLOUD_PROVIDER: "k3s-on-GHA"
            VERSION: "v1.19.5+k3s1" # see https://github.com/rancher/k3s/releases
            KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
            PLATFORM: "kubernetes"
            KEPTN_SERVICE_TYPE: "NodePort"
            RUN_CONTINUOUS_DELIVERY_TEST: "false"
          - CLOUD_PROVIDER: "GKE"
            VERSION: "1.15"
            KUBECONFIG: ""
            PLATFORM: "kubernetes"
            KEPTN_SERVICE_TYPE: "LoadBalancer"
            RUN_CONTINUOUS_DELIVERY_TEST: "true"
          - CLOUD_PROVIDER: "GKE"
            VERSION: "1.17"
            KUBECONFIG: ""
            PLATFORM: "kubernetes"
            KEPTN_SERVICE_TYPE: "LoadBalancer"
            RUN_CONTINUOUS_DELIVERY_TEST: "true"
    env:
      CLOUD_PROVIDER: ${{ matrix.CLOUD_PROVIDER }}
      PLATFORM: ${{ matrix.PLATFORM }}
      VERSION: ${{ matrix.VERSION }}
      KUBECONFIG: ${{ matrix.KUBECONFIG }}
      KEPTN_NAMESPACE: "keptn-test"
      KEPTN_SERVICE_TYPE: ${{ matrix.KEPTN_SERVICE_TYPE }}
      RUN_CONTINUOUS_DELIVERY_TEST: ${{ matrix.RUN_CONTINUOUS_DELIVERY_TEST }}
      KEPTN_EXAMPLES_BRANCH: ${{ github.event.inputs.examples_branch }}
    steps:
      - name: Check out code.
        uses: actions/checkout@v2

      - name: Determine Target Branch for Integration Tests
        id: determine_branch
        run: |
          if [[ "${{ github.event.inputs.branch }}" != "" ]]; then
            BRANCH=${{ github.event.inputs.branch }}
            echo "Using $BRANCH as target branch for integration tests"
          else
            echo "Determining branch based on what triggered this workflow"

            if [[ "${GITHUB_REF}" == "refs/heads"* ]]; then
              echo "This is a push to a local branch -> using branch name"
              BRANCH=${GITHUB_REF#refs/heads/}
              echo "Branch Name: $BRANCH"
            else
              if [[ "${GITHUB_REF}" == "refs/pull/"* ]]; then
                # usually the format for PRs is: refs/pull/1234/merge
                echo "::error::This is a Pull Request, and PRs are not supported yet"
                exit 1
              else
                echo "::error This is neither a push, nor a PR, probably something else... Exiting"
                exit 1
              fi
            fi
          fi

          echo "##[set-output name=BRANCH;]$(echo ${BRANCH})"

      # setup cloud provider kubernetes instance
      - name: Install and start Minishift
        if: env.CLOUD_PROVIDER == 'minishift-on-GHA'
        run: |
          test/utils/download_and_install_oc_cli.sh
          test/utils/minishift_create_cluster.sh
      - name: Install and start K3s
        if: env.CLOUD_PROVIDER == 'k3s-on-GHA'
        env:
          K3S_VERSION: ${{ matrix.VERSION }}
        run: test/utils/k3s_create_cluster.sh
      - name: Install and start GKE cluster
        if: env.CLOUD_PROVIDER == 'GKE'
        env:
          GKE_VERSION: ${{ matrix.VERSION }}
          GCLOUD_SERVICE_KEY: ${{ secrets.GCLOUD_SERVICE_KEY }}
          GCLOUD_PROJECT_NAME: ${{ secrets.GCLOUD_PROJECT_NAME }}
          CLOUDSDK_COMPUTE_ZONE: "us-central1-a"
          CLOUDSDK_REGION: "us-central1"
        id: install_gke
        run: |
          CLUSTER_NAME_NIGHTLY=gh-nightly
          BRANCH_SLUG=master
          export CLUSTER_NAME_NIGHTLY=${CLUSTER_NAME_NIGHTLY}-${BRANCH_SLUG:0:15}-gke${GKE_VERSION//./}
          echo $CLUSTER_NAME_NIGHTLY
          echo "Installing gcloud CLI"
          export OS_TYPE="linux"
          source ./travis-scripts/install_gcloud.sh
          echo ${GCLOUD_SERVICE_KEY} | base64 --decode > ~/gcloud-service-key.json
          gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
          test/utils/gke_create_cluster.sh
          test/utils/gke_authenticate_at_cluster.sh

          echo "##[set-output name=CLUSTER_NAME_NIGHTLY;]$(echo ${CLUSTER_NAME_NIGHTLY})"
      # get some debug infos
      - name: Debug - Describe Kubernetes Nodes
        run: kubectl describe nodes
      - name: Install Istio
        if: env.CLOUD_PROVIDER != 'minishift-on-GHA' # no need to install istio on minishift
        run: test/utils/install_istio.sh

      # Print some Kubernetes Debug Output
      - name: Debug - Minishift status
        if: env.CLOUD_PROVIDER == 'minishift-on-GHA'
        run: oc status
      - name: Debug - Minishift routes
        if: env.CLOUD_PROVIDER == 'minishift-on-GHA'
        run: oc get routes --all-namespaces
      - name: Debug - Get Kubernetes namespaces
        run: kubectl get namespaces
      - name: Debug - Get Kubernetes services
        run: kubectl get services --all-namespaces
      - name: Debug - Get Kubernetes Deployments
        run: kubectl get deployments --all-namespaces -owide
      - name: Download CLI artifact from master branch
        uses: dawidd6/action-download-artifact@v2
        with:
          # Optional, GitHub token
          github_token: ${{secrets.GITHUB_TOKEN}}
          # Required, workflow file name or ID
          workflow: CI.yml
          # Optional, the status or conclusion of a completed workflow to search for
          # Can be one of a workflow conculsion::
          # "failure", "success", "neutral", "cancelled", "skipped", "timed_out", "action_required"
          # Or a workflow status:
          # "completed", "in_progress", "queued"
          # Default: "completed"
          workflow_conclusion: success
          # Optional, will use the branch
          branch: ${{ steps.determine_branch.outputs.BRANCH}}
          # Optional, directory where to extract artifact
          path: ./dist

      - name: Extract Keptn CLI artifact
        run: |
          tar -zxvf dist/keptn-cli/keptn-*-linux-amd64.tar.gz
          sudo mv keptn-*-linux-amd64 /usr/local/bin/keptn

      - name: Verify Keptn CLI works
        run: keptn version

      - name: Extract name of helm chart
        id: extract_helm_chart_name
        run: |
          ls dist/keptn-installer/*.tgz # debug output
          HELM_CHART_NAME=$(ls dist/keptn-installer/keptn*.tgz | grep -o keptn-[A-Za-z0-9.-]*.tgz)
          echo "##[set-output name=HELM_CHART_NAME;]$(echo ${HELM_CHART_NAME})"

      - name: Host helm chart via python http server
        run: cd dist/keptn-installer/ && python3 -m http.server &

      - name: Install Keptn
        id: keptn_install
        env:
          HELM_CHART_NAME: ${{ steps.extract_helm_chart_name.outputs.HELM_CHART_NAME }}
        run: |
          echo "Installing Keptn on cluster"

          if [[ $PLATFORM == "openshift" ]]; then
            echo "{
              \"openshiftUrl\": \"https://127.0.0.1:8443\",
              \"openshiftUser\": \"admin\",
              \"openshiftPassword\": \"admin\"
            }" > creds.json
          else
            echo "{}" > creds.json # empty credentials file
          fi

          # install Keptn using the develop version, which refers to the :latest docker images
          keptn install --platform=${PLATFORM} --namespace=${KEPTN_NAMESPACE} --endpoint-service-type=${KEPTN_SERVICE_TYPE} \
             --chart-repo=http://0.0.0.0:8000/${HELM_CHART_NAME} --creds=creds.json --verbose --use-case=continuous-delivery

      - name: Expose Keptn API (Minishift)
        if: env.CLOUD_PROVIDER == 'minishift-on-GHA'
        run: oc expose svc/api-gateway-nginx -n ${KEPTN_NAMESPACE} --hostname=api.${KEPTN_NAMESPACE}.127.0.0.1.nip.io

      - name: Expose Deployed Services via Istio (for CD use-case)
        if: env.RUN_CONTINUOUS_DELIVERY_TEST == 'true'
        run: |
          # install public-gateway.istio-system
          kubectl apply -f - <<EOF
          apiVersion: networking.istio.io/v1alpha3
          kind: Gateway
          metadata:
            name: public-gateway
            namespace: istio-system
          spec:
            selector:
              istio: ingressgateway # use Istio default gateway implementation
            servers:
            - port:
                number: 80
                name: http
                protocol: HTTP
              hosts:
              - "*"
          EOF

          # set ingress-hostname params
          INGRESS_IP=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "INGRESS_IP=$INGRESS_IP"
          kubectl create configmap -n ${KEPTN_NAMESPACE} ingress-config --from-literal=ingress_hostname_suffix=${INGRESS_IP}.nip.io --from-literal=ingress_port=80 --from-literal=ingress_protocol=http --from-literal=ingress_gateway=public-gateway.istio-system -oyaml --dry-run | kubectl replace -f -
          # restart helm-service
          kubectl delete pod -n ${KEPTN_NAMESPACE} -lapp.kubernetes.io/name=helm-service
          sleep 15

      # Print some Kubernetes Debug Output
      - name: Debug - Minishift status
        if: env.CLOUD_PROVIDER == 'minishift-on-GHA'
        run: oc status
      - name: Debug - Minishift routes
        if: env.CLOUD_PROVIDER == 'minishift-on-GHA'
        run: oc get routes --all-namespaces
      - name: Debug - Get Kubernetes namespaces
        run: kubectl get namespaces
      - name: Debug - Get Kubernetes services
        run: kubectl get services --all-namespaces
      - name: Debug - Get Kubernetes Deployments
        run: kubectl get deployments --all-namespaces -owide
      - name: Debug - Get Keptn Pods
        run: kubectl -n ${KEPTN_NAMESPACE} get pods

      - name: Verify Deployments of Keptn
        run: |
          source test/utils.sh
          echo "Verifying that services and namespaces have been created"

          # verify the deployments within the keptn namespace
          verify_deployment_in_namespace "api-gateway-nginx" ${KEPTN_NAMESPACE}
          verify_deployment_in_namespace "api-service" ${KEPTN_NAMESPACE}
          verify_deployment_in_namespace "bridge" ${KEPTN_NAMESPACE}
          verify_deployment_in_namespace "configuration-service" ${KEPTN_NAMESPACE}
          verify_deployment_in_namespace "lighthouse-service" ${KEPTN_NAMESPACE}
          verify_deployment_in_namespace "shipyard-controller" ${KEPTN_NAMESPACE}
          verify_deployment_in_namespace "gatekeeper-service" ${KEPTN_NAMESPACE}
          verify_deployment_in_namespace "remediation-service" ${KEPTN_NAMESPACE}

          # verify the datastore deployments
          verify_deployment_in_namespace "mongodb" ${KEPTN_NAMESPACE}
          verify_deployment_in_namespace "mongodb-datastore" ${KEPTN_NAMESPACE}

      - name: Authenticate Keptn CLI with API
        id: authenticate_keptn_cli
        run: |
          source test/utils.sh
          # authenticate at Keptn API
          if [[ "$PLATFORM" == "openshift" ]]; then
            KEPTN_ENDPOINT=http://api.${KEPTN_NAMESPACE}.127.0.0.1.nip.io/api
          else
            if [[ "$KEPTN_SERVICE_TYPE" == "NodePort" ]]; then
              API_PORT=$(kubectl get svc api-gateway-nginx -n ${KEPTN_NAMESPACE} -o jsonpath='{.spec.ports[?(@.name=="http")].nodePort}')
              INTERNAL_NODE_IP=$(kubectl get nodes -o jsonpath='{ $.items[0].status.addresses[?(@.type=="InternalIP")].address }')
              KEPTN_ENDPOINT="http://${INTERNAL_NODE_IP}:${API_PORT}"/api
            else
              KEPTN_ENDPOINT=http://$(kubectl -n ${KEPTN_NAMESPACE} get service api-gateway-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}')/api
            fi
          fi

          KEPTN_API_TOKEN=$(kubectl get secret keptn-api-token -n ${KEPTN_NAMESPACE} -ojsonpath={.data.keptn-api-token} | base64 --decode)

          echo "KEPTN_ENDPOINT=${KEPTN_ENDPOINT}"
          echo "##[set-output name=KEPTN_ENDPOINT;]$(echo ${KEPTN_ENDPOINT})"

          auth_at_keptn $KEPTN_ENDPOINT $KEPTN_API_TOKEN
          verify_test_step $? "Could not authenticate at Keptn API"

      - name: Verify that Keptn CLI is authenticated using keptn status
        run: keptn status

      - name: Test Linking Stages
        id: test_linking_stages
        continue-on-error: true
        env:
          KEPTN_ENDPOINT: ${{ steps.authenticate_keptn_cli.outputs.KEPTN_ENDPOINT }}
        run: test/test_linking_stages.sh

      - name: Test Quality Gates Standalone
        id: test_quality_gates
        continue-on-error: true
        env:
          KEPTN_ENDPOINT: ${{ steps.authenticate_keptn_cli.outputs.KEPTN_ENDPOINT }}
          PROJECT: "musicshop"
          DYNATRACE_SLI_SERVICE_VERSION: "master"
          QG_INTEGRATION_TEST_DT_TENANT: ${{ secrets.QG_INTEGRATION_TEST_DT_TENANT }}
          QG_INTEGRATION_TEST_DT_API_TOKEN: ${{ secrets.QG_INTEGRATION_TEST_DT_API_TOKEN }}
        run: test/test_quality_gates_standalone.sh

      - name: Test Self Healing
        id: test_self_healing
        continue-on-error: true
        env:
          KEPTN_ENDPOINT: ${{ steps.authenticate_keptn_cli.outputs.KEPTN_ENDPOINT }}
          UNLEASH_SERVICE_VERSION: "master"
        run: test/test_self_healing.sh

      - name: Test Delivery Assistant
        id: test_delivery_assistant
        continue-on-error: true
        env:
          KEPTN_ENDPOINT: ${{ steps.authenticate_keptn_cli.outputs.KEPTN_ENDPOINT }}
          PROJECT: "musicshop"
          DYNATRACE_SLI_SERVICE_VERSION: "master"
        run: test/test_delivery_assistant.sh

      - name: Test Continuous Delivery (with sockshop)
        id: test_continuous_delivery
        if: env.RUN_CONTINUOUS_DELIVERY_TEST == 'true' # run only if variable is set
        continue-on-error: true
        env:
          KEPTN_ENDPOINT: ${{ steps.authenticate_keptn_cli.outputs.KEPTN_ENDPOINT }}
          PROJECT: "sockshop"
          SERVICE: "carts"
        run: |
          test/test_onboard_service.sh
          test/test_new_artifact.sh
          test/test_delete_project.sh

#      - name: Test Self Healing with Scaling using Prometheus (with sockshop)
#        id: test_continuous_delivery
#        if: env.RUN_CONTINUOUS_DELIVERY_TEST == 'true' # run only if variable is set
#        continue-on-error: true
#        env:
#          KEPTN_ENDPOINT: ${{ steps.authenticate_keptn_cli.outputs.KEPTN_ENDPOINT }}
#        run: |
#          test/test_self_healing_scaling.sh


      # All Tests finished, time for cleanup
      - name: Debug - Minishift status
        if: env.CLOUD_PROVIDER == 'minishift-on-GHA'
        run: oc status
      - name: Debug - Minishift routes
        if: env.CLOUD_PROVIDER == 'minishift-on-GHA'
        run: oc get routes --all-namespaces
      - name: Debug - Get Kubernetes namespaces
        run: kubectl get namespaces
      - name: Debug - Get Kubernetes services
        run: kubectl get services --all-namespaces
      - name: Debug - Get Kubernetes Deployments
        run: kubectl get deployments --all-namespaces -owide
      - name: Debug - Get Keptn Pods
        run: kubectl -n ${KEPTN_NAMESPACE} get pods

      - name: Uninstall Keptn
        run: echo "y" | keptn uninstall -n ${KEPTN_NAMESPACE}

      - name: Uninstall Istio
        if: env.CLOUD_PROVIDER != 'minishift-on-GHA' # istio was not installed on minishfit, so no need to uninstall
        run: test/utils/uninstall_istio.sh

      # one last time: debug infos
      - name: Debug - Minishift status
        if: env.CLOUD_PROVIDER == 'minishift-on-GHA'
        run: oc status
      - name: Debug - Minishift routes
        if: env.CLOUD_PROVIDER == 'minishift-on-GHA'
        run: oc get routes --all-namespaces
      - name: Debug - Get Kubernetes namespaces
        run: kubectl get namespaces
      - name: Debug - Get Kubernetes services
        run: kubectl get services --all-namespaces
      - name: Debug - Get Kubernetes Deployments
        run: kubectl get deployments --all-namespaces -owide

      - name: Cleanup GKE cluster
        if: env.CLOUD_PROVIDER == 'GKE'
        env:
          GKE_VERSION: ${{ matrix.VERSION }}
          GCLOUD_SERVICE_KEY: ${{ secrets.GCLOUD_SERVICE_KEY }}
          GCLOUD_PROJECT_NAME: ${{ secrets.GCLOUD_PROJECT_NAME }}
          CLOUDSDK_COMPUTE_ZONE: "us-central1-a"
          CLOUDSDK_REGION: "us-central1"
          CLUSTER_NAME_NIGHTLY: ${{ steps.install_gke.outputs.CLUSTER_NAME_NIGHTLY }}
        run: test/utils/gke_delete_cluster.sh

      - name: Cleanup Minishift cluster
        if: env.CLOUD_PROVIDER == 'minishift-on-GHA'
        run: |
          minishift stop
          minishift delete profile keptn-dev

      - name: Write test report
        if: always()
        env:
          TEST_REPORT_FILENAME: test-report-${{ github.run_id }}-${{ matrix.PLATFORM }}-${{ matrix.CLOUD_PROVIDER}}-${{ matrix.VERSION }}.txt
        run: |
          echo "write test report to $TEST_REPORT_FILENAME"
          echo "| ${{ matrix.PLATFORM }}/${{ matrix.CLOUD_PROVIDER}} ${{ matrix.VERSION }} | ${{ steps.keptn_install.outcome }} | ${{ steps.authenticate_keptn_cli.outcome }} | ${{ steps.test_linking_stages.outcome }} | ${{ steps.test_quality_gates.outcome }} | ${{ steps.test_self_healing.outcome }} | ${{ steps.test_delivery_assistant.outcome }} | ${{ steps.test_continuous_delivery.outcome }} |" > $TEST_REPORT_FILENAME
          cat $TEST_REPORT_FILENAME

      - name: Upload test report as an artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-report
          path: test-report-*.txt


  report-to-pr:
    needs: integration-test
    if: always() # run report-to-pr always, even if the previous required job fails
    runs-on: ubuntu-20.04
    steps:
      - name: Download test reports
        uses: actions/download-artifact@v2
        with:
          name: test-report
      - name: Print Test Report
        id: print_test_report
        run: |
          echo "Integration Tests have finished." > final-test-report.txt
          echo "" >> final-test-report.txt
          echo "| Target Platform        |  Keptn Install    |  Keptn Auth  | Linking Stages   |   Quality Gates Standalone  |  Self Healing  |  Delivery Assistant  | Continuous Delivery |" >> final-test-report.txt
          echo "| ---------------------- | ----------------- | ------------ | ---------------- | --------------------------- | -------------- | -------------------- | ------------------- |" >> final-test-report.txt
          cat test-report*.txt >> final-test-report.txt

          # print test report
          REPORT=$(cat final-test-report.txt)
          echo $REPORT

      - name: Upload final test report as an artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-report
          path: final-test-report.txt

      # ToDo: Report to slack, E-mail, PR, or whatever
