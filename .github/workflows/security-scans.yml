name: "Security Scans"
on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * 1' # run tests at 1 AM (UTC), every monday (1)

defaults:
  run:
    shell: bash

env:
  GO_VERSION: "~1.19"

jobs:
  prepare-security-scans:
    name: "Prepare Security Scans"
    runs-on: ubuntu-20.04
    env:
      RENDERED_CHART_FILENAME: "scan-tpl.yml"
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: 'true'

      - name: Render helm template
        run: |
          VERSION=$(cat .release-please-manifest.json | jq -r ".[]")
          cd ./installer/manifests/keptn
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add nats https://nats-io.github.io/k8s/helm/charts/
          helm dependency build ./
          # replace "appVersion: latest" with "appVersion: $VERSION" in all Chart.yaml files
          find . -name Chart.yaml -exec sed -i -- "s/appVersion: latest/appVersion: ${VERSION}/g" {} \;
          helm template ./ -n keptn --name-template keptn --version ${VERSION} > ${{ env.RENDERED_CHART_FILENAME }}

      - name: Upload rendered chart as artifact
        uses: actions/upload-artifact@v3
        with:
          name: rendered-helm-chart
          path: installer/manifests/keptn/${{ env.RENDERED_CHART_FILENAME }}

  security-scans:
    name: "Security Scans"
    needs: prepare-security-scans
    runs-on: ubuntu-20.04
    env:
      CHART_TO_SCAN: "scans/scan-tpl.yml"
    strategy:
      fail-fast: false
      matrix:
        include:
          - tool: "kics"
          - tool: "kubeconform"
          - tool: "kubescape"
            kubescape-framework: "nsa"
          - tool: "kubescape"
            kubescape-framework: "mitre"
          - tool: "kubescape"
            kubescape-framework: "ARMOBest"
    steps:
      - name: Set up Go
        if: matrix.tool == 'kubeconform'
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: 'true'

      - name: Download helm template
        id: download_helm_chart
        uses: actions/download-artifact@v3
        with:
          name: rendered-helm-chart
          path: scans

      - name: KICS Scan
        if: matrix.tool == 'kics'
        uses: Checkmarx/kics-github-action@v1.6
        with:
          path: ${{ env.CHART_TO_SCAN }}
          config_path: .github/kics-config.yml
          fail_on: high,medium
          output_formats: json,sarif

      - name: Upload KICS results
        if: always() && matrix.tool == 'kics'
        uses: actions/upload-artifact@v3
        with:
          name: kics-results
          path: results.json

      - name: Kubeconform Scan
        if: matrix.tool == 'kubeconform'
        run: |
          echo "::group::Kubeconform installation"
          go install github.com/yannh/kubeconform/cmd/kubeconform@v0.4.13
          echo "::endgroup::"

          kubeconform -schema-location default -summary ${{ env.CHART_TO_SCAN }}

      - name: Kubescape Scan
        if: matrix.tool == 'kubescape'
        env:
          FAILURE_PERCENTAGE: 10
        run: |
          echo "::group::Kubescape installation"
          curl -s https://raw.githubusercontent.com/armosec/kubescape/master/install.sh | /bin/bash
          echo "::endgroup::"
          # Docs on how to configure exceptions: https://hub.armosec.io/docs/exceptions
          kubescape scan framework ${{ matrix.kubescape-framework }} -v -t ${{ env.FAILURE_PERCENTAGE }} --exceptions ./.github/.kubescape/exceptions.json --controls-config ./.github/.kubescape/controls-inputs.json ${{ env.CHART_TO_SCAN }} --enable-color
  
  govulncheck:
    name: Govulncheck
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
       artifacts: # The resource-service was excluded for this check, because a workaround would be needed to install the right version of libgit2-dev
       - "api"
       - "approval-service"
       - "distributor"
       - "lighthouse-service"
       - "mongodb-datastore"
       - "remediation-service"
       - "secret-service"
       - "shipyard-controller"
       - "statistics-service"
       - "webhook-service"
       - "cli"
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Check for vulnerabilities
      working-directory: ./${{ matrix.artifacts }}
      run: govulncheck ./...

  create_issue:
    name: Create GitHub Issue
    runs-on: ubuntu-22.04
    needs: [ security-scans, govulncheck ]
    if: failure() && github.event_name == 'schedule'
    steps:
    - name: Formulate bug issue
      id: formulate_bug_issue
      run: |
        # create a markdown file that contains details about the error
        echo "---" > security-scan-failure.md
        echo "title: 'Security Scan failed'" >> security-scan-failure.md
        echo "labels: 'type:critical'" >> security-scan-failure.md
        echo "---" >> security-scan-failure.md
        echo "" >> security-scan-failure.md
        echo "* Link to run: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> security-scan-failure.md
        if [[ $GITHUB_EVENT_NAME == 'schedule' ]]; then
          echo "* Triggered by: Scheduled build" >> security-scan-failure.md
        else
          echo "* Triggered by: @$GITHUB_ACTOR" >> security-scan-failure.md
        fi
        echo "" >> security-scan-failure.md
        echo "Note: This issue was auto-generated from [security-scan.yml](.github/workflows/security-scan.yml)" >> security-scan-failure.md

    - name: Create issue if versions differ
      uses: JasonEtco/create-an-issue@v2.9.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        filename: security-scan-failure.md
