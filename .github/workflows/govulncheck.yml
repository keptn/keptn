name: Govulncheck
on:
  schedule:
    - cron: '0 2 * * 1' # run tests at 12 PM (UTC), every monday (1)

env:
  GO_VERSION: "~1.18"
  BRIDGE_SERVER_ARTIFACT_PREFIX: "BRIDGE_SERVER"
  BRIDGE_ARTIFACT_PREFIX: "BRIDGE"
  API_ARTIFACT_PREFIX: "API"
  APPROVAL_SVC_ARTIFACT_PREFIX: "APPROVAL_SVC"
  DISTRIBUTOR_ARTIFACT_PREFIX: "DISTRIBUTOR"
  SHIPYARD_CONTROLLER_ARTIFACT_PREFIX: "SHIPYARD_CONTROLLER"
  SECRET_SVC_ARTIFACT_PREFIX: "SECRET_SVC"
  RESOURCE_SVC_ARTIFACT_PREFIX: "RESOURCE_SVC"
  REMEDIATION_SVC_ARTIFACT_PREFIX: "REMEDIATION_SVC"
  LIGHTHOUSE_SVC_ARTIFACT_PREFIX: "LIGHTHOUSE_SVC"
  MONGODB_DS_ARTIFACT_PREFIX: "MONGODB_DS"
  STATISTICS_SVC_ARTIFACT_PREFIX: "STATISTICS_SVC"
  WEBHOOK_SVC_ARTIFACT_PREFIX: "WEBHOOK_SVC"

  BRIDGE_ARTIFACT: "bridge2"
  BRIDGE_FOLDER: "bridge/"
  BRIDGE_DOCKER_TEST_TARGET: "builder-test-unit"

  BRIDGE_SERVER_ARTIFACT: "bridge2"
  BRIDGE_SERVER_FOLDER: "bridge/"
  BRIDGE_SERVER_DOCKER_TEST_TARGET: "bridge-server-test"
  BRIDGE_SERVER_SHOULD_PUSH_IMAGE: "false"

  API_ARTIFACT: "api"
  API_FOLDER: "api/"
  API_DOCKER_TEST_TARGET: "builder-test"

  APPROVAL_SVC_ARTIFACT: "approval-service"
  APPROVAL_SVC_FOLDER: "approval-service/"
  APPROVAL_SVC_DOCKER_TEST_TARGET: "builder-test"

  DISTRIBUTOR_ARTIFACT: "distributor"
  DISTRIBUTOR_FOLDER: "distributor/"
  DISTRIBUTOR_DOCKER_TEST_TARGET: "builder-test"

  SHIPYARD_CONTROLLER_ARTIFACT: "shipyard-controller"
  SHIPYARD_CONTROLLER_FOLDER: "shipyard-controller/"
  SHIPYARD_CONTROLLER_DOCKER_TEST_TARGET: "builder-test"

  SECRET_SVC_ARTIFACT: "secret-service"
  SECRET_SVC_FOLDER: "secret-service/"
  SECRET_SVC_DOCKER_TEST_TARGET: "builder-test"

  RESOURCE_SVC_ARTIFACT: "resource-service"
  RESOURCE_SVC_FOLDER: "resource-service/"
  RESOURCE_SVC_DOCKER_TEST_TARGET: "builder-test"

  REMEDIATION_SVC_ARTIFACT: "remediation-service"
  REMEDIATION_SVC_FOLDER: "remediation-service/"
  REMEDIATION_SVC_DOCKER_TEST_TARGET: "builder-test"

  LIGHTHOUSE_SVC_ARTIFACT: "lighthouse-service"
  LIGHTHOUSE_SVC_FOLDER: "lighthouse-service/"
  LIGHTHOUSE_SVC_DOCKER_TEST_TARGET: "builder-test"

  MONGODB_DS_ARTIFACT: "mongodb-datastore"
  MONGODB_DS_FOLDER: "mongodb-datastore/"
  MONGODB_DS_DOCKER_TEST_TARGET: "builder-test"

  STATISTICS_SVC_ARTIFACT: "statistics-service"
  STATISTICS_SVC_FOLDER: "statistics-service/"
  STATISTICS_SVC_DOCKER_TEST_TARGET: "builder-test"

  WEBHOOK_SVC_ARTIFACT: "webhook-service"
  WEBHOOK_SVC_FOLDER: "webhook-service/"
  WEBHOOK_SVC_DOCKER_TEST_TARGET: "builder-test"

defaults:
  run:
    shell: bash
jobs:
  prepare:
    name: Prepare govulncheck run
    runs-on: ubuntu-22.04
    outputs:
      BUILD_MATRIX: ${{ steps.check_modified_files.outputs.BUILD_MATRIX }}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Prepare artifact build matrix
      id: check_modified_files
      env:
        BUILD_EVERYTHING: true
      run: ./gh-actions-scripts/prepare_changed_artifacts.sh ""

  vulnerability-check:
    name: Vulnerability Check
    runs-on: ubuntu-22.04
    needs: prepare
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.BUILD_MATRIX) }}
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v3
        if: matrix.config.artifact != 'bridge2'
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Checkout Code
        if: matrix.config.artifact != 'bridge2'
        uses: actions/checkout@v3
      
      - name: Install govulncheck
        if: matrix.config.artifact != 'bridge2'
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Check for vulnerabilities
        if: matrix.config.artifact != 'bridge2'
        working-directory: ./${{ matrix.config.working-dir }}
        run: govulncheck ./...

  create_issue:
    name: Create GitHub Issue
    runs-on: ubuntu-22.04
    needs: security-scans
    if: failure()
    steps:
    - name: Formulate bug issue
      id: formulate_bug_issue
      run: |
        # create a markdown file that contains details about the error
        echo "---" > vulnerability-found.md
        echo "title: 'Go Vulnerability found'" >> vulnerability-found.md
        echo "labels: 'type:critical'" >> vulnerability-found.md
        echo "---" >> vulnerability-found.md
        echo "" >> vulnerability-found.md
        echo "* Link to run: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> vulnerability-found.md
        if [[ $GITHUB_EVENT_NAME == 'schedule' ]]; then
          echo "* Triggered by: Scheduled build" >> vulnerability-found.md
        else
          echo "* Triggered by: @$GITHUB_ACTOR" >> vulnerability-found.md
        fi
        echo "" >> vulnerability-found.md
        echo "Note: This issue was auto-generated from [govulncheck.yml](.github/workflows/govulncheck.yml)" >> vulnerability-found.md

    - name: Create issue if versions differ
      uses: JasonEtco/create-an-issue@v2.6
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        filename: vulnerability-found.md
