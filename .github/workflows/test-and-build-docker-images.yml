name: Build Docker Images
on:
  workflow_call:
    inputs:
      artifact:
        type: string
        required: true
      tags:
        type: string
        required: true
      should-run:
        type: string
        required: true
      should-push-image:
        type: string
        required: true
      docker-test-target:
        type: string
        required: true
      working-dir: 
        type: string
        required: true
      version:
        type: string
        required: true
      datetime:
        type: string
        required: false
        default: ''
      gitSha: 
        type: string
        required: true
        default: ''
      build-everything:
        type: string
        required: false
        default: 'false'
      build-installer:
        type: string
        required: false
        default: 'false'
      go-version:
        type: string
        required: true
      execute-tests:
        type: string
        required: false
        default: 'true'
defaults:
  run:
    shell: bash
jobs:
  unit_test:
    name: Execute Unit Tests
    runs-on: ubuntu-20.04
    if: inputs.execute-tests == 'true'
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Go 1.x
      if: inputs.artifact != 'bridge2'
      uses: actions/setup-go@v3
      with:
        go-version: ${{ inputs.go-version }}
        cache: true
        cache-dependency-path: '**/go.sum'

    - name: Set up gotestsum
      if: inputs.artifact != 'bridge2'
      run: go install gotest.tools/gotestsum@v1.8.1

    - name: Test ${{ inputs.artifact }} # TODO add --race #8486 
      if: inputs.artifact != 'bridge2' && ((inputs.build-everything == 'true') || (inputs.should-run == 'true'))
      working-directory: ./${{ inputs.artifact }}
      run: |
        go mod download
        gotestsum --no-color=false --format=testname -- -coverprofile=coverage.txt -covermode=atomic -v ./... 

    #######################################################################
          # TESTS FOR BRIDGE
    #######################################################################
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      if: inputs.artifact == 'bridge2'
      working-directory: bridge
      run: |
        echo "::set-output name=dir::$(yarn cache dir)"
        echo "::set-output name=version::$(yarn -v)
    
    - name: Setup yarn cache
      uses: actions/cache@v2
      id: yarn-cache
      if: inputs.artifact == 'bridge2'
      with:
        path: |
          **/node_modules
          ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install yarn
      if: inputs.artifact == 'bridge2'
      working-directory: bridge
      run: |
        if [[ '${{ inputs.docker-test-target }}' == 'bridge-server-test' ]]; then
          cd ./server 
        fi
        yarn install --frozen-lockfile 

    - name: Bridge lint checks
      if: inputs.artifact == 'bridge2' && inputs.docker-test-target == 'builder-code-style'
      working-directory: bridge
      run: yarn prettier:check && yarn lint:check

    - name: UI-Test
      if: inputs.docker-test-target == 'builder-test-ui'
      working-directory: bridge
      run: |
       ./cypress/run-tests.sh

    - name: Bridge unit test
      if: inputs.artifact == 'bridge2' && inputs.docker-test-target != 'builder-test-ui'
      working-directory: bridge
      run: |
        if [[ '${{ inputs.docker-test-target }}' == 'bridge-server-test' ]]; then
          cd ./server 
        fi
        yarn test

    - name: Report test coverage for bridge-server
      if: inputs.should-push-image == 'false' && inputs.artifact == 'bridge2' && inputs.docker-test-target == 'bridge-server-test'
      uses: codecov/codecov-action@v3
      with:
        fail_ci_if_error: false
        flags: bridge-server

    - name: Upload Test Screenshots
      if: always() && inputs.artifact == 'bridge2' && inputs.docker-test-target == 'builder-test-ui'
      uses: actions/upload-artifact@v3
      with:
        name: bridge-e2e-screenshots
        path: ./bridge/shared/screenshots

    # REPORT COVERAGE
    - name: Report test coverage for ${{ inputs.artifact }}
      if: inputs.should-push-image == 'true'
      uses: codecov/codecov-action@v3
      with:
          fail_ci_if_error: false
          flags: ${{ inputs.artifact }}

#######################################################################
# BUILD PRODUCTION IMAGES
#######################################################################
  build_image:
    name: Build and push Docker Image
    runs-on: ubuntu-20.04
    needs: unit_test
    permissions:
      id-token: write # Needed for cosign OIDC authentication against Github
    if: (inputs.build-everything == 'true') || (inputs.build-installer == 'true')
    steps:
    - name: Check out code
      uses: actions/checkout@v3
      
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
      with:
          install: true

    - name: Set up Cosign
      uses: sigstore/cosign-installer@v2.6.0

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: "ghcr.io"
        username: "keptn-bot"
        password: ${{ secrets.KEPTN_BOT_TOKEN }}

    - name: Login to Quay.io
      uses: docker/login-action@v2
      with:
        registry: "quay.io"
        username: ${{ secrets.QUAY_USER }}
        password: ${{ secrets.QUAY_TOKEN }}
    
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        # Key is named differently to avoid collision
        key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-multi-buildx

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      # only run docker login on pushes; also for PRs, but only if this is not a fork
      if: ( github.actor != 'renovate[bot]' && github.actor != 'dependabot[bot]' ) && (inputs.should-push-image == 'true' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event.pull_request.head.repo.full_name == github.repository))
      # note: GH does not allow to access secrets for PRs from a forked repositories due to security reasons
      # that's fine, but it means we can't push images to dockerhub
      with:
        username: ${{ secrets.REGISTRY_USER }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: "Docker Build keptn/${{ inputs.artifact }}"
      id: docker_build_image
      if: inputs.should-push-image == 'true' && ( inputs.should-run == 'true' || inputs.build-everything == 'true' )
      uses: docker/build-push-action@v3
      with:
        context: ${{ inputs.working-dir }}
        tags: ${{ inputs.tags }}
        build-args: |
          version=${{ inputs.version }}
          buildTime=${{ inputs.datetime }}
          gitSha=${{ inputs.gitSha }}
        push: ${{ inputs.should-push-image == 'true' }}
        pull: true
        builder: ${{ steps.buildx.outputs.name }}
        cache-from: type=gha, scope=${{ github.workflow }}
        cache-to: type=gha, scope=${{ github.workflow }}

    - name: Write docker image digest to file
      if: inputs.should-push-image == 'true'
      env:
        IMAGE_DIGEST: ${{ steps.docker_build_image.outputs.digest }}
        IMAGE_DIGEST_FILENAME: "./digest-${{ inputs.artifact }}.txt"
      run: |
        echo "${{ inputs.artifact }},$IMAGE_DIGEST" > "$IMAGE_DIGEST_FILENAME"

    - name: Upload Digest file as artifact
      if: inputs.should-push-image == 'true'
      uses: actions/upload-artifact@v3
      env:
        IMAGE_DIGEST_FILENAME: "./digest-${{ inputs.artifact }}.txt"
      with:
        name: image-digests
        path: ${{ env.IMAGE_DIGEST_FILENAME }}

    - name: Sign container images
      if: inputs.should-push-image == 'true'
      env:
        COSIGN_EXPERIMENTAL: 1
        TAGS: ${{ inputs.tags }}
      run: |
        for tag in $TAGS
        do 
          cosign sign $tag
        done

    - name: Verify container images
      if: inputs.should-push-image == 'true'
      env:
        COSIGN_EXPERIMENTAL: 1
        TAGS: ${{ inputs.tags }}
      run: |
        for tag in $TAGS
        do
          cosign verify $tag
        done
