name: ZeroDowntime Tests
on:
#  schedule:
#    # * is a special character in YAML so you have to quote this string
#    - cron:  '0 4 * * 1-5' # run zero downtime tests at 4 AM (UTC), monday to friday (1-5)
  workflow_dispatch: # run zero downtime tests selecting the installation branch and the upgrade chart
    inputs:
      branch:
        description: 'Take CI build artifacts from branch (e.g., master, release-x.y.z), this changes the chart version that will be installed in the cluster, defaults to last release'
        required: false
      upgradeTo:
        description: 'The helm upgrade command will run with this version (e.g. 0.15.0-dev-PR-7504 or a full address like in the default value )'
        required: true
        default: 'https://charts-dev.keptn.sh/packages/keptn-0.19.0-dev.tgz'
      testUI:
        type: boolean
        description: 'Cypress tests for Bridge will be run in parallel to the zero downtime tests'
        required: true
        default: true
      deleteOnFinish:
        type: boolean
        required: false
        description: "Check this if you don't want the test namespaces to stay alive after the test run"
        default: false
      testDowngrade:
        type: boolean
        required: false
        description: "Check if downgrade is also with zero downtime"
        default: false
defaults:
  run:
    shell: bash
jobs:
  calculate-queue-time:
    name: "Calculate Queue Time"
    uses: ./.github/workflows/pipeline-queuetime.yml
    with:
      workflow_name: "Zero Downtime Tests"
    secrets:
      monitoring_api_token: ${{ secrets.MONITORING_API_TOKEN }}
      monitoring_tenant_url: ${{ secrets.MONITORING_TENANT_URL }}

  zd-test:
    name: "Tests"
    runs-on: ubuntu-20.04
    needs: calculate-queue-time
    strategy:
      fail-fast: false
      matrix:
        include:
          - CLOUD_PROVIDER: "GKE"
            PLATFORM_VERSION: "1.24"
            CLUSTER_NAME: "keptn-integration-tests-2"
            KUBECONFIG: ""
            PLATFORM: "kubernetes"
    env:
      CLOUD_PROVIDER: ${{ matrix.CLOUD_PROVIDER }}
      PLATFORM: ${{ matrix.PLATFORM }}
      PLATFORM_VERSION: ${{ matrix.PLATFORM_VERSION }}
      KUBECONFIG: ${{ matrix.KUBECONFIG }}
      KEPTN_NAMESPACE: "keptn-zd-test-${{ github.run_number }}-${{ github.run_attempt }}"
      GO_VERSION: "~1.18"
      UPGRADE_TO: ${{ inputs.upgradeTo || 'https://charts-dev.keptn.sh/packages/keptn-0.19.0-dev.tgz' }}
    outputs:
      BRANCH: ${{ steps.determine_branch.outputs.BRANCH }}
      ARTIFACT_RUN_ID: ${{ steps.last_run_id.outputs.RUN_ID }}
    steps:

      #######################################################################
      # SETUP
      #######################################################################
      - name: Set up Go 1.x
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Check out code.
        uses: actions/checkout@v3

      - name: Create downloads folder
        run: mkdir ~/downloads

      - name: Cache downloads paths
        uses: actions/cache@v3.0.11
        with:
          path: |
            ~/downloads
          key: ${{ runner.os }}-${{ matrix.CLOUD_PROVIDER }}-downloads

      # This step is supposed to determine the target branch where to download the build-artifacts from
      - name: Determine Target Branch for ZD Tests
        id: determine_branch
        run: |
          if [[ "${{ github.event.inputs.branch }}" != "" ]]; then
            # branch was manually set by user -> probably a workflow_dispatch action
            BRANCH=${{ github.event.inputs.branch }}
            echo "Using $BRANCH as target branch for zd tests"
          else
            echo "Determining branch based on last release"
            STR=$(curl https://api.github.com/repos/keptn/keptn/releases -s | jq -r .[].tag_name | grep '^[0-9]\.[0-9]*\.[0-9]*$' | sort -nr | head -n 1)
            BRANCH=$(echo "${STR%.*}.x")
          fi

          echo "BRANCH=$(echo ${BRANCH})" >> $GITHUB_OUTPUT

      - name: Find latest successful run ID
        id: last_run_id
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_SLUG: "keptn/keptn"
          BRANCH: ${{ steps.determine_branch.outputs.BRANCH }}
        run: |
          RUN_ID=$(\
            curl -sL \
              -H 'Accept: application/vnd.github.v3+json' \
              -H "Authorization: token $GITHUB_TOKEN" \
              "api.github.com/repos/$REPO_SLUG/actions/workflows/CI.yml/runs?branch=$BRANCH" | \
            jq '[.workflow_runs[] | select(
              (.head_commit != null) and (.head_commit.author.name | endswith("[bot]") | not ) and ( .conclusion == "success" )
            )][0] | .id')
          echo "Run ID that will be used to download artifacts from: $RUN_ID"
          echo "RUN_ID=$RUN_ID" >> $GITHUB_OUTPUT

          

      # download artifacts from the specified branch with event type push (e.g., push to master/release branch)
      - name: Download all artifacts from last successful build of specified branch
        uses: dawidd6/action-download-artifact@v2.23.0
        id: download_artifacts_push
        with:
          # Download last successful artifact from a CI build
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: CI.yml
          run_id: ${{ steps.last_run_id.outputs.RUN_ID }}
          # directory where to extract artifacts to
          path: ./dist

      # load build-config
      - name: Load Build-Config Environment from ./dist/build-config/build-config.env
        id: load_build_env
        uses: c-py/action-dotenv-to-setenv@v4
        with:
          env-file: ./dist/build-config/build-config.env

      - name: Overwrite VERSION String for all builds
        run: |
          # use VERSION.DATETIME for the cli version (e.g., nightly build)
          VERSION=${VERSION}.${DATETIME}
          # overwrite VERSION
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Print Build-Config
        run: |
          echo VERSION=${VERSION}
          echo BRANCH=${BRANCH}

      - name: Extract Keptn CLI artifact
        run: |
          tar -zxvf dist/keptn-cli/keptn-*-linux-amd64.tar.gz
          sudo mv keptn-*-linux-amd64 /usr/local/bin/keptn

      - name: Verify Keptn CLI works
        timeout-minutes: 1
        run: keptn version

      - name: Extract name of helm chart
        id: extract_helm_chart_name
        run: |
          ls dist/keptn-installer/*.tgz # debug output
          HELM_CHART_NAME=$(ls dist/keptn-installer/keptn*.tgz)
          echo "HELM_CHART_NAME=$(echo ${HELM_CHART_NAME})" >> $GITHUB_OUTPUT

      - name: Setup upgrade charts
        id: setup_upgrade_charts
        env:
          HELM_CHART_NAME: ${{ steps.extract_helm_chart_name.outputs.HELM_CHART_NAME }}
        run: |
          
          echo "copying helm chart in zero downtime folder"
          cp ${HELM_CHART_NAME} test/zero-downtime/keptn-dev-installed.tgz
          cd test/zero-downtime
          echo "INSTALL_HELM_CHART=$(ls ./keptn-dev-installed.tgz)" >> $GITHUB_ENV
          
          if [[ "${{ github.event_name }}" == 'schedule' || ${{ env.UPGRADE_TO }} == "http"* ]]; then
            echo "UPGRADE_HELM_CHART=${{ env.UPGRADE_TO}}" >> $GITHUB_ENV
          else
            echo  'retrieving  ./keptn-${{ env.UPGRADE_TO  }}.tgz'
            helm repo add keptn "https://charts.keptn.sh"
            helm repo add keptndev "https://charts-dev.keptn.sh"
            helm repo update
          
            if [[ "${{ env.UPGRADE_TO }}" == *"-dev"* ]]; then
               helm pull keptndev/keptn --version ${{ env.UPGRADE_TO }}
            else
               helm pull keptn/keptn --version ${{ env.UPGRADE_TO }}
            fi
            echo "UPGRADE_HELM_CHART=$(ls './keptn-${{ env.UPGRADE_TO }}.tgz')" >> $GITHUB_ENV
          fi
          
          echo "Downloaded files:"
          ls -la ./keptn*.tgz

      - name: Authenticate to Google Cloud
        if: env.CLOUD_PROVIDER == 'GKE'
        uses: google-github-actions/auth@v0.8.1
        with:
          credentials_json: ${{ secrets.GCLOUD_RESTRICTED_SERVICE_KEY }}

      - name: Set up Google Cloud SDK
        if: env.CLOUD_PROVIDER == 'GKE'
        uses: google-github-actions/setup-gcloud@v0.6.2

      - name: Get Kubeconfig
        if: env.CLOUD_PROVIDER == 'GKE'
        uses: google-github-actions/get-gke-credentials@v0.8.0
        with:
          cluster_name: ${{ matrix.CLUSTER_NAME }}
          location: "europe-west2"

      - name: Install Keptn
        id: keptn_install
        timeout-minutes: 10
        env:
          HELM_CHART_NAME: ${{ steps.extract_helm_chart_name.outputs.HELM_CHART_NAME }}
        run: |
          echo "Installing Keptn on cluster"
          echo "{}" > creds.json # empty credentials file

          echo "::group::Keptn Installation Log"

          # Use Keptn helm chart to be able to customize the values
          if [[ "$HELM_CHART_NAME" == *"dev"* ]]; then
            helm install -n ${KEPTN_NAMESPACE} keptn ${HELM_CHART_NAME} \
              --set global.keptn.registry="docker.io/keptndev" \
              --create-namespace \
              --values=./test/zero-downtime/assets/test-values.yml          
          else
             helm install -n ${KEPTN_NAMESPACE} keptn ${HELM_CHART_NAME} \
                --set global.keptn.registry="docker.io/keptndev" \
                --create-namespace \
                --values=./test/zero-downtime/assets/test-values.yml      
          fi

          echo "::endgroup::"

      - name: Install Gitea
        id: install_gitea
        timeout-minutes: 5
        run: |
          helm repo add gitea-charts https://dl.gitea.io/charts/
          helm install --values test/assets/gitea/values.yaml gitea gitea-charts/gitea -n ${KEPTN_NAMESPACE} --wait --version v5.0.0
          GITEA_ADMIN_USER=$(kubectl get pod -n ${KEPTN_NAMESPACE} gitea-0 -ojsonpath='{@.spec.initContainers[?(@.name=="configure-gitea")].env[?(@.name=="GITEA_ADMIN_USERNAME")].value}')
          GITEA_ADMIN_PASSWORD=$(kubectl get pod -n ${KEPTN_NAMESPACE} gitea-0 -ojsonpath='{@.spec.initContainers[?(@.name=="configure-gitea")].env[?(@.name=="GITEA_ADMIN_PASSWORD")].value}')
          sleep 30 # TODO
          ssh-keygen -t rsa -C "gitea-http" -f "rsa_gitea" -P "myGiteaPassPhrase"
          GITEA_PRIVATE_KEY=$(cat rsa_gitea)
          GITEA_PUBLIC_KEY=$(cat rsa_gitea.pub)
          GITEA_PRIVATE_KEY_PASSPHRASE=myGiteaPassPhrase
          sleep 30 # TODO
          kubectl port-forward -n ${KEPTN_NAMESPACE} svc/gitea-http 3000:3000 &
          kubectl port-forward -n ${KEPTN_NAMESPACE} svc/gitea-ssh 3001:22 &
          sleep 30 # TODO
          curl -vkL --silent --user ${GITEA_ADMIN_USER}:${GITEA_ADMIN_PASSWORD} -X POST "http://localhost:3000/api/v1/users/${GITEA_ADMIN_USER}/tokens" -H "accept: application/json" -H "Content-Type: application/json; charset=utf-8" -d "{ \"name\": \"my-token\" }" -o gitea-token.txt
          curl -vkL --silent --user ${GITEA_ADMIN_USER}:${GITEA_ADMIN_PASSWORD} -X POST "http://localhost:3000/api/v1/user/keys" -H "accept: application/json" -H "Content-Type: application/json; charset=utf-8" -d "{ \"key\": \"$GITEA_PUBLIC_KEY\",  \"title\": \"public-key-gitea\"}"
          GITEA_TOKEN=$(cat gitea-token.txt | jq -r .sha1)
          kubectl create secret generic gitea-access -n ${KEPTN_NAMESPACE} --from-literal=username=${GITEA_ADMIN_USER} --from-literal=password=${GITEA_TOKEN} --from-literal=private-key="${GITEA_PRIVATE_KEY}" --from-literal=private-key-pass=${GITEA_PRIVATE_KEY_PASSPHRASE}
          rm gitea-token.txt

      - name: Determine Keptn Endpoint
        id: determine_keptn_endpoint
        timeout-minutes: 5
        run: |
          source test/utils.sh

          # authenticate at Keptn API

          KEPTN_ENDPOINT=http://$(kubectl -n ${KEPTN_NAMESPACE} get service api-gateway-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}')/api

          KEPTN_API_TOKEN=$(kubectl get secret keptn-api-token -n ${KEPTN_NAMESPACE} -ojsonpath={.data.keptn-api-token} | base64 --decode)
          echo "KEPTN_ENDPOINT=${KEPTN_ENDPOINT}"
          echo "KEPTN_ENDPOINT=$(echo ${KEPTN_ENDPOINT})" >> $GITHUB_OUTPUT

      - name: Set up gotestfmt
        uses: haveyoudebuggedit/gotestfmt-action@v2.0.0
        with:
          # Passing GITHUB_TOKEN to avoid rate limiting.
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Node Dependencies
        if: github.event.inputs.testUI == 'true'
        working-directory: bridge
        run: yarn install --frozen-lockfile

      - name: Prepare test run
        id: prepare_test_run
        working-directory: test/zero-downtime
        run: |
         mkdir ../../temp_res
         go install github.com/jstemmer/go-junit-report/v2@v2.0.0
         go get ./...

      - name: Override Test Configs
        if: always() && ( github.event_name == 'schedule' || github.event.inputs.testDowngrade == 'false')
        # Only run one upgrade in case of scheduled run
        run:  echo "NUMBER_OF_UPGRADES=1" >> $GITHUB_ENV

      #######################################################################
      # TESTS
      #######################################################################

      - name: Zero Downtime Tests
        timeout-minutes: 30
        working-directory: test/zero-downtime
        id: test_zero_downtime
        env:
          GOMAXPROCS: 10
          KEPTN_ENDPOINT: ${{ steps.determine_keptn_endpoint.outputs.KEPTN_ENDPOINT }}
        run: |
          go test -v -json -run Test_ZeroDowntime -timeout 25m > ../../temp_res/gotest.log & GOTEST=$!
          
          cd ../../bridge &&
          if [[ "${{ github.event.inputs.testUI }}" == 'true' ]]; then
            while [[ $(jobs -pr) ]]; do
              echo "New Run: " >> /tmp/uitest.log
              npm run test:ui >> /tmp/uitest.log 2>&1
            done
          else
            echo "UI tests will not run"
          fi
        
          wait $GOTEST
          if [[ $? -ne 0 ]]; then
            echo " Zero Downtime go test failed - exiting"
            echo "::error::Zero Downtime go test failed - exiting"          
            exit 1
          fi
          echo "Zero Downtime go test finished, storing result"

      - name: Generate XML
        if: always()
        run: go-junit-report -in temp_res/gotest.log -parser gojson -out temp_res/gotest.xml

      - name: Generate Test Summary
        if: always()
        uses: test-summary/action@v1
        with:
          paths: "temp_res/*.xml"
          output: temp_res/test-summary.md


      - name: Format go test log output
        if: always()
        run: |
          set -euo pipefail
          cat temp_res/gotest.log 2>&1 | gotestfmt

      - name: Format cypress log output
        id: log_output
        if: always() && github.event.inputs.testUI == 'true'
        run: cat /tmp/uitest.log

      - name: Generate Report
        if: always()
        id: report
        run: |
          
          FINAL=$(cat temp_res/test-summary.md) 
          echo "$FINAL" >>  $GITHUB_STEP_SUMMARY
          echo "FINAL=$(echo ${FINAL})" >> $GITHUB_OUTPUT

      - name: Generate Github Summary
        if: always()
        env:
          TESTUI: ${{ github.event.inputs.testUI }}
          UIOUT: ${{ steps.log_output.outcome }}
        run: |
          if [[ $TESTUI == 'true' && $UIOUT != 'success' ]]; then
             echo "UI test failed!" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ $GITHUB_EVENT_NAME == 'schedule' ]]; then
             echo "* Triggered by: Scheduled build" >> $GITHUB_STEP_SUMMARY
          else
             echo "* Triggered by: @$GITHUB_ACTOR" >> $GITHUB_STEP_SUMMARY
          fi
          
          
          echo "* Branch: $BRANCH" >> $GITHUB_STEP_SUMMARY
          echo "* Version: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "* Datetime: $DATETIME" >> $GITHUB_STEP_SUMMARY
          echo "* Commit: $GIT_SHA" >> $GITHUB_STEP_SUMMARY
          echo "* Upgraded to: $UPGRADE_HELM_CHART" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      #######################################################################
      # TEARDOWN
      #######################################################################

      - name: keptn generate support-archive
        if: always()
        env:
          SUPPORT_ARCHIVE_FILENAME: keptn-support-archive-${{ github.run_id }}-${{ matrix.PLATFORM }}-${{ matrix.CLOUD_PROVIDER}}-${{ matrix.PLATFORM_VERSION }}
        timeout-minutes: 5
        run: |
          mkdir support-archive/
          echo "y" | keptn generate support-archive -n ${KEPTN_NAMESPACE}
          mv support-archive/keptn*.zip support-archive/${SUPPORT_ARCHIVE_FILENAME}.zip

      - name: Cleanup test namespace
        if: always()
        run: |
          echo "Cleaning up test resources..."

          readarray -t namespaces <<< "$(kubectl get namespaces | awk '{ print $1 }' | grep ${{ env.KEPTN_NAMESPACE }})"
          readarray -t clusterrolebindings <<< "$(kubectl get clusterrolebindings | awk '{ print $1 }' | grep ${{ env.KEPTN_NAMESPACE }})"

          if [[ "${{ github.event_name }}" == 'schedule' && "${{ steps.test_zero_downtime.outcome }}" != 'success' ]]; then
            for namespace in "${namespaces[@]}"; do
              if [[ ! -z "${namespace// }" ]]; then
                echo "Annotating namespace $namespace with Janitor TTL of 3 days..."
                kubectl annotate namespace "$namespace" janitor/ttl=3d
              fi
            done
          
            for crb in "${clusterrolebindings[@]}"; do
              if [[ ! -z "${crb// }" ]]; then
                echo "Annotating clusterrolebinding $crb with Janitor TTL of 3 days..."
                kubectl annotate clusterrolebinding "$crb" janitor/ttl=3d
              fi
            done
          elif [[ "${{ github.event_name }}" == 'workflow_dispatch' && "${{ steps.test_zero_downtime.outcome }}" != 'success' && "${{ github.event.inputs.deleteOnFinish }}" == 'false' ]]; then
            for namespace in "${namespaces[@]}"; do
              if [[ ! -z "${namespace// }" ]]; then
                echo "Annotating namespace $namespace with Janitor TTL of 3 hours..."
                kubectl annotate namespace "$namespace" janitor/ttl=3h
              fi
            done
          
            for crb in "${clusterrolebindings[@]}"; do
              if [[ ! -z "${crb// }" ]]; then
                echo "Annotating clusterrolebinding $crb with Janitor TTL of 3 hours..."
                kubectl annotate clusterrolebinding "$crb" janitor/ttl=3h
              fi
            done
          else
            for namespace in "${namespaces[@]}"; do
              if [[ ! -z "${namespace// }" ]]; then
                echo "Deleting namespace $namespace ..."
                kubectl delete namespace "$namespace" --wait=false
              fi
            done
          
            for crb in "${clusterrolebindings[@]}"; do
              if [[ ! -z "${crb// }" ]]; then
                echo "Deleting clusterrolebinding $crb ..."
                kubectl delete clusterrolebindings "$crb" --wait=false
              fi
            done
          fi

      - name: Upload support archive as an artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: support-archive
          path: support-archive/*.zip

      # Upload the original go test log as an artifact for later review.
      - name: Upload go test log
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: go-test-log
          path: temp_res/gotest.xml
          if-no-files-found: error

      - name: Upload go test summary
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: summary
          path: temp_res/test-summary.md
          if-no-files-found: error

      # Upload the original cypress test log as an artifact for later review.
      - name: Upload cypress test log
        uses: actions/upload-artifact@v3
        if: always() && github.event.inputs.testUI == 'true'
        with:
          name: ui-test-log
          path: /tmp/uitest.log
          if-no-files-found: error

      - name: Overwrite VERSION String for nightly builds
        if: env.BRANCH == 'master'
        run: |
          # use VERSION.DATETIME for the cli version (e.g., nightly build)
          VERSION=${VERSION}.${DATETIME}
          # overwrite VERSION
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Print Build-Config
        if: always()
        run: |
          echo VERSION=${VERSION}
          echo BRANCH=${BRANCH}

      - name: Formulate bug issue on errors
        id: formulate_bug_issue
        if: always() && steps.test_zero_downtime.outcome != 'success'
        env:
          FINAL: ${{ steps.report.outputs.FINAL }}
        run: |
            echo "ZERO DOWNTIME TESTS FAILED! - Creating GH issue description now..."
          
            # create a markdown file that contains details about the error
            echo "---" > zd-test-failed.md
            echo "title: Zero Downtime tests failed" >> zd-test-failed.md
            echo "labels: type:critical" >> zd-test-failed.md
            echo "---" >> zd-test-failed.md
            echo "" >> zd-test-failed.md
            echo "* Link to run: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> zd-test-failed.md
          
            echo "$FINAL" >> zd-test-failed.md
          
            echo "" >> zd-test-failed.md
            echo "Note: This issue was auto-generated from [zero-downtime-tests.yml](https://github.com/keptn/keptn/blob/master/.github/workflows/zero-downtime-tests.yml)" >> zd-test-failed.md
            cat zd-test-failed.md

      - name: Create issue if tests failed
        if: always() && github.event_name == 'schedule' && steps.test_zero_downtime.outcome != 'success'
        uses: JasonEtco/create-an-issue@v2.6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          filename: zd-test-failed.md
  calculate-total-runtime:
    name: End-of-Pipeline Metrics
    if: always()
    needs:
      - calculate-queue-time
      - zd-test
    uses: ./.github/workflows/end-of-pipeline-metrics.yml
    with:
      workflow_name: "Zero Downtime Tests"
      branch: ${{ github.ref }}
    secrets:
      monitoring_api_token: ${{ secrets.MONITORING_API_TOKEN }}
      monitoring_tenant_url: ${{ secrets.MONITORING_TENANT_URL }}
