name: CI
on:
  # always execute docker build when something is pushed to master or release-* branches
  push:
    branches:
      - 'master'
      - 'release-*'
  # in addition, execute for pull requests to those branches
  pull_request:
    branches:
      - 'master'
      - 'release-*'
  workflow_dispatch: # run CI when triggered manually
env:
  GO_VERSION: ^1.16
defaults:
  run:
    shell: bash
jobs:
  prepare_ci_run:
    name: Prepare CI Run
    # Prepare CI Run looks at what has been changed in this commit/PR/... and determines which artifacts should be
    # built afterwards (in other jobs that depend on this one).
    runs-on: ubuntu-20.04
    outputs: # declare what this job outputs (so it can be re-used for other jobs)
      # build config
      BUILD_EVERYTHING: ${{ steps.build_everything.outputs.BUILD_EVERYTHING }}
      BUILD_INSTALLER: ${{ steps.check_modified_files.outputs.BUILD_INSTALLER }}
      BUILD_API: ${{ steps.check_modified_files.outputs.BUILD_API }}
      BUILD_CLI: ${{ steps.check_modified_files.outputs.BUILD_CLI }}
      BUILD_OS_ROUTE_SVC: ${{ steps.check_modified_files.outputs.BUILD_OS_ROUTE_SVC }}
      BUILD_BRIDGE: ${{ steps.check_modified_files.outputs.BUILD_BRIDGE }}
      BUILD_JMETER: ${{ steps.check_modified_files.outputs.BUILD_JMETER }}
      BUILD_HELM_SVC: ${{ steps.check_modified_files.outputs.BUILD_HELM_SVC }}
      BUILD_APPROVAL_SVC: ${{ steps.check_modified_files.outputs.BUILD_APPROVAL_SVC }}
      BUILD_DISTRIBUTOR: ${{ steps.check_modified_files.outputs.BUILD_DISTRIBUTOR }}
      BUILD_SHIPYARD_CONTROLLER: ${{ steps.check_modified_files.outputs.BUILD_SHIPYARD_CONTROLLER }}
      BUILD_SECRET_SVC: ${{ steps.check_modified_files.outputs.BUILD_SECRET_SVC }}
      BUILD_CONFIGURATION_SVC: ${{ steps.check_modified_files.outputs.BUILD_CONFIGURATION_SVC }}
      BUILD_REMEDIATION_SVC: ${{ steps.check_modified_files.outputs.BUILD_REMEDIATION_SVC }}
      BUILD_LIGHTHOUSE_SVC: ${{ steps.check_modified_files.outputs.BUILD_LIGHTHOUSE_SVC }}
      BUILD_MONGODB_DS: ${{ steps.check_modified_files.outputs.BUILD_MONGODB_DS }}
      BUILD_STATISTICS_SVC: ${{ steps.check_modified_files.outputs.BUILD_STATISTICS_SVC }}
      changed_files: ${{ steps.changed_files.outputs.all }}
      # some env variables
      KUBE_CONSTRAINTS: ${{ steps.output_kube_constraints.outputs.KUBE_CONSTRAINTS }}
      # metadata
      GIT_SHA: ${{ steps.extract_branch.outputs.GIT_SHA }}
      BRANCH: ${{ steps.extract_branch.outputs.BRANCH }}
      BRANCH_SLUG: ${{ steps.extract_branch.outputs.BRANCH_SLUG }}
      VERSION: ${{ steps.get_version.outputs.VERSION }}
      KEPTN_SPEC_VERSION: ${{ steps.get_version.outputs.KEPTN_SPEC_VERSION }}
      DATE: ${{ steps.get_datetime.outputs.DATE }}
      TIME: ${{ steps.get_datetime.outputs.TIME }}
      DATETIME: ${{ steps.get_datetime.outputs.DATETIME }}

    steps:
      - name: Prevent PR Build on Release Branch
        # if you create a PR from release-* to anything else, there is usually a push-build in action, allowing
        # us to cancel the PR build
        if: github.event_name == 'pull_request'
        run: |
          if [[ "$GITHUB_HEAD_REF" == "release-"* ]]; then
            echo "::error::Failing CI Build for Pull Request on purpose, as there is a push build"
            exit 1
          fi

      - name: Check out code
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0 # need to checkout "all commits" for certain features to work (e.g., get all changed files)
          submodules: 'true'

      - name: Load CI Environment from .ci_env
        id: load_ci_env
        uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: .ci_env

      - name: Output KUBE_CONSTRAINTS
        id: output_kube_constraints
        run: echo "##[set-output name=KUBE_CONSTRAINTS;]$(echo ${KUBE_CONSTRAINTS})"

      - name: Get changed files
        id: changed_files
        uses: jitterbit/get-changed-files@v1
        continue-on-error: true

      - name: Process all artifacts (for push on master/release branches)
        if: (github.event_name == 'push') || (github.event_name == 'workflow_dispatch') || (contains(github.event.pull_request.labels.*.name, 'CI:trigger-build-everything'))
        id: build_everything
        run: |
          BUILD_EVERYTHING=true
          echo "##[set-output name=BUILD_EVERYTHING;]$(echo ${BUILD_EVERYTHING})"

      - name: Process only certain artifacts based on changed files (for PRs only)
        if: github.event_name == 'pull_request'
        id: check_modified_files
        run: |
          # initialize variables with false (make sure they are also set in needs.prepare_ci_run.outputs !!!)
          BUILD_INSTALLER=false
          BUILD_API=false
          BUILD_CLI=false
          BUILD_OS_ROUTE_SVC=false
          BUILD_BRIDGE=false
          BUILD_JMETER=false
          BUILD_HELM_SVC=false
          BUILD_APPROVAL_SVC=false
          BUILD_DISTRIBUTOR=false
          BUILD_SHIPYARD_CONTROLLER=false
          BUILD_SECRET_SVC=false
          BUILD_CONFIGURATION_SVC=false
          BUILD_REMEDIATION_SVC=false
          BUILD_LIGHTHOUSE_SVC=false
          BUILD_MONGODB_DS=false
          BUILD_STATISTICS_SVC=false

          echo "changed files:"
          echo "${{ steps.changed_files.outputs.all }}"

          for changed_file in ${{ steps.changed_files.outputs.all }}; do
            echo "Checking if $changed_file leads to a build..."

            if [[ $changed_file == "${INSTALLER_FOLDER}"* ]]; then
              echo "Found changes in Installer"
              BUILD_INSTALLER=true
            fi

            if [[ $changed_file == "${CLI_FOLDER}"* ]]; then
              echo "Found changes in CLI"
              BUILD_CLI=true
            fi

            if [[ $changed_file == "${API_FOLDER}"* ]]; then
              echo "Found changes in API"
              BUILD_API=true
            fi

            if [[ $changed_file == "${OS_ROUTE_SVC_FOLDER}"* ]]; then
              echo "Found changes in OS Route Service"
              BUILD_OS_ROUTE_SVC=true
            fi

            if [[ $changed_file == "${BRIDGE_FOLDER}"* ]]; then
              echo "Found changes in Bridge"
              BUILD_BRIDGE=true
            fi

            if [[ $changed_file == "${JMETER_SVC_FOLDER}"* ]]; then
              BUILD_JMETER=true
            fi

            if [[ $changed_file == "${HELM_SVC_FOLDER}"* ]]; then
              BUILD_HELM_SVC=true
            fi

            if [[ $changed_file == "${APPROVAL_SVC_FOLDER}"* ]]; then
              BUILD_APPROVAL_SVC=true
            fi

            if [[ $changed_file == "${DISTRIBUTOR_FOLDER}"* ]]; then
              BUILD_DISTRIBUTOR=true
            fi

            if [[ $changed_file == "${SHIPYARD_CONTROLLER_FOLDER}"* ]]; then
              BUILD_SHIPYARD_CONTROLLER=true
            fi

            if [[ $changed_file == "${SECRET_SVC_FOLDER}"* ]]; then
              BUILD_SECRET_SVC=true
            fi

            if [[ $changed_file == "${CONFIGURATION_SVC_FOLDER}"* ]]; then
              BUILD_CONFIGURATION_SVC=true
            fi

            if [[ $changed_file == "${REMEDIATION_SVC_FOLDER}"* ]]; then
              BUILD_REMEDIATION_SVC=true
            fi

            if [[ $changed_file == "${LIGHTHOUSE_SVC_FOLDER}"* ]]; then
              BUILD_LIGHTHOUSE_SVC=true
            fi

            if [[ $changed_file == "${MONGODB_DS_FOLDER}"* ]]; then
              BUILD_MONGODB_DS=true
            fi

            if [[ $changed_file == "${STATISTICS_SVC_FOLDER}"* ]]; then
              BUILD_STATISTICS_SVC=true
            fi
          done

          # print job outputs (make sure they are also set in needs.prepare_ci_run.outputs !!!)
          echo "::set-output name=BUILD_INSTALLER::$BUILD_INSTALLER"
          echo "::set-output name=BUILD_API::$BUILD_API"
          echo "::set-output name=BUILD_CLI::$BUILD_CLI"
          echo "::set-output name=BUILD_OS_ROUTE_SVC::$BUILD_OS_ROUTE_SVC"
          echo "::set-output name=BUILD_BRIDGE::$BUILD_BRIDGE"
          echo "::set-output name=BUILD_JMETER::$BUILD_JMETER"
          echo "::set-output name=BUILD_HELM_SVC::$BUILD_HELM_SVC"
          echo "::set-output name=BUILD_APPROVAL_SVC::$BUILD_APPROVAL_SVC"
          echo "::set-output name=BUILD_DISTRIBUTOR::$BUILD_DISTRIBUTOR"
          echo "::set-output name=BUILD_SHIPYARD_CONTROLLER::$BUILD_SHIPYARD_CONTROLLER"
          echo "::set-output name=BUILD_SECRET_SVC::$BUILD_SECRET_SVC"
          echo "::set-output name=BUILD_CONFIGURATION_SVC::$BUILD_CONFIGURATION_SVC"
          echo "::set-output name=BUILD_REMEDIATION_SVC::$BUILD_REMEDIATION_SVC"
          echo "::set-output name=BUILD_LIGHTHOUSE_SVC::$BUILD_LIGHTHOUSE_SVC"
          echo "::set-output name=BUILD_MONGODB_DS::$BUILD_MONGODB_DS"
          echo "::set-output name=BUILD_STATISTICS_SVC::$BUILD_STATISTICS_SVC"

          echo "BUILD_INSTALLER: ${{ env.BUILD_INSTALLER }}"
          echo "BUILD_API: ${{ env.BUILD_API }}"
          echo "BUILD_CLI: ${{ env.BUILD_CLI }}"
          echo "BUILD_OS_ROUTE_SVC: ${{ env.BUILD_OS_ROUTE_SVC }}"
          echo "BUILD_BRIDGE: ${{ env.BUILD_BRIDGE }}"
          echo "BUILD_JMETER: ${{ env.BUILD_JMETER }}"
          echo "BUILD_HELM_SVC: ${{ env.BUILD_HELM_SVC }}"
          echo "BUILD_APPROVAL_SVC: ${{ env.BUILD_APPROVAL_SVC }}"
          echo "BUILD_DISTRIBUTOR: ${{ env.BUILD_DISTRIBUTOR }}"
          echo "BUILD_SHIPYARD_CONTROLLER: ${{ env.BUILD_SHIPYARD_CONTROLLER }}"
          echo "BUILD_SECRET_SVC: ${{ env.BUILD_SECRET_SVC }}"
          echo "BUILD_CONFIGURATION_SVC: ${{ env.BUILD_CONFIGURATION_SVC }}"
          echo "BUILD_REMEDIATION_SVC: ${{ env.BUILD_REMEDIATION_SVC }}"
          echo "BUILD_LIGHTHOUSE_SVC: ${{ env.BUILD_LIGHTHOUSE_SVC }}"
          echo "BUILD_MONGODB_DS: ${{ env.BUILD_MONGODB_DS }}"
          echo "BUILD_STATISTICS_SVC: ${{ env.BUILD_STATISTICS_SVC }}"

      - name: Extract branch name
        id: extract_branch
        # see https://github.com/keptn/gh-action-extract-branch-name for details
        uses: keptn/gh-action-extract-branch-name@main

      - name: 'Get Previous tag'
        id: get_previous_tag
        uses: "WyriHaximus/github-action-get-previous-tag@v1.1"
      - name: 'Get next patch version'
        id: get_next_semver_tag
        uses: "WyriHaximus/github-action-next-semvers@v1.1"
        with:
          version: ${{ steps.get_previous_tag.outputs.tag }}
      - name: Get the version
        id: get_version
        env:
          BRANCH: ${{ steps.extract_branch.outputs.BRANCH }}
          BRANCH_SLUG: ${{ steps.extract_branch.outputs.BRANCH_SLUG }}
        shell: bash
        run: |
          # determine version
          GIT_LAST_TAG=${{ steps.get_previous_tag.outputs.tag }}
          GIT_NEXT_TAG=${{ steps.get_next_semver_tag.outputs.patch }}
          echo "GIT_LAST_TAG=${GIT_LAST_TAG}, GIT_NEXT_TAG=${GIT_NEXT_TAG}"

          if [[ "$BRANCH" == "release-"* ]]; then
            # Release Branch: extract version from branch name
            VERSION=${BRANCH#"release-"}
            else
            if [[ "$BRANCH" == "master" ]]; then
              # master branch = latest
              VERSION="${GIT_NEXT_TAG}-dev"
            else
              # Feature/Development Branch - use last tag with branch slug
              VERSION="${GIT_NEXT_TAG}-dev-${BRANCH_SLUG}"
            fi
          fi

          # determine keptn spec version
          git submodule update --init
          cd specification
          KEPTN_SPEC_VERSION=$(git describe --tags)

          echo "VERSION=${VERSION}"
          echo "KEPTN_SPEC_VERSION=${KEPTN_SPEC_VERSION}"

          echo "##[set-output name=VERSION;]$(echo ${VERSION})"
          echo "##[set-output name=KEPTN_SPEC_VERSION;]$(echo ${KEPTN_SPEC_VERSION})"
      - name: Get current date and time
        id: get_datetime
        run: |
          echo "::set-output name=DATE::$(date +'%Y%m%d')"
          echo "::set-output name=TIME::$(date +'%H%M')"
          echo "::set-output name=DATETIME::$(date +'%Y%m%d')$(date +'%H%M')"

  store-output-in-build-config:
    name: "Store output of last step in build-config.env"
    needs: prepare_ci_run
    runs-on: ubuntu-20.04
    steps:
      - name: Create build config file
        env:
          BRANCH: ${{ needs.prepare_ci_run.outputs.BRANCH }}
          BRANCH_SLUG: ${{ needs.prepare_ci_run.outputs.BRANCH_SLUG }}
          BUILD_EVERYTHING: ${{ needs.prepare_ci_run.outputs.BUILD_EVERYTHING }}
          VERSION: ${{ needs.prepare_ci_run.outputs.VERSION }}
          DATETIME: ${{ needs.prepare_ci_run.outputs.DATE }}${{ needs.prepare_ci_run.outputs.TIME }}
          GIT_SHA: ${{ needs.prepare_ci_run.outputs.GIT_SHA }}
        run: |
          echo "BRANCH=${BRANCH}" >> build-config.env
          echo "BRANCH_SLUG=${BRANCH_SLUG}" >> build-config.env
          echo "BUILD_EVERYTHING=${BUILD_EVERYTHING}" >> build-config.env
          echo "VERSION=${VERSION}" >> build-config.env
          echo "DATETIME=${DATETIME}" >> build-config.env
          echo "GIT_SHA=${GIT_SHA}" >> build-config.env

      - name: Upload build config as artifact
        id: upload_build_config
        uses: actions/upload-artifact@v2
        with:
          name: build-config
          path: build-config.env

  ############################################################################
  # Unit tests                                                               #
  ############################################################################
  debug-job:
    name: Debugging
    runs-on: ubuntu-20.04
    needs: prepare_ci_run
    steps:
      - run: |
          echo "changed files:"
          echo "${{ needs.prepare_ci_run.outputs.changed_files.outputs.all }}"

          echo "BUILD_INSTALLER: ${{ needs.prepare_ci_run.outputs.BUILD_INSTALLER }}"
          echo "BUILD_API: ${{ needs.prepare_ci_run.outputs.BUILD_API }}"
          echo "BUILD_CLI: ${{ needs.prepare_ci_run.outputs.BUILD_CLI }}"
          echo "BUILD_OS_ROUTE_SVC: ${{ needs.prepare_ci_run.outputs.BUILD_OS_ROUTE_SVC }}"
          echo "BUILD_BRIDGE: ${{ needs.prepare_ci_run.outputs.BUILD_BRIDGE }}"
          echo "BUILD_JMETER: ${{ needs.prepare_ci_run.outputs.BUILD_JMETER }}"
          echo "BUILD_HELM_SVC: ${{ needs.prepare_ci_run.outputs.BUILD_HELM_SVC }}"
          echo "BUILD_APPROVAL_SVC: ${{ needs.prepare_ci_run.outputs.BUILD_APPROVAL_SVC }}"
          echo "BUILD_DISTRIBUTOR: ${{ needs.prepare_ci_run.outputs.BUILD_DISTRIBUTOR }}"
          echo "BUILD_SHIPYARD_CONTROLLER: ${{ needs.prepare_ci_run.outputs.BUILD_SHIPYARD_CONTROLLER }}"
          echo "BUILD_SECRET_SVC: ${{ needs.prepare_ci_run.outputs.BUILD_SECRET_SVC }}"
          echo "BUILD_CONFIGURATION_SVC: ${{ needs.prepare_ci_run.outputs.BUILD_CONFIGURATION_SVC }}"
          echo "BUILD_REMEDIATION_SVC: ${{ needs.prepare_ci_run.outputs.BUILD_REMEDIATION_SVC }}"
          echo "BUILD_LIGHTHOUSE_SVC: ${{ needs.prepare_ci_run.outputs.BUILD_LIGHTHOUSE_SVC }}"
          echo "BUILD_MONGODB_DS: ${{ needs.prepare_ci_run.outputs.BUILD_MONGODB_DS }}"
          echo "BUILD_STATISTICS_SVC: ${{ needs.prepare_ci_run.outputs.BUILD_STATISTICS_SVC }}"

  unit-tests-go-microservices:
    name: Unit Tests Go Microservices
    needs: prepare_ci_run
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        config:
          - artifact: "api"
            working-dir: "./api"
            should-run: "${{ needs.prepare_ci_run.outputs.BUILD_API }}"
            test-folders: "./handlers/... ./utils/..."
          - artifact: "openshift-route-service"
            working-dir: "./platform-support/openshift-route-service"
            should-run: "${{ needs.prepare_ci_run.outputs.BUILD_OS_ROUTE_SVC }}"
            test-folders: "./..."
            go-flags: "-race"
          - artifact: "jmeter-service"
            working-dir: "./jmeter-service"
            should-run: "${{ needs.prepare_ci_run.outputs.BUILD_JMETER }}"
            test-folders: "./..."
            go-flags: "-race"
          - artifact: "helm-service"
            working-dir: "./helm-service"
            should-run: "${{ needs.prepare_ci_run.outputs.BUILD_HELM_SVC }}"
            test-folders: "./..."
            go-flags: "-race"
          - artifact: "approval-service"
            working-dir: "./approval-service"
            should-run: "${{ needs.prepare_ci_run.outputs.BUILD_APPROVAL_SVC }}"
            test-folders: "./..."
            go-flags: "-race"
          - artifact: "distributor"
            working-dir: "./distributor"
            should-run: "${{ needs.prepare_ci_run.outputs.BUILD_DISTRIBUTOR }}"
            test-folders: "./..."
          - artifact: "shipyard-controller"
            working-dir: "./shipyard-controller"
            should-run: "${{ needs.prepare_ci_run.outputs.BUILD_SHIPYARD_CONTROLLER }}"
            test-folders: "./..."
          - artifact: "secret-service"
            working-dir: "./secret-service"
            should-run: "${{ needs.prepare_ci_run.outputs.BUILD_SECRET_SVC }}"
            test-folders: "./..."
          - artifact: "configuration-service"
            working-dir: "./configuration-service"
            should-run: "${{ needs.prepare_ci_run.outputs.BUILD_CONFIGURATION_SVC }}"
            test-folders: "./..."
          - artifact: "remediation-service"
            working-dir: "./remediation-service"
            should-run: "${{ needs.prepare_ci_run.outputs.BUILD_REMEDIATION_SVC }}"
            test-folders: "./..."
            go-flags: "-race"
          - artifact: "lighthouse-service"
            working-dir: "./lighthouse-service"
            should-run: "${{ needs.prepare_ci_run.outputs.BUILD_LIGHTHOUSE_SVC }}"
            test-folders: "./..."
          - artifact: "mongodb-datastore"
            working-dir: "./mongodb-datastore"
            should-run: "${{ needs.prepare_ci_run.outputs.BUILD_MONGODB_DS }}"
            test-folders: "./..."
            go-flags: "-race"
          - artifact: "statistics-service"
            working-dir: "./statistics-service"
            should-run: "${{ needs.prepare_ci_run.outputs.BUILD_STATISTICS_SVC }}"
            test-folders: "./..."
            go-flags: "-race"
    steps:
      - name: Set up Go 1.x
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (matrix.config.should-run == 'true')
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Checkout Code
        uses: actions/checkout@v2.3.4

      - name: Load CI Environment from .ci_env
        id: load_ci_env
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (matrix.config.should-run == 'true')
        uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: .ci_env

      # cache go modules
      - if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (matrix.config.should-run == 'true')
        uses: actions/cache@v2.1.6
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Test ${{ matrix.config.artifact }}
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (matrix.config.should-run == 'true')
        env:
          SHOULD_RUN: ${{ matrix.config.should-run }}
        run: |
          go test ${{ matrix.config.go-flags }} -coverprofile=coverage.txt -covermode=atomic -v ${{ matrix.config.test-folders }}
          bash <(curl -s https://codecov.io/bash) -c -F ${{ matrix.config.artifact }}
        working-directory: ${{ matrix.config.working-dir }}

  unit-tests-node:
    needs: prepare_ci_run
    name: Unit Tests Bridge/NodeJS
    runs-on: ubuntu-20.04
    steps:
      - name: Set up Node
        uses: actions/setup-node@v2.1.5
        with:
          node-version: 12.x
      - name: Checkout Code
        uses: actions/checkout@v2.3.4
      - uses: actions/cache@v2.1.6
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install npm libs
        run: |
          npm install -g codecov
          npm install -g libnpx@10.2.0
      - name: Load CI Environment from .ci_env
        id: load_ci_env
        uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: .ci_env
      - name: Test
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_BRIDGE == 'true')
        run: |
          npm install
          npm run test:ci
        working-directory: ./bridge
      - name: Coverage report
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_BRIDGE == 'true')
        run: bash <(curl -s https://codecov.io/bash) -c -F bridge


  unit-tests-cli:
    name: Unit Tests CLI (multi OS/arch)
    if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_CLI == 'true')
    needs: prepare_ci_run
    strategy:
      matrix:
        platform: [ ubuntu-20.04 ] #, macOS-11.0, windows-2019 ]
    runs-on: ${{ matrix.platform }}
    env:
      KUBE_CONSTRAINTS: ${{ needs.prepare_ci_run.outputs.KUBE_CONSTRAINTS }}
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Checkout Code
        uses: actions/checkout@v2.3.4

      # cache go modules
      - uses: actions/cache@v2.1.6
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-cli-${{ hashFiles('cli/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-cli

      - name: Test cli
        run: make test-unit-cli # go test -race -v  -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Coverage report
        run: bash <(curl -s https://codecov.io/bash) -c -F cli

  ############################################################################
  # Build CLI                                                                #
  ############################################################################
  build-cli:
    name: Build Keptn CLI
    needs: [prepare_ci_run, unit-tests-cli]
    if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_CLI == 'true')
    strategy:
      matrix:
        include: # see https://gist.github.com/asukakenji/f15ba7e588ac42795f421b48b8aede63#a-list-of-valid-goarch-values
          - platform: "ubuntu-20.04"
            GOOS: "linux"
            GOARCH: "amd64"
          - platform: "ubuntu-20.04"
            GOOS: "linux"
            GOARCH: "arm"
          - platform: "ubuntu-20.04"
            GOOS: "linux"
            GOARCH: "arm64"
          - platform: "macOS-11.0" # cross-compiling the CLI for macOS does not work - see https://github.com/keptn/keptn/issues/2738
            GOOS: "darwin"
            GOARCH: "amd64"
          - platform: "macOS-11.0" # cross-compiling the CLI for macOS does not work - see https://github.com/keptn/keptn/issues/2738
            GOOS: "darwin"
            GOARCH: "arm64"
          - platform: "ubuntu-20.04"
            GOOS: "windows"
            GOARCH: "amd64"
    env:
      KUBE_CONSTRAINTS: ${{ needs.prepare_ci_run.outputs.KUBE_CONSTRAINTS }}

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Checkout Code
        uses: actions/checkout@v2.3.4
      # cache go modules
      - uses: actions/cache@v2.1.6
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-cli-${{ hashFiles('cli/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-cli
      - name: Build cli
        env:
          PLATFORM: "${{ matrix.platform }}"
          GOARCH: "${{ matrix.GOARCH }}"
          GOOS: "${{ matrix.GOOS }}"
          BRANCH: ${{ needs.prepare_ci_run.outputs.BRANCH }}
          VERSION: ${{ needs.prepare_ci_run.outputs.VERSION }}
          DATETIME: ${{ needs.prepare_ci_run.outputs.DATE }}${{ needs.prepare_ci_run.outputs.TIME }}
          GIT_SHA: ${{ needs.prepare_ci_run.outputs.GIT_SHA }}
        run: |
          FILE_ENDING=""
          # overwrite file ending for windows binaries
          if [[ "$GOOS" == "windows" ]]; then
            FILE_ENDING=".exe"
          fi

          # determine output file name based on version, go os, architecture
          OUTPUT_EXECUTABLE_NAME="keptn-${VERSION}-${GOOS}-${GOARCH}${FILE_ENDING}"
          OUTPUT_ARCHIVE_NAME="keptn-${VERSION}-${GOOS}-${GOARCH}" # no need for file-ending in the archive name

          if [[ "$BRANCH" == "master" ]]; then
            # use VERSION.DATETIME for the cli version (e.g., nightly build)
            VERSION=${VERSION}.${DATETIME}
          fi

          if [[ "$GOOS" == "linux" ]]; then
            # enable static build for linux
            export CGO_ENABLED=0
          fi

          if [[ "$GOOS" == "darwin" ]]; then
            # enable CGO for compiling docker credential helper natively
            export CGO_ENABLED=1
          fi

          # build the binary using makefile
          make build-cli OUTPUT_EXECUTABLE_NAME="$OUTPUT_EXECUTABLE_NAME"
          # verify output file exists
          ls bin/${OUTPUT_EXECUTABLE_NAME}

          # create a .tar.gz archive of the binary
          mkdir dist
          tar -zcvf dist/${OUTPUT_ARCHIVE_NAME}.tar.gz -C bin ${OUTPUT_EXECUTABLE_NAME}
      - name: Upload Keptn CLI as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: keptn-cli
          path: dist/

  ############################################################################
  # Build Helm Charts (only relevant for build_everything)                   #
  ############################################################################
  helm_charts_build:
    needs: prepare_ci_run
    name: Build Helm Charts
    if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_INSTALLER == 'true')
    runs-on: ubuntu-20.04
    env:
      BRANCH: ${{ needs.prepare_ci_run.outputs.BRANCH }}
      VERSION: ${{ needs.prepare_ci_run.outputs.VERSION }}
      KEPTN_SPEC_VERSION: ${{ needs.prepare_ci_run.outputs.KEPTN_SPEC_VERSION }}
      DATETIME: ${{ needs.prepare_ci_run.outputs.DATE }}${{ needs.prepare_ci_run.outputs.TIME }}
      GIT_SHA: ${{ needs.prepare_ci_run.outputs.GIT_SHA }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2.3.4

      - name: Load CI Environment from .ci_env
        id: load_ci_env
        uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: .ci_env

      - name: Build Helm Charts
        id: build_helm_charts
        run: |
          if [[ "$BRANCH" == "master" ]] || [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            # use VERSION.DATETIME for the image tag (e.g., nightly build)
            ./gh-actions-scripts/build_helm_charts.sh "${VERSION}" "${VERSION}.${DATETIME}" "${KEPTN_SPEC_VERSION}"
          else
            # just use VERSION for the image tag
            ./gh-actions-scripts/build_helm_charts.sh "${VERSION}" "${VERSION}" "${KEPTN_SPEC_VERSION}"
          fi

      - name: Upload Helm Chart as an artifact
        id: upload_helm_chart
        uses: actions/upload-artifact@v2
        with:
          name: keptn-installer
          path: keptn-charts/*.tgz

  ############################################################################
  # Build Docker Images                                                      #
  ############################################################################
  prepare_github_pr_comment:
    needs: [prepare_ci_run, unit-tests-go-microservices, unit-tests-node]
    name: Prepare GitHub Report Comment
    runs-on: ubuntu-20.04
    steps:
      - name: Create PR comment
        if: (github.event_name == 'pull_request') && (github.event.pull_request.head.repo.full_name == github.repository)
        # only run if this is not a fork - see https://github.com/marocchino/sticky-pull-request-comment/issues/227
        # note: GH does not allow to access secrets for PRs from a forked repositories due to security reasons
        # that's fine, but it means we can't comment on the PR in this case
        uses: marocchino/sticky-pull-request-comment@v2.1.0
        continue-on-error: true
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          message: "Docker Build Report"
          recreate: true

  docker_build:
    needs: [prepare_ci_run, unit-tests-go-microservices, unit-tests-node, prepare_github_pr_comment]
    name: Docker Build
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        config:
          - ARTIFACT: "api"
            BUILD_FOLDER: "api/"
            SHOULD_BUILD: "${{ needs.prepare_ci_run.outputs.BUILD_API }}"
          - ARTIFACT: "bridge2"
            BUILD_FOLDER: "bridge/"
            SHOULD_BUILD: "${{ needs.prepare_ci_run.outputs.BUILD_BRIDGE }}"
          - ARTIFACT: "distributor"
            BUILD_FOLDER: "distributor/"
            SHOULD_BUILD: "${{ needs.prepare_ci_run.outputs.BUILD_DISTRIBUTOR }}"
          - ARTIFACT: "jmeter-service"
            BUILD_FOLDER: "jmeter-service/"
            SHOULD_BUILD: "${{ needs.prepare_ci_run.outputs.BUILD_JMETER }}"
          - ARTIFACT: "helm-service"
            BUILD_FOLDER: "helm-service/"
            SHOULD_BUILD: "${{ needs.prepare_ci_run.outputs.BUILD_HELM_SVC }}"
          - ARTIFACT: "approval-service"
            BUILD_FOLDER: "approval-service/"
            SHOULD_BUILD: "${{ needs.prepare_ci_run.outputs.BUILD_APPROVAL_SVC }}"
          - ARTIFACT: "openshift-route-service"
            BUILD_FOLDER: "platform-support/openshift-route-service/"
            SHOULD_BUILD: "${{ needs.prepare_ci_run.outputs.BUILD_OS_ROUTE_SVC }}"
          - ARTIFACT: "shipyard-controller"
            BUILD_FOLDER: "shipyard-controller/"
            SHOULD_BUILD: "${{ needs.prepare_ci_run.outputs.BUILD_SHIPYARD_CONTROLLER }}"
          - ARTIFACT: "secret-service"
            BUILD_FOLDER: "secret-service/"
            SHOULD_BUILD: "${{ needs.prepare_ci_run.outputs.BUILD_SECRET_SVC }}"
          - ARTIFACT: "configuration-service"
            BUILD_FOLDER: "configuration-service/"
            SHOULD_BUILD: "${{ needs.prepare_ci_run.outputs.BUILD_CONFIGURATION_SVC }}"
          - ARTIFACT: "remediation-service"
            BUILD_FOLDER: "remediation-service/"
            SHOULD_BUILD: "${{ needs.prepare_ci_run.outputs.BUILD_REMEDIATION_SVC }}"
          - ARTIFACT: "lighthouse-service"
            BUILD_FOLDER: "lighthouse-service/"
            SHOULD_BUILD: "${{ needs.prepare_ci_run.outputs.BUILD_LIGHTHOUSE_SVC }}"
          - ARTIFACT: "mongodb-datastore"
            BUILD_FOLDER: "mongodb-datastore/"
            SHOULD_BUILD: "${{ needs.prepare_ci_run.outputs.BUILD_MONGODB_DS }}"
          - ARTIFACT: "statistics-service"
            BUILD_FOLDER: "statistics-service/"
            SHOULD_BUILD: "${{ needs.prepare_ci_run.outputs.BUILD_STATISTICS_SVC }}"
    env:
      BRANCH: ${{ needs.prepare_ci_run.outputs.BRANCH }}
      VERSION: ${{ needs.prepare_ci_run.outputs.VERSION }}
      DATETIME: ${{ needs.prepare_ci_run.outputs.DATE }}${{ needs.prepare_ci_run.outputs.TIME }}
      GIT_SHA: ${{ needs.prepare_ci_run.outputs.GIT_SHA }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2.3.4

      - name: Load CI Environment from .ci_env
        id: load_ci_env
        uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: .ci_env

      - id: docker_login
        name: Docker Login
        # only run docker login on pushes; also for PRs, but only if this is not a fork
        if: (github.event_name == 'push') || (github.event_name == 'workflow_dispatch') || (github.event.pull_request.head.repo.full_name == github.repository)
        # note: GH does not allow to access secrets for PRs from a forked repositories due to security reasons
        # that's fine, but it means we can't push images to dockerhub
        env:
          REGISTRY_USER: ${{ secrets.REGISTRY_USER }}
          REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
        run: echo "$REGISTRY_PASSWORD" | docker login --username $REGISTRY_USER --password-stdin

      - id: docker_cache
        name: Docker Cache
        uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true
        with:
          key: docker-build-cache-${{ github.workflow }}-${{ matrix.config.ARTIFACT }}-{hash}
          restore-keys: |
            docker-build-cache-${{ github.workflow }}-${{ matrix.config.ARTIFACT }}

      - id: docker_build_image
        name: "Docker Build keptn/${{ matrix.config.ARTIFACT }}"
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (matrix.config.SHOULD_BUILD == 'true')
        env:
          VERSION: ${{ env.VERSION }}
          DATETIME: ${{ env.DATETIME }}
          IMAGE: keptn/${{ matrix.config.ARTIFACT }}
          DOCKER_FOLDER: ${{ matrix.config.BUILD_FOLDER }}
        run: |
          DATETIME=$(date +'%Y%m%d')$(date +'%H%M')
          docker build "${DOCKER_FOLDER}" -t "${IMAGE}:${VERSION}.${DATETIME}" -t "${IMAGE}:${VERSION}" --build-arg version="${VERSION}"
          docker push "${IMAGE}:${VERSION}.${DATETIME}" && docker push "${IMAGE}:${VERSION}"

          if [[ $? -ne 0 ]]; then
            echo "::warning file=${DOCKER_FOLDER}/Dockerfile::Failed to push ${IMAGE}:${VERSION}.${DATETIME} to DockerHub, continuing anyway"
            report="* Failed to push ${IMAGE}:${VERSION}.${DATETIME} and ${IMAGE}:${VERSION} (Source: ${DOCKER_FOLDER})"
          else
            report="* Pushed ${IMAGE}:${VERSION}.${DATETIME} and ${IMAGE}:${VERSION} (Source: ${DOCKER_FOLDER})"
          fi

          echo "::set-output name=build-report::$report"

      - name: Report Docker Build to PR
        if: always() && (github.event_name == 'pull_request') && (github.event.pull_request.head.repo.full_name == github.repository)
        # only run if this is not a fork - see https://github.com/marocchino/sticky-pull-request-comment/issues/227
        # note: GH does not allow to access secrets for PRs from a forked repositories due to security reasons
        # that's fine, but it means we can't comment on the PR in this case
        uses: marocchino/sticky-pull-request-comment@v2.1.0
        continue-on-error: true
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          message: ${{ steps.docker_build_image.outputs.build-report }}
          append: true

      - name: Delete PR comment on failure
        if: failure() && (github.event_name == 'pull_request') && (github.event.pull_request.head.repo.full_name == github.repository)
        # only run if this is not a fork - see https://github.com/marocchino/sticky-pull-request-comment/issues/227
        # note: GH does not allow to access secrets for PRs from a forked repositories due to security reasons
        # that's fine, but it means we can't comment on the PR in this case
        uses: marocchino/sticky-pull-request-comment@v2.1.0
        continue-on-error: true
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          delete: true

      - id: docker_logout
        if: always()
        name: Docker logout
        run: |
          docker logout
