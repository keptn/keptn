name: CI
on:
  # always execute docker build when something is pushed to master or release-* branches
  push:
    branches:
      - 'master'
      - 'release-*'
  # in addition, execute for pull requests to those branches
  pull_request:
    branches:
      - 'master'
      - 'release-*'
    type: [labeled]
  workflow_dispatch: # run CI when triggered manually

defaults:
  run:
    shell: bash
jobs:
  prepare_ci_run:
    name: Prepare CI Run
    # Prepare CI Run looks at what has been changed in this commit/PR/... and determines which artifacts should be
    # built afterwards (in other jobs that depend on this one).
    runs-on: ubuntu-20.04
    outputs: # declare what this job outputs (so it can be re-used for other jobs)
      # build config
      BUILD_EVERYTHING: ${{ steps.build_everything.outputs.BUILD_EVERYTHING }}
      BUILD_INSTALLER: ${{ steps.check_modified_files.outputs.BUILD_INSTALLER }}
      BUILD_API: ${{ steps.check_modified_files.outputs.BUILD_API }}
      BUILD_CLI: ${{ steps.check_modified_files.outputs.BUILD_CLI }}
      BUILD_OS_ROUTE_SVC: ${{ steps.check_modified_files.outputs.BUILD_OS_ROUTE_SVC }}
      BUILD_BRIDGE: ${{ steps.check_modified_files.outputs.BUILD_BRIDGE }}
      BUILD_JMETER: ${{ steps.check_modified_files.outputs.BUILD_JMETER }}
      BUILD_HELM_SVC: ${{ steps.check_modified_files.outputs.BUILD_HELM_SVC }}
      BUILD_APPROVAL_SVC: ${{ steps.check_modified_files.outputs.BUILD_APPROVAL_SVC }}
      BUILD_DISTRIBUTOR: ${{ steps.check_modified_files.outputs.BUILD_DISTRIBUTOR }}
      BUILD_EVENTBROKER: ${{ steps.check_modified_files.outputs.BUILD_EVENTBROKER }}
      BUILD_SHIPYARD_CONTROLLER: ${{ steps.check_modified_files.outputs.BUILD_SHIPYARD_CONTROLLER }}
      BUILD_SECRET_SVC: ${{ steps.check_modified_files.outputs.BUILD_SECRET_SVC }}
      BUILD_CONFIGURATION_SVC: ${{ steps.check_modified_files.outputs.BUILD_CONFIGURATION_SVC }}
      BUILD_REMEDIATION_SVC: ${{ steps.check_modified_files.outputs.BUILD_REMEDIATION_SVC }}
      BUILD_LIGHTHOUSE_SVC: ${{ steps.check_modified_files.outputs.BUILD_LIGHTHOUSE_SVC }}
      BUILD_MONGODB_DS: ${{ steps.check_modified_files.outputs.BUILD_MONGODB_DS }}
      BUILD_STATISTICS_SVC: ${{ steps.check_modified_files.outputs.BUILD_STATISTICS_SVC }}
      # some env variables
      KUBE_CONSTRAINTS: ${{ steps.output_kube_constraints.outputs.KUBE_CONSTRAINTS }}
      # metadata
      GIT_SHA: ${{ steps.extract_branch.outputs.GIT_SHA }}
      BRANCH: ${{ steps.extract_branch.outputs.BRANCH }}
      BRANCH_SLUG: ${{ steps.extract_branch.outputs.BRANCH_SLUG }}
      VERSION: ${{ steps.get_version.outputs.VERSION }}
      KEPTN_SPEC_VERSION: ${{ steps.get_version.outputs.KEPTN_SPEC_VERSION }}
      DATE: ${{ steps.get_datetime.outputs.DATE }}
      TIME: ${{ steps.get_datetime.outputs.TIME }}
      DATETIME: ${{ steps.get_datetime.outputs.DATETIME }}

    steps:
      - name: Prevent PR Build on Release Branch
        # if you create a PR from release-* to anything else, there is usually a push-build in action, allowing
        # us to cancel the PR build
        if: github.event_name == 'pull_request'
        run: |
          if [[ "$GITHUB_HEAD_REF" == "release-"* ]]; then
            echo "::error::Failing CI Build for Pull Request on purpose, as there is a push build"
            exit 1
          fi

      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # need to checkout "all commits" for certain features to work (e.g., get all changed files)
          submodules: 'true'

      - name: Load CI Environment from .ci_env
        id: load_ci_env
        uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: .ci_env

      - name: Output KUBE_CONSTRAINTS
        id: output_kube_constraints
        run: echo "##[set-output name=KUBE_CONSTRAINTS;]$(echo ${KUBE_CONSTRAINTS})"

      - name: Get changed files
        id: changed_files
        uses: jitterbit/get-changed-files@v1
        continue-on-error: true

      - name: Process all artifacts (for push on master/release branches)
        if: (github.event_name == 'push') || (github.event_name == 'workflow_dispatch') || (contains(github.event.pull_request.labels.*.name, 'CI:trigger-build-everything'))
        id: build_everything
        run: |
          BUILD_EVERYTHING=true
          echo "##[set-output name=BUILD_EVERYTHING;]$(echo ${BUILD_EVERYTHING})"

      - name: Process only certain artifacts based on changed files (for PRs only)
        if: github.event_name == 'pull_request'
        id: check_modified_files
        run: |
          # initialize variables with false (make sure they are also set in needs.prepare_ci_run.outputs !!!)
          BUILD_INSTALLER=false
          BUILD_API=false
          BUILD_CLI=false
          BUILD_OS_ROUTE_SVC=false
          BUILD_BRIDGE=false
          BUILD_JMETER=false
          BUILD_HELM_SVC=false
          BUILD_APPROVAL_SVC=false
          BUILD_DISTRIBUTOR=false
          BUILD_EVENTBROKER=false
          BUILD_SHIPYARD_CONTROLLER=false
          BUILD_SECRET_SVC=false
          BUILD_CONFIGURATION_SVC=false
          BUILD_REMEDIATION_SVC=false
          BUILD_LIGHTHOUSE_SVC=false
          BUILD_MONGODB_DS=false
          BUILD_STATISTICS_SVC=false

          for changed_file in ${{ steps.changed_files.outputs.all }}; do
            echo "Checking if $changed_file leads to a build..."

            if [[ $changed_file == "${INSTALLER_FOLDER}"* ]]; then
              echo "Found changes in Installer"
              BUILD_INSTALLER=true
            fi

            if [[ $changed_file == "${CLI_FOLDER}"* ]]; then
              echo "Found changes in CLI"
              BUILD_CLI=true
            fi

            if [[ $changed_file == "${API_FOLDER}"* ]]; then
              echo "Found changes in API"
              BUILD_API=true
            fi

            if [[ $changed_file == "${OS_ROUTE_SVC_FOLDER}"* ]]; then
              echo "Found changes in OS Route Service"
              BUILD_OS_ROUTE_SVC=true
            fi

            if [[ $changed_file == "${BRIDGE_FOLDER}"* ]]; then
              echo "Found changes in Bridge"
              BUILD_BRIDGE=true
            fi

            if [[ $changed_file == "${JMETER_SVC_FOLDER}"* ]]; then
              BUILD_JMETER=true
            fi

            if [[ $changed_file == "${HELM_SVC_FOLDER}"* ]]; then
              BUILD_HELM_SVC=true
            fi

            if [[ $changed_file == "${APPROVAL_SVC_FOLDER}"* ]]; then
              BUILD_APPROVAL_SVC=true
            fi

            if [[ $changed_file == "${DISTRIBUTOR_FOLDER}"* ]]; then
              BUILD_DISTRIBUTOR=true
            fi

            if [[ $changed_file == "${EVENTBROKER_FOLDER}"* ]]; then
              BUILD_EVENTBROKER=true
            fi

            if [[ $changed_file == "${SHIPYARD_CONTROLLER_FOLDER}"* ]]; then
              BUILD_SHIPYARD_CONTROLLER=true
            fi

            if [[ $changed_file == "${SECRET_SVC_FOLDER}"* ]]; then
              BUILD_SECRET_SVC=true
            fi

            if [[ $changed_file == "${CONFIGURATION_SVC_FOLDER}"* ]]; then
              BUILD_CONFIGURATION_SVC=true
            fi

            if [[ $changed_file == "${REMEDIATION_SVC_FOLDER}"* ]]; then
              BUILD_REMEDIATION_SVC=true
            fi

            if [[ $changed_file == "${LIGHTHOUSE_SVC_FOLDER}"* ]]; then
              BUILD_LIGHTHOUSE_SVC=true
            fi

            if [[ $changed_file == "${MONGODB_DS_FOLDER}"* ]]; then
              BUILD_MONGODB_DS=true
            fi

            if [[ $changed_file == "${STATISTICS_SVC_FOLDER}"* ]]; then
              BUILD_STATISTICS_SVC=true
            fi
          done

          # print job outputs (make sure they are also set in needs.prepare_ci_run.outputs !!!)
          echo "##[set-output name=BUILD_INSTALLER;]$(echo ${BUILD_INSTALLER})"
          echo "##[set-output name=BUILD_API;]$(echo ${BUILD_API})"
          echo "##[set-output name=BUILD_CLI;]$(echo ${BUILD_CLI})"
          echo "##[set-output name=BUILD_OS_ROUTE_SVC;]$(echo ${BUILD_OS_ROUTE_SVC})"
          echo "##[set-output name=BUILD_BRIDGE;]$(echo ${BUILD_BRIDGE})"
          echo "##[set-output name=BUILD_JMETER;]$(echo ${BUILD_JMETER})"
          echo "##[set-output name=BUILD_HELM_SVC;]$(echo ${BUILD_HELM_SVC})"
          echo "##[set-output name=BUILD_APPROVAL_SVC;]$(echo ${BUILD_APPROVAL_SVC})"
          echo "##[set-output name=BUILD_DISTRIBUTOR;]$(echo ${BUILD_DISTRIBUTOR})"
          echo "##[set-output name=BUILD_EVENTBROKER;]$(echo ${BUILD_EVENTBROKER})"
          echo "##[set-output name=BUILD_SHIPYARD_CONTROLLER;]$(echo ${BUILD_SHIPYARD_CONTROLLER})"
          echo "##[set-output name=BUILD_SECRET_SVC;]$(echo ${BUILD_SECRET_SVC})"
          echo "##[set-output name=BUILD_CONFIGURATION_SVC;]$(echo ${BUILD_CONFIGURATION_SVC})"
          echo "##[set-output name=BUILD_REMEDIATION_SVC;]$(echo ${BUILD_REMEDIATION_SVC})"
          echo "##[set-output name=BUILD_LIGHTHOUSE_SVC;]$(echo ${BUILD_LIGHTHOUSE_SVC})"
          echo "##[set-output name=BUILD_MONGODB_DS;]$(echo ${BUILD_MONGODB_DS})"
          echo "##[set-output name=BUILD_STATISTICS_SVC;]$(echo ${BUILD_STATISTICS_SVC})"

      - name: Extract branch name
        id: extract_branch
        # see https://github.com/keptn/gh-action-extract-branch-name for details
        uses: keptn/gh-action-extract-branch-name@main

      - name: 'Get Previous tag'
        id: get_previous_tag
        uses: "WyriHaximus/github-action-get-previous-tag@v1.0.1"
      - name: 'Get next patch version'
        id: get_next_semver_tag
        uses: "WyriHaximus/github-action-next-semvers@v1.1"
        with:
          version: ${{ steps.get_previous_tag.outputs.tag }}
      - name: Get the version
        id: get_version
        env:
          BRANCH: ${{ steps.extract_branch.outputs.BRANCH }}
          BRANCH_SLUG: ${{ steps.extract_branch.outputs.BRANCH_SLUG }}
        shell: bash
        run: |
          # determine version
          GIT_LAST_TAG=${{ steps.get_previous_tag.outputs.tag }}
          GIT_NEXT_TAG=${{ steps.get_next_semver_tag.outputs.patch }}
          echo "GIT_LAST_TAG=${GIT_LAST_TAG}, GIT_NEXT_TAG=${GIT_NEXT_TAG}"

          if [[ "$BRANCH" == "release-"* ]]; then
            # Release Branch: extract version from branch name
            VERSION=${BRANCH#"release-"}
            else
            if [[ "$BRANCH" == "master" ]]; then
              # master branch = latest
              VERSION="${GIT_NEXT_TAG}-dev"
            else
              # Feature/Development Branch - use last tag with branch slug
              VERSION="${GIT_NEXT_TAG}-dev-${BRANCH_SLUG}"
            fi
          fi

          # determine keptn spec version
          git submodule update --init
          cd specification
          KEPTN_SPEC_VERSION=$(git describe --tags)

          echo "VERSION=${VERSION}"
          echo "KEPTN_SPEC_VERSION=${KEPTN_SPEC_VERSION}"

          echo "##[set-output name=VERSION;]$(echo ${VERSION})"
          echo "##[set-output name=KEPTN_SPEC_VERSION;]$(echo ${KEPTN_SPEC_VERSION})"
      - name: Get current date and time
        id: get_datetime
        run: |
          echo "::set-output name=DATE::$(date +'%Y%m%d')"
          echo "::set-output name=TIME::$(date +'%H%M')"
          echo "::set-output name=DATETIME::$(date +'%Y%m%d')$(date +'%H%M')"

  store-output-in-build-config:
    name: "Store output of last step in build-config.env"
    needs: prepare_ci_run
    runs-on: ubuntu-20.04
    steps:
      - name: Create build config file
        env:
          BRANCH: ${{ needs.prepare_ci_run.outputs.BRANCH }}
          BRANCH_SLUG: ${{ needs.prepare_ci_run.outputs.BRANCH_SLUG }}
          BUILD_EVERYTHING: ${{ needs.prepare_ci_run.outputs.BUILD_EVERYTHING }}
          VERSION: ${{ needs.prepare_ci_run.outputs.VERSION }}
          DATETIME: ${{ needs.prepare_ci_run.outputs.DATE }}${{ needs.prepare_ci_run.outputs.TIME }}
          GIT_SHA: ${{ needs.prepare_ci_run.outputs.GIT_SHA }}
        run: |
          echo "BRANCH=${BRANCH}" >> build-config.env
          echo "BRANCH_SLUG=${BRANCH_SLUG}" >> build-config.env
          echo "BUILD_EVERYTHING=${BUILD_EVERYTHING}" >> build-config.env
          echo "VERSION=${VERSION}" >> build-config.env
          echo "DATETIME=${DATETIME}" >> build-config.env
          echo "GIT_SHA=${GIT_SHA}" >> build-config.env

      - name: Upload build config as artifact
        id: upload_build_config
        uses: actions/upload-artifact@v2
        with:
          name: build-config
          path: build-config.env

  ############################################################################
  # Unit tests                                                               #
  ############################################################################
  unit-tests-go-microservices:
    name: Unit Tests Go Microservices
    needs: prepare_ci_run
    runs-on: ubuntu-20.04
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.13
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Load CI Environment from .ci_env
        id: load_ci_env
        uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: .ci_env

      # cache go modules
      - uses: actions/cache@v2.1.4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Test api
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_API == 'true')
        run: |
          go test -coverprofile=coverage.txt -covermode=atomic -v ./handlers/... ./utils/...
          bash <(curl -s https://codecov.io/bash) -c -F api
        working-directory: ./api

      - name: Test os route svc
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_OS_ROUTE_SVC == 'true')
        run: |
          go test -race -v -coverprofile=coverage.txt -covermode=atomic ./...
          bash <(curl -s https://codecov.io/bash) -c -F openshift-route-service
        working-directory: ./platform-support/openshift-route-service

      - name: Test jmeter svc
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_JMETER == 'true')
        run: |
          go test -race -v -coverprofile=coverage.txt -covermode=atomic ./...
          bash <(curl -s https://codecov.io/bash) -c -F jmeter-service
        working-directory: ./jmeter-service

      - name: Test helm svc
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_HELM_SVC == 'true')
        run: |
          go test -race -v -coverprofile=coverage.txt -covermode=atomic ./...
          bash <(curl -s https://codecov.io/bash) -c -F helm-service
        working-directory: ./helm-service

      - name: Test approval svc
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_APPROVAL_SVC == 'true')
        run: |
          go test -race -v -coverprofile=coverage.txt -covermode=atomic ./...
          bash <(curl -s https://codecov.io/bash) -c -F approval-service
        working-directory: ./approval-service

      - name: Test distributor
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_DISTRIBUTOR == 'true')
        run: |
          go test -v -coverprofile=coverage.txt -covermode=atomic ./...
          bash <(curl -s https://codecov.io/bash) -c -F distributor
        working-directory: ./distributor

      - name: Test shipyard controller svc
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_SHIPYARD_CONTROLLER == 'true')
        run: |
          go test -v -coverprofile=coverage.txt -covermode=atomic ./...
          bash <(curl -s https://codecov.io/bash) -c -F shipyard-controller
        working-directory: ./shipyard-controller

      - name: Test secret svc
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_SECRET_SVC == 'true')
        run: |
          go test -v -coverprofile=coverage.txt -covermode=atomic ./...
          bash <(curl -s https://codecov.io/bash) -c -F secret-service
        working-directory: ./secret-service

      - name: Test configuration svc
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_CONFIGURATION_SVC == 'true')
        run: |
          go test -v -coverprofile=coverage.txt -covermode=atomic ./...
          bash <(curl -s https://codecov.io/bash) -c -F configuration-service
        working-directory: ./configuration-service

      - name: Test remediation svc
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_REMEDIATION_SVC == 'true')
        run: |
          go test -race -v -coverprofile=coverage.txt -covermode=atomic ./...
          bash <(curl -s https://codecov.io/bash) -c -F remediation-service
        working-directory: ./remediation-service

      - name: Test lighthouse svc
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_LIGHTHOUSE_SVC == 'true')
        run: |
          go test -v -coverprofile=coverage.txt -covermode=atomic ./...
          bash <(curl -s https://codecov.io/bash) -c -F lighthouse-service
        working-directory: ./lighthouse-service

      - name: Test mongodb datastore svc
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_MONGODB_DS == 'true')
        run: |
          go test -race -v -coverprofile=coverage.txt -covermode=atomic ./...
          bash <(curl -s https://codecov.io/bash) -c -F mongodb-datastore
        working-directory: ./mongodb-datastore

      - name: Test statistics svc
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_STATISTICS_SVC == 'true')
        run: |
          go test -race -v -coverprofile=coverage.txt -covermode=atomic ./...
          bash <(curl -s https://codecov.io/bash) -c -F statistics-service
        working-directory: ./statistics-service


  unit-tests-node:
    needs: prepare_ci_run
    name: Unit Tests Bridge/NodeJS
    runs-on: ubuntu-20.04
    steps:
      - name: Set up Node
        uses: actions/setup-node@v2.1.5
        with:
          node-version: 12.x
      - name: Checkout Code
        uses: actions/checkout@v2
      - uses: actions/cache@v2.1.4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install npm libs
        run: |
          npm install -g codecov
          npm install -g libnpx@10.2.0
      - name: Load CI Environment from .ci_env
        id: load_ci_env
        uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: .ci_env
      - name: Test
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_BRIDGE == 'true')
        run: |
          npm install
          npm run test:ci
        working-directory: ./bridge
      - name: Coverage report
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_BRIDGE == 'true')
        run: bash <(curl -s https://codecov.io/bash) -c -F bridge


  unit-tests-cli:
    name: Unit Tests CLI (multi OS/arch)
    if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_CLI == 'true')
    needs: prepare_ci_run
    strategy:
      matrix:
        go-version: [ 1.13.x ]
        platform: [ ubuntu-20.04 ] #, macOS-11.0, windows-2019 ]
    runs-on: ${{ matrix.platform }}
    env:
      KUBE_CONSTRAINTS: ${{ needs.prepare_ci_run.outputs.KUBE_CONSTRAINTS }}
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout Code
        uses: actions/checkout@v2

      # cache go modules
      - uses: actions/cache@v2.1.4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-cli-${{ hashFiles('cli/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-cli

      - name: Test cli
        run: make test-unit-cli # go test -race -v  -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Coverage report
        run: bash <(curl -s https://codecov.io/bash) -c -F cli

  ############################################################################
  # Build CLI                                                                #
  ############################################################################
  build-cli:
    name: Build Keptn CLI
    needs: [prepare_ci_run, unit-tests-cli]
    if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_CLI == 'true')
    strategy:
      matrix:
        include: # see https://gist.github.com/asukakenji/f15ba7e588ac42795f421b48b8aede63#a-list-of-valid-goarch-values
          - platform: "ubuntu-20.04"
            GOOS: "linux"
            GOARCH: "amd64"
          - platform: "ubuntu-20.04"
            GOOS: "linux"
            GOARCH: "arm"
          - platform: "ubuntu-20.04"
            GOOS: "linux"
            GOARCH: "arm64"
          - platform: "macOS-11.0" # cross-compiling the CLI for macOS does not work - see https://github.com/keptn/keptn/issues/2738
            GOOS: "darwin"
            GOARCH: "amd64"
          # support for apple silicon (arm64 on macOS) is pending Go 1.16 release
#          - platform: "macOS-11.0" # cross-compiling the CLI for macOS does not work - see https://github.com/keptn/keptn/issues/2738
#            GOOS: "darwin"
#            GOARCH: "arm64"
          - platform: "ubuntu-20.04"
            GOOS: "windows"
            GOARCH: "amd64"
    env:
      KUBE_CONSTRAINTS: ${{ needs.prepare_ci_run.outputs.KUBE_CONSTRAINTS }}

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: "1.13.x"
      - name: Checkout Code
        uses: actions/checkout@v2
      # cache go modules
      - uses: actions/cache@v2.1.4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-cli-${{ hashFiles('cli/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-cli
      - name: Build cli
        env:
          PLATFORM: "${{ matrix.platform }}"
          GOARCH: "${{ matrix.GOARCH }}"
          GOOS: "${{ matrix.GOOS }}"
          BRANCH: ${{ needs.prepare_ci_run.outputs.BRANCH }}
          VERSION: ${{ needs.prepare_ci_run.outputs.VERSION }}
          DATETIME: ${{ needs.prepare_ci_run.outputs.DATE }}${{ needs.prepare_ci_run.outputs.TIME }}
          GIT_SHA: ${{ needs.prepare_ci_run.outputs.GIT_SHA }}
        run: |
          FILE_ENDING=""
          # overwrite file ending for windows binaries
          if [[ "$GOOS" == "windows" ]]; then
            FILE_ENDING=".exe"
          fi

          # determine output file name based on version, go os, architecture
          OUTPUT_EXECUTABLE_NAME="keptn-${VERSION}-${GOOS}-${GOARCH}${FILE_ENDING}"
          OUTPUT_ARCHIVE_NAME="keptn-${VERSION}-${GOOS}-${GOARCH}" # no need for file-ending in the archive name

          if [[ "$BRANCH" == "master" ]]; then
            # use VERSION.DATETIME for the cli version (e.g., nightly build)
            VERSION=${VERSION}.${DATETIME}
          fi

          if [[ "$GOOS" == "linux" ]]; then
            # enable static build for linux
            export CGO_ENABLED=0
          fi

          # build the binary using makefile
          make build-cli OUTPUT_EXECUTABLE_NAME="$OUTPUT_EXECUTABLE_NAME"
          # verify output file exists
          ls bin/${OUTPUT_EXECUTABLE_NAME}

          # create a .tar.gz archive of the binary
          mkdir dist
          tar -zcvf dist/${OUTPUT_ARCHIVE_NAME}.tar.gz -C bin ${OUTPUT_EXECUTABLE_NAME}
      - name: Upload Keptn CLI as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: keptn-cli
          path: dist/

  ############################################################################
  # Build Helm Charts (only relevant for build_everything)                   #
  ############################################################################
  helm_charts_build:
    needs: prepare_ci_run
    name: Build Helm Charts
    if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_INSTALLER == 'true')
    runs-on: ubuntu-20.04
    env:
      BRANCH: ${{ needs.prepare_ci_run.outputs.BRANCH }}
      VERSION: ${{ needs.prepare_ci_run.outputs.VERSION }}
      KEPTN_SPEC_VERSION: ${{ needs.prepare_ci_run.outputs.KEPTN_SPEC_VERSION }}
      DATETIME: ${{ needs.prepare_ci_run.outputs.DATE }}${{ needs.prepare_ci_run.outputs.TIME }}
      GIT_SHA: ${{ needs.prepare_ci_run.outputs.GIT_SHA }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Load CI Environment from .ci_env
        id: load_ci_env
        uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: .ci_env

      - name: Build Helm Charts
        id: build_helm_charts
        run: |
          if [[ "$BRANCH" == "master" ]]; then
            # use VERSION.DATETIME for the image tag (e.g., nightly build)
            ./gh-actions-scripts/build_helm_charts.sh "${VERSION}" "${VERSION}.${DATETIME}" "${KEPTN_SPEC_VERSION}"
          else
            # just use VERSION for the image tag
            ./gh-actions-scripts/build_helm_charts.sh "${VERSION}" "${VERSION}" "${KEPTN_SPEC_VERSION}"
          fi

      - name: Upload Helm Chart as an artifact
        id: upload_helm_chart
        uses: actions/upload-artifact@v2
        with:
          name: keptn-installer
          path: keptn-charts/*.tgz

  ############################################################################
  # Build Docker Images                                                      #
  ############################################################################
  docker_build:
    needs: [prepare_ci_run, unit-tests-go-microservices, unit-tests-node]
    name: Docker Build
    runs-on: ubuntu-20.04
    env:
      BRANCH: ${{ needs.prepare_ci_run.outputs.BRANCH }}
      VERSION: ${{ needs.prepare_ci_run.outputs.VERSION }}
      DATETIME: ${{ needs.prepare_ci_run.outputs.DATE }}${{ needs.prepare_ci_run.outputs.TIME }}
      GIT_SHA: ${{ needs.prepare_ci_run.outputs.GIT_SHA }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Load CI Environment from .ci_env
        id: load_ci_env
        uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: .ci_env

      - id: docker_login
        name: Docker Login
        # only run docker login on pushes; also for PRs, but only if this is not a fork
        if: (github.event_name == 'push') || (github.event_name == 'workflow_dispatch') || (github.event.pull_request.head.repo.full_name == github.repository)
        # note: GH does not allow to access secrets for PRs from a forked repositories due to security reasons
        # that's fine, but it means we can't push images to dockerhub
        env:
          REGISTRY_USER: ${{ secrets.REGISTRY_USER }}
          REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
        run: echo "$REGISTRY_PASSWORD" | docker login --username $REGISTRY_USER --password-stdin

      - id: docker_build_api
        name: Docker Build api-service
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_API == 'true')
        uses: keptn/gh-action-build-docker-image@master
        with:
          VERSION: ${{ env.VERSION }}
          DATETIME: ${{ env.DATETIME }}
          IMAGE_NAME: "${{ env.DOCKER_ORGANIZATION }}/${{ env.API_IMAGE }}"
          DOCKER_FOLDER: ${{ env.API_FOLDER }}

      - id: docker_build_bridge
        name: Docker Build Bridge
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_BRIDGE == 'true')
        uses: keptn/gh-action-build-docker-image@master
        with:
          VERSION: ${{ env.VERSION }}
          DATETIME: ${{ env.DATETIME }}
          IMAGE_NAME: "${{ env.DOCKER_ORGANIZATION }}/${{ env.BRIDGE_IMAGE }}"
          DOCKER_FOLDER: ${{ env.BRIDGE_FOLDER }}

      - id: docker_build_distributor
        name: Docker Build Distributor
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_DISTRIBUTOR == 'true')
        uses: keptn/gh-action-build-docker-image@master
        with:
          VERSION: ${{ env.VERSION }}
          DATETIME: ${{ env.DATETIME }}
          IMAGE_NAME: "${{ env.DOCKER_ORGANIZATION }}/${{ env.DISTRIBUTOR_IMAGE }}"
          DOCKER_FOLDER: ${{ env.DISTRIBUTOR_FOLDER }}

      - id: docker_build_jmeter_service
        name: Docker Build jmeter-service
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_JMETER == 'true')
        uses: keptn/gh-action-build-docker-image@master
        with:
          VERSION: ${{ env.VERSION }}
          DATETIME: ${{ env.DATETIME }}
          IMAGE_NAME: "${{ env.DOCKER_ORGANIZATION }}/${{ env.JMETER_SVC_IMAGE }}"
          DOCKER_FOLDER: ${{ env.JMETER_SVC_FOLDER }}

      - id: docker_build_helm_service
        name: Docker Build helm-service
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_HELM_SVC == 'true')
        uses: keptn/gh-action-build-docker-image@master
        with:
          VERSION: ${{ env.VERSION }}
          DATETIME: ${{ env.DATETIME }}
          IMAGE_NAME: "${{ env.DOCKER_ORGANIZATION }}/${{ env.HELM_SVC_IMAGE }}"
          DOCKER_FOLDER: ${{ env.HELM_SVC_FOLDER }}

      - id: docker_build_approval_service
        name: Docker Build approval-service
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_APPROVAL_SVC == 'true')
        uses: keptn/gh-action-build-docker-image@master
        with:
          VERSION: ${{ env.VERSION }}
          DATETIME: ${{ env.DATETIME }}
          IMAGE_NAME: "${{ env.DOCKER_ORGANIZATION }}/${{ env.APPROVAL_SVC_IMAGE }}"
          DOCKER_FOLDER: ${{ env.APPROVAL_SVC_FOLDER }}

      - id: docker_build_os_route_service
        name: Docker Build openshift-route-service
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_OS_ROUTE_SVC == 'true')
        uses: keptn/gh-action-build-docker-image@master
        with:
          VERSION: ${{ env.VERSION }}
          DATETIME: ${{ env.DATETIME }}
          IMAGE_NAME: "${{ env.DOCKER_ORGANIZATION }}/${{ env.OS_ROUTE_SVC_IMAGE }}"
          DOCKER_FOLDER: ${{ env.OS_ROUTE_SVC_FOLDER }}

      - id: docker_build_shipyard_controller
        name: Docker Build shipyard-controller
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_SHIPYARD_CONTROLLER == 'true')
        uses: keptn/gh-action-build-docker-image@master
        with:
          VERSION: ${{ env.VERSION }}
          DATETIME: ${{ env.DATETIME }}
          IMAGE_NAME: "${{ env.DOCKER_ORGANIZATION }}/${{ env.SHIPYARD_CONTROLLER_IMAGE }}"
          DOCKER_FOLDER: ${{ env.SHIPYARD_CONTROLLER_FOLDER }}

      - id: docker_build_secret_service
        name: Docker Build secret-service
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_SECRET_SVC == 'true')
        uses: keptn/gh-action-build-docker-image@master
        with:
          VERSION: ${{ env.VERSION }}
          DATETIME: ${{ env.DATETIME }}
          IMAGE_NAME: "${{ env.DOCKER_ORGANIZATION }}/${{ env.SECRET_SVC_IMAGE }}"
          DOCKER_FOLDER: ${{ env.SECRET_SVC_FOLDER }}

      - id: docker_build_configuration_service
        name: Docker Build configuration-service
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_CONFIGURATION_SVC == 'true')
        uses: keptn/gh-action-build-docker-image@master
        with:
          VERSION: ${{ env.VERSION }}
          DATETIME: ${{ env.DATETIME }}
          IMAGE_NAME: "${{ env.DOCKER_ORGANIZATION }}/${{ env.CONFIGURATION_SVC_IMAGE }}"
          DOCKER_FOLDER: ${{ env.CONFIGURATION_SVC_FOLDER }}

      - id: docker_build_remediation_service
        name: Docker Build remediation-service
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_REMEDIATION_SVC == 'true')
        uses: keptn/gh-action-build-docker-image@master
        with:
          VERSION: ${{ env.VERSION }}
          DATETIME: ${{ env.DATETIME }}
          IMAGE_NAME: "${{ env.DOCKER_ORGANIZATION }}/${{ env.REMEDIATION_SVC_IMAGE }}"
          DOCKER_FOLDER: ${{ env.REMEDIATION_SVC_FOLDER }}

      - id: docker_build_lighthouse_service
        name: Docker Build lighthouse-service
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_LIGHTHOUSE_SVC == 'true')
        uses: keptn/gh-action-build-docker-image@master
        with:
          VERSION: ${{ env.VERSION }}
          DATETIME: ${{ env.DATETIME }}
          IMAGE_NAME: "${{ env.DOCKER_ORGANIZATION }}/${{ env.LIGHTHOUSE_SVC_IMAGE }}"
          DOCKER_FOLDER: ${{ env.LIGHTHOUSE_SVC_FOLDER }}

      - id: docker_build_mongodb_ds
        name: Docker Build mongodb-datastore
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_MONGODB_DS == 'true')
        uses: keptn/gh-action-build-docker-image@master
        with:
          VERSION: ${{ env.VERSION }}
          DATETIME: ${{ env.DATETIME }}
          IMAGE_NAME: "${{ env.DOCKER_ORGANIZATION }}/${{ env.MONGODB_DS_IMAGE }}"
          DOCKER_FOLDER: ${{ env.MONGODB_DS_FOLDER }}

      - id: docker_build_statistics_service
        name: Docker Build statistics-service
        if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_STATISTICS_SVC == 'true')
        uses: keptn/gh-action-build-docker-image@master
        with:
          VERSION: ${{ env.VERSION }}
          DATETIME: ${{ env.DATETIME }}
          IMAGE_NAME: "${{ env.DOCKER_ORGANIZATION }}/${{ env.STATISTICS_SVC_IMAGE }}"
          DOCKER_FOLDER: ${{ env.STATISTICS_SVC_FOLDER }}

      - id: create_docker_build_report
        name: Create Docker Build Report
        run: |
          echo "The following Docker Images have been built: " > docker_build_report_final.txt
          cat docker_build_report.txt >> docker_build_report_final.txt || echo "* No images have been built or uploaded" >> docker_build_report_final.txt
          echo "---"
          cat docker_build_report_final.txt

      - id: report_docker_build_to_pr
        name: Report Docker Build to PR
        if: (github.event_name == 'pull_request') && (github.event.pull_request.head.repo.full_name == github.repository)
        # only run if this is not a fork - see https://github.com/marocchino/sticky-pull-request-comment/issues/227
        # note: GH does not allow to access secrets for PRs from a forked repositories due to security reasons
        # that's fine, but it means we can't comment on the PR in this case
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          path: docker_build_report_final.txt
          recreate: true

      - name: Upload Docker Build Report as an artifact
        id: upload_docker_build_report
        uses: actions/upload-artifact@v2
        with:
          name: docker-build-report
          path: docker_build_report.txt
