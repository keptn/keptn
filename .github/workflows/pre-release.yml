name: Pre-Release
on:
  workflow_dispatch:
    inputs:
      semver-type:
        description: 'Can be one of [major,minor,patch]. CAUTION: This will enforce a new pre-release with the specified semantic version type bumped.'
        required: false
env:
  NODE_VERSION: 16
  KEPTN_BOT_NAME: "Keptn Bot"
  KEPTN_BOT_EMAIL: "keptn-bot <86361500+keptn-bot@users.noreply.github.com>"
  RELEASE_NOTES_FILE: "RELEASE-BODY.md"
  BUILD_EVERYTHING: 'true'
  PRERELEASE_KEYWORD: "next"

  BRIDGE_ARTIFACT_PREFIX: "BRIDGE"
  API_ARTIFACT_PREFIX: "API"
  JMETER_SVC_ARTIFACT_PREFIX: "JMETER_SVC"
  HELM_SVC_ARTIFACT_PREFIX: "HELM_SVC"
  APPROVAL_SVC_ARTIFACT_PREFIX: "APPROVAL_SVC"
  DISTRIBUTOR_ARTIFACT_PREFIX: "DISTRIBUTOR"
  SHIPYARD_CONTROLLER_ARTIFACT_PREFIX: "SHIPYARD_CONTROLLER"
  SECRET_SVC_ARTIFACT_PREFIX: "SECRET_SVC"
  CONFIGURATION_SVC_ARTIFACT_PREFIX: "CONFIGURATION_SVC"
  RESOURCE_SVC_ARTIFACT_PREFIX: "RESOURCE_SVC"
  REMEDIATION_SVC_ARTIFACT_PREFIX: "REMEDIATION_SVC"
  LIGHTHOUSE_SVC_ARTIFACT_PREFIX: "LIGHTHOUSE_SVC"
  MONGODB_DS_ARTIFACT_PREFIX: "MONGODB_DS"
  STATISTICS_SVC_ARTIFACT_PREFIX: "STATISTICS_SVC"
  WEBHOOK_SVC_ARTIFACT_PREFIX: "WEBHOOK_SVC"

  BRIDGE_ARTIFACT: "bridge2"
  BRIDGE_FOLDER: "bridge/"
  BRIDGE_DOCKER_TEST_TARGET: "builder-test-unit"

  API_ARTIFACT: "api"
  API_FOLDER: "api/"
  API_DOCKER_TEST_TARGET: "builder-test"

  JMETER_SVC_ARTIFACT: "jmeter-service"
  JMETER_SVC_FOLDER: "jmeter-service/"
  JMETER_SVC_DOCKER_TEST_TARGET: "builder-test"

  HELM_SVC_ARTIFACT: "helm-service"
  HELM_SVC_FOLDER: "helm-service/"
  HELM_SVC_DOCKER_TEST_TARGET: "builder-test"

  APPROVAL_SVC_ARTIFACT: "approval-service"
  APPROVAL_SVC_FOLDER: "approval-service/"
  APPROVAL_SVC_DOCKER_TEST_TARGET: "builder-test"

  DISTRIBUTOR_ARTIFACT: "distributor"
  DISTRIBUTOR_FOLDER: "distributor/"
  DISTRIBUTOR_DOCKER_TEST_TARGET: "builder-test"

  SHIPYARD_CONTROLLER_ARTIFACT: "shipyard-controller"
  SHIPYARD_CONTROLLER_FOLDER: "shipyard-controller/"
  SHIPYARD_CONTROLLER_DOCKER_TEST_TARGET: "builder-test"

  SECRET_SVC_ARTIFACT: "secret-service"
  SECRET_SVC_FOLDER: "secret-service/"
  SECRET_SVC_DOCKER_TEST_TARGET: "builder-test"

  CONFIGURATION_SVC_ARTIFACT: "configuration-service"
  CONFIGURATION_SVC_FOLDER: "configuration-service/"
  CONFIGURATION_SVC_DOCKER_TEST_TARGET: "builder-test"

  RESOURCE_SVC_ARTIFACT: "resource-service"
  RESOURCE_SVC_FOLDER: "resource-service/"
  RESOURCE_SVC_DOCKER_TEST_TARGET: "builder-test"

  REMEDIATION_SVC_ARTIFACT: "remediation-service"
  REMEDIATION_SVC_FOLDER: "remediation-service/"
  REMEDIATION_SVC_DOCKER_TEST_TARGET: "builder-test"

  LIGHTHOUSE_SVC_ARTIFACT: "lighthouse-service"
  LIGHTHOUSE_SVC_FOLDER: "lighthouse-service/"
  LIGHTHOUSE_SVC_DOCKER_TEST_TARGET: "builder-test"

  MONGODB_DS_ARTIFACT: "mongodb-datastore"
  MONGODB_DS_FOLDER: "mongodb-datastore/"
  MONGODB_DS_DOCKER_TEST_TARGET: "builder-test"

  STATISTICS_SVC_ARTIFACT: "statistics-service"
  STATISTICS_SVC_FOLDER: "statistics-service/"
  STATISTICS_SVC_DOCKER_TEST_TARGET: "builder-test"

  WEBHOOK_SVC_ARTIFACT: "webhook-service"
  WEBHOOK_SVC_FOLDER: "webhook-service/"
  WEBHOOK_SVC_DOCKER_TEST_TARGET: "builder-test"
defaults:
  run:
    shell: bash
jobs:
  prepare:
    name: Prepare release run
    runs-on: ubuntu-20.04
    outputs:
      next-version: ${{ steps.version_number.outputs.next-version }}
      branch: ${{ steps.current_branch.outputs.branch }}
      keptn-spec-version: ${{ steps.keptn_spec_version.outputs.keptn-spec-version }}
      BUILD_EVERYTHING: ${{ steps.build_everything.outputs.BUILD_EVERYTHING }}
      BUILD_INSTALLER: ${{ steps.check_modified_files.outputs.BUILD_INSTALLER }}
      BUILD_CLI: ${{ steps.check_modified_files.outputs.BUILD_CLI }}
      BUILD_MATRIX: ${{ steps.check_modified_files.outputs.BUILD_MATRIX }}
      BUILD_MATRIX_EMPTY: ${{ steps.check_modified_files.outputs.BUILD_MATRIX_EMPTY }}
    steps:
      - name: Check SemVer input
        env:
          SEMVER_TYPE: ${{ github.event.inputs.semver-type }}
        run: |
          if [[ ! -z "$SEMVER_TYPE" ]]; then
            echo "SemVer Type is defined. Checking for valid SemVer type..."
            if [[ "$SEMVER_TYPE" == "major" ]] || [[ "$SEMVER_TYPE" == "minor" ]] || [[ "$SEMVER_TYPE" == "patch" ]]; then
              echo "::notice::SemVer Type is correctly set to $SEMVER_TYPE! Continuing with this version bump..."
            else
              echo "::error::ERROR: Enforced SemVer does not match any of [major,minor,patch]!"
              echo "Exiting..."
              exit 1
            fi
          else
            echo "::notice::No SemVer type defined, continuing with auto generated version number..."
          fi

      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.KEPTN_BOT_TOKEN }}

      - name: Find next version number
        id: version_number
        env:
          SEMVER_TYPE: ${{ github.event.inputs.semver-type }}
        run: |
          if [[ ! -z "$SEMVER_TYPE" ]]; then
            npx standard-version@^9.3.1 \
              --skip.commit \
              --skip.tag \
              --skip.changelog \
              --prerelease "${{ env.PRERELEASE_KEYWORD }}" \
              --release-as "$SEMVER_TYPE"
          else
            npx standard-version@^9.3.1 \
              --skip.commit \
              --skip.tag \
              --skip.changelog \
              --prerelease "${{ env.PRERELEASE_KEYWORD }}"
          fi

          NEXT_VERSION=$(cat VERSION.txt)
          echo "::set-output name=next-version::${NEXT_VERSION}"
          git checkout HEAD -- VERSION.txt

      - name: Find current branch
        id: current_branch
        run: |
          branch=${GITHUB_REF#refs/heads/}
          echo "::set-output name=branch::${branch}"

      - name: Get keptn spec version
        id: keptn_spec_version
        run: |
          git submodule update --init
          cd specification
          KEPTN_SPEC_VERSION=$(git describe --tags)
          echo "::set-output name=keptn-spec-version::${KEPTN_SPEC_VERSION}"

      - name: Prepare artifact build matrix
        id: check_modified_files
        env:
          BUILD_EVERYTHING: true
          PRERELEASE_BUILD: true
        run: |
          ./gh-actions-scripts/prepare_changed_artifacts.sh ""

  ############################################################################
  # Build Docker Images
  ############################################################################
#  docker_build:
#    needs: prepare
#    name: Docker Build
#    runs-on: ubuntu-20.04
#    strategy:
#      matrix: ${{ fromJson(needs.prepare.outputs.BUILD_MATRIX) }}
#    env:
#      BRANCH: ${{ needs.prepare.outputs.branch }}
#      VERSION: ${{ needs.prepare.outputs.next-version }}
#    steps:
#      - name: Checkout Code
#        uses: actions/checkout@v2.4.0
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v1
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.REGISTRY_USER }}
#          password: ${{ secrets.REGISTRY_PASSWORD }}
#
#      - name: Login to GitHub Container Registry
#        uses: docker/login-action@v1
#        with:
#          registry: "ghcr.io"
#          username: "keptn-bot"
#          password: ${{ secrets.KEPTN_BOT_TOKEN }}
#
#      - name: Login to Quay.io
#        uses: docker/login-action@v1
#        with:
#          registry: "quay.io"
#          username: ${{ secrets.QUAY_USER }}
#          password: ${{ secrets.QUAY_TOKEN }}
#
#      - id: docker_build_image
#        name: "Docker Build keptn/${{ matrix.config.artifact }}"
#        uses: docker/build-push-action@v2
#        with:
#          context: ${{ matrix.config.working-dir }}
#          tags: |
#            keptn/${{ matrix.config.artifact }}:${{ env.VERSION }}
#            quay.io/keptn/${{ matrix.config.artifact }}:${{ env.VERSION }}
#            ghcr.io/keptn/${{ matrix.config.artifact }}:${{ env.VERSION }}
#          build-args: |
#            version=${{ env.VERSION }}
#          push: ${{ matrix.config.should-push-image }}
#          pull: true
#
#      - name: Write docker image digest to file
#        if: matrix.config.should-push-image
#        env:
#          IMAGE_DIGEST: ${{ steps.docker_build_image.outputs.digest }}
#          IMAGE_DIGEST_FILENAME: "./digest-${{ matrix.config.artifact }}.txt"
#        run: |
#          echo "${{ matrix.config.artifact }},$IMAGE_DIGEST" > "$IMAGE_DIGEST_FILENAME"
#
#      - name: Upload Digest file as artifact
#        if: matrix.config.should-push-image
#        uses: actions/upload-artifact@v2
#        env:
#          IMAGE_DIGEST_FILENAME: "./digest-${{ matrix.config.artifact }}.txt"
#        with:
#          name: image-digests
#          path: ${{ env.IMAGE_DIGEST_FILENAME }}

  ############################################################################
  # Build Helm Charts (only relevant for build_everything)
  ############################################################################
  build-helm-charts:
    needs: prepare
    name: Build Helm Charts
    uses: keptn/keptn/.github/workflows/build-helm-charts.yml@master
    with:
      branch: ${{ needs.prepare.outputs.branch }}
      version: ${{ needs.prepare.outputs.next-version }}
      keptn-spec-version: ${{ needs.prepare.outputs.keptn-spec-version }}
      release: true

  ############################################################################
  # Build CLI
  ############################################################################
#  build-cli:
#    needs: prepare
#    uses: keptn/keptn/.github/workflows/build-cli.yml@master
#    with:
#      branch: ${{ needs.prepare.outputs.branch }}
#      version: ${{ needs.prepare.outputs.next-version }}
#      release: true

  ############################################################################
  # Pre-Release
  ############################################################################
  pre-release:
    name: "Pre-Release"
    runs-on: ubuntu-20.04
#    needs: [prepare, docker_build, build-helm-charts, build-cli]
    needs: [prepare, build-helm-charts]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          path: keptn
          token: ${{ secrets.KEPTN_BOT_TOKEN }}

      - name: Checkout helm-charts repo
        uses: actions/checkout@v2
        with:
          repository: keptn/helm-charts
          path: helm-charts
          ref: gh-pages
          token: ${{ secrets.KEPTN_BOT_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v2.5.1
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Configure Git
        env:
          KEPTN_BOT_NAME: ${{ env.KEPTN_BOT_NAME }}
          KEPTN_BOT_EMAIL: ${{ env.KEPTN_BOT_EMAIL }}
        run: |
          git config --global user.name "$KEPTN_BOT_NAME"
          git config --global user.email "$KEPTN_BOT_EMAIL"
      - name: Download Pre-Release Artifacts
        uses: actions/download-artifact@v2
        with:
          path: ./dist

      - name: Get k8s resource stats
        env:
          HELM_TEMPLATE: template.yml
          RESOURCE_JSON: resources.json
          RESOURCE_MARKDOWN: resources.md
        run: |
          ls -lah ./
          ls -lah ./dist
          helm template ./dist/keptn-installer/keptn-*.tgz --dry-run > $HELM_TEMPLATE
          cat $HELM_TEMPLATE | \
          yq eval-all -o=json '
            [
              .spec.template.spec.containers.[] | 
              {"name":.name, "resources":.resources}
            ]' | \
          jq '[
            .[] | {
              name: .name, 
              cpu_request: .resources.requests.cpu, 
              cpu_limit: .resources.limits.cpu, 
              mem_request: .resources.requests.memory, 
              mem_limit: .resources.limits.memory
            }
          ] |
          unique_by(.name)' > $RESOURCE_JSON
          npx tablemark-cli@v2.0.0 $RESOURCE_JSON
